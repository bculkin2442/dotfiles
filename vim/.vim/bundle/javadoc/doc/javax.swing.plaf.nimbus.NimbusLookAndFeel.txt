*javax.swing.plaf.nimbus.NimbusLookAndFeel* *NimbusLookAndFeel* The NimbusLookAn

public class NimbusLookAndFeel
  extends    |javax.swing.plaf.synth.SynthLookAndFeel|

|javax.swing.plaf.nimbus.NimbusLookAndFeel_Description|
|javax.swing.plaf.nimbus.NimbusLookAndFeel_Fields|
|javax.swing.plaf.nimbus.NimbusLookAndFeel_Constructors|
|javax.swing.plaf.nimbus.NimbusLookAndFeel_Methods|

================================================================================

*javax.swing.plaf.nimbus.NimbusLookAndFeel_Constructors*
|javax.swing.plaf.nimbus.NimbusLookAndFeel()|Create a new NimbusLookAndFeel.

*javax.swing.plaf.nimbus.NimbusLookAndFeel_Methods*
|javax.swing.plaf.nimbus.NimbusLookAndFeel.getDefaults()|
|javax.swing.plaf.nimbus.NimbusLookAndFeel.getDerivedColor(Color,Color,float)|D
|javax.swing.plaf.nimbus.NimbusLookAndFeel.getDerivedColor(Color,Color,float,boolean)|
|javax.swing.plaf.nimbus.NimbusLookAndFeel.getDerivedColor(String,float,float,float,int,boolean)|
|javax.swing.plaf.nimbus.NimbusLookAndFeel.getDescription()|Returns a textual d
|javax.swing.plaf.nimbus.NimbusLookAndFeel.getDisabledIcon(JComponent,Icon)|
|javax.swing.plaf.nimbus.NimbusLookAndFeel.getID()|Return a string that identif
|javax.swing.plaf.nimbus.NimbusLookAndFeel.getName()|Return a short string that
|javax.swing.plaf.nimbus.NimbusLookAndFeel.getStyle(JComponent,Region)|Gets the
|javax.swing.plaf.nimbus.NimbusLookAndFeel.initialize()|Called by UIManager whe
|javax.swing.plaf.nimbus.NimbusLookAndFeel.register(Region,String)|Registers a 
|javax.swing.plaf.nimbus.NimbusLookAndFeel.shouldUpdateStyleOnAncestorChanged()|
|javax.swing.plaf.nimbus.NimbusLookAndFeel.shouldUpdateStyleOnEvent(PropertyChangeEvent)|
|javax.swing.plaf.nimbus.NimbusLookAndFeel.uninitialize()|Called by UIManager w

*javax.swing.plaf.nimbus.NimbusLookAndFeel_Description*

The NimbusLookAndFeel class. 



*javax.swing.plaf.nimbus.NimbusLookAndFeel()*

public NimbusLookAndFeel()

Create a new NimbusLookAndFeel. 


*javax.swing.plaf.nimbus.NimbusLookAndFeel.getDefaults()*

public |javax.swing.UIDefaults| getDefaults()





*javax.swing.plaf.nimbus.NimbusLookAndFeel.getDerivedColor(Color,Color,float)*

protected final |java.awt.Color| getDerivedColor(
  java.awt.Color color1,
  java.awt.Color color2,
  float midPoint)

Decodes and returns a color, which is derived from a offset between two other 
colors. 


    color1 - The first color 
    color2 - The second color 
    midPoint - The offset between color 1 and color 2, a value of 0.0 is color 1 and 1.0 is 
       color 2; 

    Returns: The derived color, which will be a UIResource 

*javax.swing.plaf.nimbus.NimbusLookAndFeel.getDerivedColor(Color,Color,float,boolean)*

protected final |java.awt.Color| getDerivedColor(
  java.awt.Color color1,
  java.awt.Color color2,
  float midPoint,
  boolean uiResource)

Decodes and returns a color, which is derived from an offset between two other 
colors. 


    color1 - The first color 
    color2 - The second color 
    midPoint - The offset between color 1 and color 2, a value of 0.0 is color 1 and 1.0 is 
       color 2; 
    uiResource - True if the derived color should be a UIResource 

    Returns: The derived color 

*javax.swing.plaf.nimbus.NimbusLookAndFeel.getDerivedColor(String,float,float,float,int,boolean)*

public |java.awt.Color| getDerivedColor(
  java.lang.String uiDefaultParentName,
  float hOffset,
  float sOffset,
  float bOffset,
  int aOffset,
  boolean uiResource)

Get a derived color, derived colors are shared instances and is color value 
will change when its parent UIDefault color changes. 


    uiDefaultParentName - The parent UIDefault key 
    hOffset - The hue offset 
    sOffset - The saturation offset 
    bOffset - The brightness offset 
    aOffset - The alpha offset 
    uiResource - True if the derived color should be a UIResource, false if it should not be 

    Returns: The stored derived color 

*javax.swing.plaf.nimbus.NimbusLookAndFeel.getDescription()*

public |java.lang.String| getDescription()

Returns a textual description of this look and feel. 



    Returns: textual description of this look and feel. 

*javax.swing.plaf.nimbus.NimbusLookAndFeel.getDisabledIcon(JComponent,Icon)*

public |javax.swing.Icon| getDisabledIcon(
  javax.swing.JComponent component,
  javax.swing.Icon icon)





*javax.swing.plaf.nimbus.NimbusLookAndFeel.getID()*

public |java.lang.String| getID()

Return a string that identifies this look and feel. This String will be the 
unquoted String "Nimbus". 



    Returns: a short string identifying this look and feel. 

*javax.swing.plaf.nimbus.NimbusLookAndFeel.getName()*

public |java.lang.String| getName()

Return a short string that identifies this look and feel. This String will be 
the unquoted String "Nimbus". 



    Returns: a short string identifying this look and feel. 

*javax.swing.plaf.nimbus.NimbusLookAndFeel.getStyle(JComponent,Region)*

public static |javax.swing.plaf.nimbus.NimbusStyle| getStyle(
  javax.swing.JComponent c,
  javax.swing.plaf.synth.Region r)

Gets the style associated with the given component and region. This will never 
return null. If an appropriate component and region cannot be determined, then 
a default style is returned. 


    c - a non-null reference to a JComponent 
    r - a non-null reference to the region of the component c 

    Returns: a non-null reference to a NimbusStyle. 

*javax.swing.plaf.nimbus.NimbusLookAndFeel.initialize()*

public void initialize()

Called by UIManager when this look and feel is installed. 



*javax.swing.plaf.nimbus.NimbusLookAndFeel.register(Region,String)*

public void register(
  javax.swing.plaf.synth.Region region,
  java.lang.String prefix)

Registers a third party component with the NimbusLookAndFeel. 

Regions represent Components and areas within Components that act as 
independent painting areas. Once registered with the NimbusLookAndFeel, 
NimbusStyles for these Regions can be retrieved via the getStyle method. 

The NimbusLookAndFeel uses a standard naming scheme for entries in the 
UIDefaults table. The key for each property, state, painter, and other default 
registered in UIDefaults for a specific Region will begin with the specified 
prefix 

For example, suppose I had a component named JFoo. Suppose I then registered 
this component with the NimbusLookAndFeel in this manner: 



laf.register(NimbusFooUI.FOO_REGION, "Foo"); 

In this case, I could then register properties for this component with 
UIDefaults in the following manner: 



UIManager.put("Foo.background", new ColorUIResource(Color.BLACK)); 
UIManager.put("Foo.Enabled.backgroundPainter", new FooBackgroundPainter()); 

It is also possible to register a named component with Nimbus. For example, 
suppose you wanted to style the background of a JPanel named "MyPanel" 
differently from other JPanels. You could accomplish this by doing the 
following: 



laf.register(Region.PANEL, "\"MyPanel\""); 
UIManager.put("\"MyPanel\".background", new ColorUIResource(Color.RED)); 


    region - The Synth Region that is being registered. Such as Button, or ScrollBarThumb, 
       or NimbusFooUI.FOO_REGION. 
    prefix - The UIDefault prefix. For example, could be ComboBox, or if a named components, 
       "MyComboBox", or even something like 
       ToolBar."MyComboBox"."ComboBox.arrowButton" 

*javax.swing.plaf.nimbus.NimbusLookAndFeel.shouldUpdateStyleOnAncestorChanged()*

public boolean shouldUpdateStyleOnAncestorChanged()





    Returns: 

*javax.swing.plaf.nimbus.NimbusLookAndFeel.shouldUpdateStyleOnEvent(PropertyChangeEvent)*

protected boolean shouldUpdateStyleOnEvent(java.beans.PropertyChangeEvent ev)

Overridden to returntruewhen one of the following properties change: 

"Nimbus.Overrides""Nimbus.Overrides.InheritDefaults""JComponent.sizeVariant" 



*javax.swing.plaf.nimbus.NimbusLookAndFeel.uninitialize()*

public void uninitialize()

Called by UIManager when this look and feel is uninstalled. 




