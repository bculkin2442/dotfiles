*javax.lang.model.util.TypeKindVisitor7* *TypeKindVisitor7* A visitor of types b

public class TypeKindVisitor7<R,P>
  extends    |javax.lang.model.util.TypeKindVisitor6|

|javax.lang.model.util.TypeKindVisitor7_Description|
|javax.lang.model.util.TypeKindVisitor7_Fields|
|javax.lang.model.util.TypeKindVisitor7_Constructors|
|javax.lang.model.util.TypeKindVisitor7_Methods|

================================================================================

*javax.lang.model.util.TypeKindVisitor7_Constructors*
|javax.lang.model.util.TypeKindVisitor7()|Constructor for concrete subclasses t
|javax.lang.model.util.TypeKindVisitor7(R)|Constructor for concrete subclasses 

*javax.lang.model.util.TypeKindVisitor7_Methods*
|javax.lang.model.util.TypeKindVisitor7.visitUnion(UnionType,P)|This implementa

*javax.lang.model.util.TypeKindVisitor7_Description*

A visitor of types based on their kind(|javax.lang.model.type.TypeKind|) with 
default behavior appropriate for the 
RELEASE_7(|javax.lang.model.SourceVersion|) source version. For 
types(|javax.lang.model.type.TypeMirror|) XYZ that may have more than one kind, 
the visitXYZ methods in this class delegate to the visitXYZKind method 
corresponding to the first argument's kind. The visitXYZKind methods call 
defaultAction(|javax.lang.model.util.TypeKindVisitor7|) , passing their 
arguments todefaultAction's corresponding parameters. 

Methods in this class may be overridden subject to their general contract. Note 
that annotating methods in concrete subclasses with 
@Override(|java.lang.Override|) will help ensure that methods are overridden as 
intended. 

WARNING: TheTypeVisitorinterface implemented by this class may have methods 
added to it in the future to accommodate new, currently unknown, language 
structures added to future versions of the Java programming language. 
Therefore, methods whose names begin with"visit"may be added to this class in 
the future; to avoid incompatibilities, classes which extend this class should 
not declare any instance methods with names beginning with"visit". 

When such a new visit method is added, the default implementation in this class 
will be to call the visitUnknown(|javax.lang.model.util.TypeKindVisitor7|) 
method. A new type kind visitor class will also be introduced to correspond to 
the new language level; this visitor will have different default behavior for 
the visit method in question. When the new visitor is introduced, all or 
portions of this visitor may be deprecated. 

Note that adding a default implementation of a new visit method in a visitor 
class will occur instead of adding a default method directly in the visitor 
interface since a Java SE 8 language feature cannot be used to this version of 
the API since this version is required to be runnable on Java SE 7 
implementations. Future versions of the API that are only required to run on 
Java SE 8 and later may take advantage of default methods in this situation. 



*javax.lang.model.util.TypeKindVisitor7()*

protected TypeKindVisitor7()

Constructor for concrete subclasses to call; usesnullfor the default value. 


*javax.lang.model.util.TypeKindVisitor7(R)*

protected TypeKindVisitor7(R defaultValue)

Constructor for concrete subclasses to call; uses the argument for the default 
value. 

    defaultValue - the value to assign to {@link #DEFAULT_VALUE} 

*javax.lang.model.util.TypeKindVisitor7.visitUnion(UnionType,P)*

public |R| visitUnion(
  javax.lang.model.type.UnionType t,
  P p)

This implementation visits aUnionTypeby callingdefaultAction. 


    t - {@inheritDoc} 
    p - {@inheritDoc} 

    Returns: the result of {@code defaultAction} 


