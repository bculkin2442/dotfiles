*java.util.Optional* *Optional* A container object which may or may not contain 

public final class Optional<T>
  extends    |java.lang.Object|

|java.util.Optional_Description|
|java.util.Optional_Fields|
|java.util.Optional_Constructors|
|java.util.Optional_Methods|

================================================================================

*java.util.Optional_Methods*
|java.util.Optional.empty()|Returns an emptyOptionalinstance.
|java.util.Optional.equals(Object)|Indicates whether some other object is "equa
|java.util.Optional.filter(Predicate<?superT>)|If a value is present, and the v
|java.util.Optional.flatMap(Function<?superT,Optional<U>>)|If a value is presen
|java.util.Optional.get()|If a value is present in thisOptional, returns the va
|java.util.Optional.hashCode()|Returns the hash code value of the present value
|java.util.Optional.ifPresent(Consumer<?superT>)|If a value is present, invoke 
|java.util.Optional.isPresent()|Returntrueif there is a value present, otherwis
|java.util.Optional.map(Function<?superT,?extendsU>)|If a value is present, app
|java.util.Optional.of(T)|Returns anOptionalwith the specified present non-null
|java.util.Optional.ofNullable(T)|Returns anOptionaldescribing the specified va
|java.util.Optional.orElse(T)|Return the value if present, otherwise returnothe
|java.util.Optional.orElseGet(Supplier<?extendsT>)|Return the value if present,
|java.util.Optional.orElseThrow(Supplier<?extendsX>)|Return the contained value
|java.util.Optional.toString()|Returns a non-empty string representation of thi

*java.util.Optional_Description*

A container object which may or may not contain a non-null value. If a value is 
present,isPresent()will returntrueandget()will return the value. 

Additional methods that depend on the presence or absence of a contained value 
are provided, such as orElse()(|java.util.Optional|) (return a default value if 
value not present) and ifPresent()(|java.util.Optional|) (execute a block of 
code if the value is present). 

This is a value-based class; use of identity-sensitive operations (including 
reference equality (==), identity hash code, or synchronization) on instances 
ofOptionalmay have unpredictable results and should be avoided. 



*java.util.Optional.empty()*

public static |java.util.Optional|<T> empty()

Returns an emptyOptionalinstance. No value is present for this Optional. 



    Returns: an empty {@code Optional} 

*java.util.Optional.equals(Object)*

public boolean equals(java.lang.Object obj)

Indicates whether some other object is "equal to" this Optional. The other 
object is considered equal if: 

it is also anOptionaland; both instances have no value present or; the present 
values are "equal to" each other viaequals(). 


    obj - an object to be tested for equality 

    Returns: {code true} if the other object is "equal to" this object otherwise {@code 
             false} 

*java.util.Optional.filter(Predicate<?superT>)*

public |java.util.Optional|<T> filter(java.util.function.Predicate<? super T> predicate)

If a value is present, and the value matches the given predicate, return 
anOptionaldescribing the value, otherwise return an emptyOptional. 


    predicate - a predicate to apply to the value, if present 

    Returns: an {@code Optional} describing the value of this {@code Optional} if a value is 
             present and the value matches the given predicate, otherwise an 
             empty {@code Optional} 

*java.util.Optional.flatMap(Function<?superT,Optional<U>>)*

public |java.util.Optional|<U> flatMap(java.util.function.Function<? super T, java.util.Optional<U>> mapper)

If a value is present, apply the providedOptional-bearing mapping function to 
it, return that result, otherwise return an emptyOptional. This method is 
similar to (|java.util.Optional|) , but the provided mapper is one whose result 
is already anOptional, and if invoked,flatMapdoes not wrap it with an 
additionalOptional. 


    mapper - a mapping function to apply to the value, if present the mapping function 

    Returns: the result of applying an {@code Optional}-bearing mapping function to the 
             value of this {@code Optional}, if a value is present, otherwise 
             an empty {@code Optional} 

*java.util.Optional.get()*

public |T| get()

If a value is present in thisOptional, returns the value, otherwise 
throwsNoSuchElementException. 



    Returns: the non-null value held by this {@code Optional} 

*java.util.Optional.hashCode()*

public int hashCode()

Returns the hash code value of the present value, if any, or 0 (zero) if no 
value is present. 



    Returns: hash code value of the present value or 0 if no value is present 

*java.util.Optional.ifPresent(Consumer<?superT>)*

public void ifPresent(java.util.function.Consumer<? super T> consumer)

If a value is present, invoke the specified consumer with the value, otherwise 
do nothing. 


    consumer - block to be executed if a value is present 

*java.util.Optional.isPresent()*

public boolean isPresent()

Returntrueif there is a value present, otherwisefalse. 



    Returns: {@code true} if there is a value present, otherwise {@code false} 

*java.util.Optional.map(Function<?superT,?extendsU>)*

public |java.util.Optional|<U> map(java.util.function.Function<? super T, ? extends U> mapper)

If a value is present, apply the provided mapping function to it, and if the 
result is non-null, return anOptionaldescribing the result. Otherwise return an 
emptyOptional. 


    mapper - a mapping function to apply to the value, if present 

    Returns: an {@code Optional} describing the result of applying a mapping function to the 
             value of this {@code Optional}, if a value is present, otherwise 
             an empty {@code Optional} 

*java.util.Optional.of(T)*

public static |java.util.Optional|<T> of(T value)

Returns anOptionalwith the specified present non-null value. 


    value - the value to be present, which must be non-null 

    Returns: an {@code Optional} with the value present 

*java.util.Optional.ofNullable(T)*

public static |java.util.Optional|<T> ofNullable(T value)

Returns anOptionaldescribing the specified value, if non-null, otherwise 
returns an emptyOptional. 


    value - the possibly-null value to describe 

    Returns: an {@code Optional} with a present value if the specified value is non-null, 
             otherwise an empty {@code Optional} 

*java.util.Optional.orElse(T)*

public |T| orElse(T other)

Return the value if present, otherwise returnother. 


    other - the value to be returned if there is no value present, may be null 

    Returns: the value, if present, otherwise {@code other} 

*java.util.Optional.orElseGet(Supplier<?extendsT>)*

public |T| orElseGet(java.util.function.Supplier<? extends T> other)

Return the value if present, otherwise invokeotherand return the result of that 
invocation. 


    other - a {@code Supplier} whose result is returned if no value is present 

    Returns: the value if present otherwise the result of {@code other.get()} 

*java.util.Optional.orElseThrow(Supplier<?extendsX>)*

public |T| orElseThrow(java.util.function.Supplier<? extends X> exceptionSupplier)
  throws |java.lang.Throwable|
         
Return the contained value, if present, otherwise throw an exception to be 
created by the provided supplier. 


    exceptionSupplier - The supplier which will return the exception to be thrown 

    Returns: the present value 

*java.util.Optional.toString()*

public |java.lang.String| toString()

Returns a non-empty string representation of this Optional suitable for 
debugging. The exact presentation format is unspecified and may vary between 
implementations and versions. 



    Returns: the string representation of this instance 


