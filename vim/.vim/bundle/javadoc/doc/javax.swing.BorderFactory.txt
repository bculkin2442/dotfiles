*javax.swing.BorderFactory* *BorderFactory* Factory class for vending standard B

public class BorderFactory
  extends    |java.lang.Object|

|javax.swing.BorderFactory_Description|
|javax.swing.BorderFactory_Fields|
|javax.swing.BorderFactory_Constructors|
|javax.swing.BorderFactory_Methods|

================================================================================

*javax.swing.BorderFactory_Methods*
|javax.swing.BorderFactory.createBevelBorder(int)|Creates a beveled border of t
|javax.swing.BorderFactory.createBevelBorder(int,Color,Color)|Creates a beveled
|javax.swing.BorderFactory.createBevelBorder(int,Color,Color,Color,Color)|Creat
|javax.swing.BorderFactory.createCompoundBorder()|Creates a compound border wit
|javax.swing.BorderFactory.createCompoundBorder(Border,Border)|Creates a compou
|javax.swing.BorderFactory.createDashedBorder(Paint)|Creates a dashed border of
|javax.swing.BorderFactory.createDashedBorder(Paint,float,float)|Creates a dash
|javax.swing.BorderFactory.createDashedBorder(Paint,float,float,float,boolean)|
|javax.swing.BorderFactory.createEmptyBorder()|Creates an empty border that tak
|javax.swing.BorderFactory.createEmptyBorder(int,int,int,int)|Creates an empty 
|javax.swing.BorderFactory.createEtchedBorder()|Creates a border with an "etche
|javax.swing.BorderFactory.createEtchedBorder(Color,Color)|Creates a border wit
|javax.swing.BorderFactory.createEtchedBorder(int)|Creates a border with an "et
|javax.swing.BorderFactory.createEtchedBorder(int,Color,Color)|Creates a border
|javax.swing.BorderFactory.createLineBorder(Color)|Creates a line border withe 
|javax.swing.BorderFactory.createLineBorder(Color,int)|Creates a line border wi
|javax.swing.BorderFactory.createLineBorder(Color,int,boolean)|Creates a line b
|javax.swing.BorderFactory.createLoweredBevelBorder()|Creates a border with a l
|javax.swing.BorderFactory.createLoweredSoftBevelBorder()|Creates a beveled bor
|javax.swing.BorderFactory.createMatteBorder(int,int,int,int,Color)|Creates a m
|javax.swing.BorderFactory.createMatteBorder(int,int,int,int,Icon)|Creates a ma
|javax.swing.BorderFactory.createRaisedBevelBorder()|Creates a border with a ra
|javax.swing.BorderFactory.createRaisedSoftBevelBorder()|Creates a beveled bord
|javax.swing.BorderFactory.createSoftBevelBorder(int)|Creates a beveled border 
|javax.swing.BorderFactory.createSoftBevelBorder(int,Color,Color)|Creates a bev
|javax.swing.BorderFactory.createSoftBevelBorder(int,Color,Color,Color,Color)|C
|javax.swing.BorderFactory.createStrokeBorder(BasicStroke)|Creates a border of 
|javax.swing.BorderFactory.createStrokeBorder(BasicStroke,Paint)|Creates a bord
|javax.swing.BorderFactory.createTitledBorder(Border)|Creates a new titled bord
|javax.swing.BorderFactory.createTitledBorder(Border,String)|Adds a title to an
|javax.swing.BorderFactory.createTitledBorder(Border,String,int,int)|Adds a tit
|javax.swing.BorderFactory.createTitledBorder(Border,String,int,int,Font)|Adds 
|javax.swing.BorderFactory.createTitledBorder(Border,String,int,int,Font,Color)|
|javax.swing.BorderFactory.createTitledBorder(String)|Creates a new titled bord

*javax.swing.BorderFactory_Description*

Factory class for vending standard Border objects. Wherever possible, this 
factory will hand out references to shared Border instances. For further 
information and examples see How to Use Borders, a section in The Java 
Tutorial. 



*javax.swing.BorderFactory.createBevelBorder(int)*

public static |javax.swing.border.Border| createBevelBorder(int type)

Creates a beveled border of the specified type, using brighter shades of the 
component's current background color for highlighting, and darker shading for 
shadows. (In a lowered border, shadows are on top and highlights are 
underneath.) 


    type - an integer specifying either BevelBorder.LOWERED or BevelBorder.RAISED 

    Returns: the Border object 

*javax.swing.BorderFactory.createBevelBorder(int,Color,Color)*

public static |javax.swing.border.Border| createBevelBorder(
  int type,
  java.awt.Color highlight,
  java.awt.Color shadow)

Creates a beveled border of the specified type, using the specified 
highlighting and shadowing. The outer edge of the highlighted area uses a 
brighter shade of the highlight color. The inner edge of the shadow area uses a 
brighter shade of the shadow color. 


    type - an integer specifying either BevelBorder.LOWERED or BevelBorder.RAISED 
    highlight - a Color object for highlights 
    shadow - a Color object for shadows 

    Returns: the Border object 

*javax.swing.BorderFactory.createBevelBorder(int,Color,Color,Color,Color)*

public static |javax.swing.border.Border| createBevelBorder(
  int type,
  java.awt.Color highlightOuter,
  java.awt.Color highlightInner,
  java.awt.Color shadowOuter,
  java.awt.Color shadowInner)

Creates a beveled border of the specified type, using the specified colors for 
the inner and outer highlight and shadow areas. 


    type - an integer specifying either BevelBorder.LOWERED or BevelBorder.RAISED 
    highlightOuter - a Color object for the outer edge of the highlight area 
    highlightInner - a Color object for the inner edge of the highlight area 
    shadowOuter - a Color object for the outer edge of the shadow area 
    shadowInner - a Color object for the inner edge of the shadow area 

    Returns: the Border object 

*javax.swing.BorderFactory.createCompoundBorder()*

public static |javax.swing.border.CompoundBorder| createCompoundBorder()

Creates a compound border with a null inside edge and a null outside edge. 



    Returns: the CompoundBorder object 

*javax.swing.BorderFactory.createCompoundBorder(Border,Border)*

public static |javax.swing.border.CompoundBorder| createCompoundBorder(
  javax.swing.border.Border outsideBorder,
  javax.swing.border.Border insideBorder)

Creates a compound border specifying the border objects to use for the outside 
and inside edges. 


    outsideBorder - a Border object for the outer edge of the compound border 
    insideBorder - a Border object for the inner edge of the compound border 

    Returns: the CompoundBorder object 

*javax.swing.BorderFactory.createDashedBorder(Paint)*

public static |javax.swing.border.Border| createDashedBorder(java.awt.Paint paint)

Creates a dashed border of the specifiedpaint. If the specifiedpaintisnull, the 
component's foreground color will be used to render the border. The width of a 
dash line is equal to1. The relative length of a dash line and the relative 
spacing between dash lines are equal to1. A dash line is not rounded. 


    paint - the {@link Paint} object used to generate a color 

    Returns: the {@code Border} object 

*javax.swing.BorderFactory.createDashedBorder(Paint,float,float)*

public static |javax.swing.border.Border| createDashedBorder(
  java.awt.Paint paint,
  float length,
  float spacing)

Creates a dashed border of the specifiedpaint, relativelength, and 
relativespacing. If the specifiedpaintisnull, the component's foreground color 
will be used to render the border. The width of a dash line is equal to1. A 
dash line is not rounded. 


    paint - the {@link Paint} object used to generate a color 
    length - the relative length of a dash line 
    spacing - the relative spacing between dash lines 

    Returns: the {@code Border} object 

*javax.swing.BorderFactory.createDashedBorder(Paint,float,float,float,boolean)*

public static |javax.swing.border.Border| createDashedBorder(
  java.awt.Paint paint,
  float thickness,
  float length,
  float spacing,
  boolean rounded)

Creates a dashed border of the specifiedpaint,thickness, line shape, 
relativelength, and relativespacing. If the specifiedpaintisnull, the 
component's foreground color will be used to render the border. 


    paint - the {@link Paint} object used to generate a color 
    thickness - the width of a dash line 
    length - the relative length of a dash line 
    spacing - the relative spacing between dash lines 
    rounded - whether or not line ends should be round 

    Returns: the {@code Border} object 

*javax.swing.BorderFactory.createEmptyBorder()*

public static |javax.swing.border.Border| createEmptyBorder()

Creates an empty border that takes up no space. (The width of the top, bottom, 
left, and right sides are all zero.) 



    Returns: the Border object 

*javax.swing.BorderFactory.createEmptyBorder(int,int,int,int)*

public static |javax.swing.border.Border| createEmptyBorder(
  int top,
  int left,
  int bottom,
  int right)

Creates an empty border that takes up space but which does no drawing, 
specifying the width of the top, left, bottom, and right sides. 


    top - an integer specifying the width of the top, in pixels 
    left - an integer specifying the width of the left side, in pixels 
    bottom - an integer specifying the width of the bottom, in pixels 
    right - an integer specifying the width of the right side, in pixels 

    Returns: the Border object 

*javax.swing.BorderFactory.createEtchedBorder()*

public static |javax.swing.border.Border| createEtchedBorder()

Creates a border with an "etched" look using the component's current background 
color for highlighting and shading. 



    Returns: the Border object 

*javax.swing.BorderFactory.createEtchedBorder(Color,Color)*

public static |javax.swing.border.Border| createEtchedBorder(
  java.awt.Color highlight,
  java.awt.Color shadow)

Creates a border with an "etched" look using the specified highlighting and 
shading colors. 


    highlight - a Color object for the border highlights 
    shadow - a Color object for the border shadows 

    Returns: the Border object 

*javax.swing.BorderFactory.createEtchedBorder(int)*

public static |javax.swing.border.Border| createEtchedBorder(int type)

Creates a border with an "etched" look using the component's current background 
color for highlighting and shading. 


    type - one of EtchedBorder.RAISED, or EtchedBorder.LOWERED 

    Returns: the Border object 

*javax.swing.BorderFactory.createEtchedBorder(int,Color,Color)*

public static |javax.swing.border.Border| createEtchedBorder(
  int type,
  java.awt.Color highlight,
  java.awt.Color shadow)

Creates a border with an "etched" look using the specified highlighting and 
shading colors. 


    type - one of EtchedBorder.RAISED, or EtchedBorder.LOWERED 
    highlight - a Color object for the border highlights 
    shadow - a Color object for the border shadows 

    Returns: the Border object 

*javax.swing.BorderFactory.createLineBorder(Color)*

public static |javax.swing.border.Border| createLineBorder(java.awt.Color color)

Creates a line border withe the specified color. 


    color - a Color to use for the line 

    Returns: the Border object 

*javax.swing.BorderFactory.createLineBorder(Color,int)*

public static |javax.swing.border.Border| createLineBorder(
  java.awt.Color color,
  int thickness)

Creates a line border with the specified color and width. The width applies to 
all four sides of the border. To specify widths individually for the top, 
bottom, left, and right, use (|javax.swing.BorderFactory|) . 


    color - a Color to use for the line 
    thickness - an integer specifying the width in pixels 

    Returns: the Border object 

*javax.swing.BorderFactory.createLineBorder(Color,int,boolean)*

public static |javax.swing.border.Border| createLineBorder(
  java.awt.Color color,
  int thickness,
  boolean rounded)

Creates a line border with the specified color, thickness, and corner shape. 


    color - the color of the border 
    thickness - the thickness of the border 
    rounded - whether or not border corners should be round 

    Returns: the {@code Border} object 

*javax.swing.BorderFactory.createLoweredBevelBorder()*

public static |javax.swing.border.Border| createLoweredBevelBorder()

Creates a border with a lowered beveled edge, using brighter shades of the 
component's current background color for highlighting, and darker shading for 
shadows. (In a lowered border, shadows are on top and highlights are 
underneath.) 



    Returns: the Border object 

*javax.swing.BorderFactory.createLoweredSoftBevelBorder()*

public static |javax.swing.border.Border| createLoweredSoftBevelBorder()

Creates a beveled border with a lowered edge and softened corners, using 
brighter shades of the component's current background color for highlighting, 
and darker shading for shadows. In a lowered border, shadows are on top and 
highlights are underneath. 



    Returns: the {@code Border} object 

*javax.swing.BorderFactory.createMatteBorder(int,int,int,int,Color)*

public static |javax.swing.border.MatteBorder| createMatteBorder(
  int top,
  int left,
  int bottom,
  int right,
  java.awt.Color color)

Creates a matte-look border using a solid color. (The difference between this 
border and a line border is that you can specify the individual border 
dimensions.) 


    top - an integer specifying the width of the top, in pixels 
    left - an integer specifying the width of the left side, in pixels 
    bottom - an integer specifying the width of the right side, in pixels 
    right - an integer specifying the width of the bottom, in pixels 
    color - a Color to use for the border 

    Returns: the MatteBorder object 

*javax.swing.BorderFactory.createMatteBorder(int,int,int,int,Icon)*

public static |javax.swing.border.MatteBorder| createMatteBorder(
  int top,
  int left,
  int bottom,
  int right,
  javax.swing.Icon tileIcon)

Creates a matte-look border that consists of multiple tiles of a specified 
icon. Multiple copies of the icon are placed side-by-side to fill up the border 
area. 

Note: If the icon doesn't load, the border area is painted gray. 


    top - an integer specifying the width of the top, in pixels 
    left - an integer specifying the width of the left side, in pixels 
    bottom - an integer specifying the width of the right side, in pixels 
    right - an integer specifying the width of the bottom, in pixels 
    tileIcon - the Icon object used for the border tiles 

    Returns: the MatteBorder object 

*javax.swing.BorderFactory.createRaisedBevelBorder()*

public static |javax.swing.border.Border| createRaisedBevelBorder()

Creates a border with a raised beveled edge, using brighter shades of the 
component's current background color for highlighting, and darker shading for 
shadows. (In a raised border, highlights are on top and shadows are 
underneath.) 



    Returns: the Border object 

*javax.swing.BorderFactory.createRaisedSoftBevelBorder()*

public static |javax.swing.border.Border| createRaisedSoftBevelBorder()

Creates a beveled border with a raised edge and softened corners, using 
brighter shades of the component's current background color for highlighting, 
and darker shading for shadows. In a raised border, highlights are on top and 
shadows are underneath. 



    Returns: the {@code Border} object 

*javax.swing.BorderFactory.createSoftBevelBorder(int)*

public static |javax.swing.border.Border| createSoftBevelBorder(int type)

Creates a beveled border of the specified type with softened corners, using 
brighter shades of the component's current background color for highlighting, 
and darker shading for shadows. The type is either 
(|javax.swing.border.BevelBorder|) or (|javax.swing.border.BevelBorder|) . 


    type - a type of a bevel 

    Returns: the {@code Border} object or {@code null} if the specified type is not valid 

*javax.swing.BorderFactory.createSoftBevelBorder(int,Color,Color)*

public static |javax.swing.border.Border| createSoftBevelBorder(
  int type,
  java.awt.Color highlight,
  java.awt.Color shadow)

Creates a beveled border of the specified type with softened corners, using the 
specified highlighting and shadowing. The type is either 
(|javax.swing.border.BevelBorder|) or (|javax.swing.border.BevelBorder|) . The 
outer edge of the highlight area uses a brighter shade of thehighlightcolor. 
The inner edge of the shadow area uses a brighter shade of theshadowcolor. 


    type - a type of a bevel 
    highlight - a basic color of the highlight area 
    shadow - a basic color of the shadow area 

    Returns: the {@code Border} object 

*javax.swing.BorderFactory.createSoftBevelBorder(int,Color,Color,Color,Color)*

public static |javax.swing.border.Border| createSoftBevelBorder(
  int type,
  java.awt.Color highlightOuter,
  java.awt.Color highlightInner,
  java.awt.Color shadowOuter,
  java.awt.Color shadowInner)

Creates a beveled border of the specified type with softened corners, using the 
specified colors for the inner and outer edges of the highlight and the shadow 
areas. The type is either (|javax.swing.border.BevelBorder|) or 
(|javax.swing.border.BevelBorder|) . Note: The shadow inner and outer colors 
are switched for a lowered bevel border. 


    type - a type of a bevel 
    highlightOuter - a color of the outer edge of the highlight area 
    highlightInner - a color of the inner edge of the highlight area 
    shadowOuter - a color of the outer edge of the shadow area 
    shadowInner - a color of the inner edge of the shadow area 

    Returns: the {@code Border} object 

*javax.swing.BorderFactory.createStrokeBorder(BasicStroke)*

public static |javax.swing.border.Border| createStrokeBorder(java.awt.BasicStroke stroke)

Creates a border of the specifiedstroke. The component's foreground color will 
be used to render the border. 


    stroke - the {@link BasicStroke} object used to stroke a shape 

    Returns: the {@code Border} object 

*javax.swing.BorderFactory.createStrokeBorder(BasicStroke,Paint)*

public static |javax.swing.border.Border| createStrokeBorder(
  java.awt.BasicStroke stroke,
  java.awt.Paint paint)

Creates a border of the specifiedstrokeandpaint. If the specifiedpaintisnull, 
the component's foreground color will be used to render the border. 


    stroke - the {@link BasicStroke} object used to stroke a shape 
    paint - the {@link Paint} object used to generate a color 

    Returns: the {@code Border} object 

*javax.swing.BorderFactory.createTitledBorder(Border)*

public static |javax.swing.border.TitledBorder| createTitledBorder(javax.swing.border.Border border)

Creates a new titled border with an empty title, the specified border object, 
the default text position (determined by the current look and feel), the 
default justification (leading), and the default font and text color 
(determined by the current look and feel). 


    border - the Border object to add the title to; if null the Border is determined by the 
       current look and feel. 

    Returns: the TitledBorder object 

*javax.swing.BorderFactory.createTitledBorder(Border,String)*

public static |javax.swing.border.TitledBorder| createTitledBorder(
  javax.swing.border.Border border,
  java.lang.String title)

Adds a title to an existing border, with default positioning (determined by the 
current look and feel), default justification (leading) and the default font 
and text color (determined by the current look and feel). 


    border - the Border object to add the title to 
    title - a String containing the text of the title 

    Returns: the TitledBorder object 

*javax.swing.BorderFactory.createTitledBorder(Border,String,int,int)*

public static |javax.swing.border.TitledBorder| createTitledBorder(
  javax.swing.border.Border border,
  java.lang.String title,
  int titleJustification,
  int titlePosition)

Adds a title to an existing border, with the specified positioning and using 
the default font and text color (determined by the current look and feel). 


    border - the Border object to add the title to 
    title - a String containing the text of the title 
    titleJustification - an integer specifying the justification of the title -- one of the following: 

TitledBorder.LEFT TitledBorder.CENTER TitledBorder.RIGHT TitledBorder.LEADING 
       TitledBorder.TRAILING TitledBorder.DEFAULT_JUSTIFICATION (leading) 
    titlePosition - an integer specifying the vertical position of the text in relation to the 
       border -- one of the following: 

TitledBorder.ABOVE_TOP TitledBorder.TOP (sitting on the top line) 
       TitledBorder.BELOW_TOP TitledBorder.ABOVE_BOTTOM TitledBorder.BOTTOM 
       (sitting on the bottom line) TitledBorder.BELOW_BOTTOM 
       TitledBorder.DEFAULT_POSITION (the title position is determined by the 
       current look and feel) 

    Returns: the TitledBorder object 

*javax.swing.BorderFactory.createTitledBorder(Border,String,int,int,Font)*

public static |javax.swing.border.TitledBorder| createTitledBorder(
  javax.swing.border.Border border,
  java.lang.String title,
  int titleJustification,
  int titlePosition,
  java.awt.Font titleFont)

Adds a title to an existing border, with the specified positioning and font, 
and using the default text color (determined by the current look and feel). 


    border - the Border object to add the title to 
    title - a String containing the text of the title 
    titleJustification - an integer specifying the justification of the title -- one of the following: 

TitledBorder.LEFT TitledBorder.CENTER TitledBorder.RIGHT TitledBorder.LEADING 
       TitledBorder.TRAILING TitledBorder.DEFAULT_JUSTIFICATION (leading) 
    titlePosition - an integer specifying the vertical position of the text in relation to the 
       border -- one of the following: 

TitledBorder.ABOVE_TOP TitledBorder.TOP (sitting on the top line) 
       TitledBorder.BELOW_TOP TitledBorder.ABOVE_BOTTOM TitledBorder.BOTTOM 
       (sitting on the bottom line) TitledBorder.BELOW_BOTTOM 
       TitledBorder.DEFAULT_POSITION (the title position is determined by the 
       current look and feel) 
    titleFont - a Font object specifying the title font 

    Returns: the TitledBorder object 

*javax.swing.BorderFactory.createTitledBorder(Border,String,int,int,Font,Color)*

public static |javax.swing.border.TitledBorder| createTitledBorder(
  javax.swing.border.Border border,
  java.lang.String title,
  int titleJustification,
  int titlePosition,
  java.awt.Font titleFont,
  java.awt.Color titleColor)

Adds a title to an existing border, with the specified positioning, font and 
color. 


    border - the Border object to add the title to 
    title - a String containing the text of the title 
    titleJustification - an integer specifying the justification of the title -- one of the following: 

TitledBorder.LEFT TitledBorder.CENTER TitledBorder.RIGHT TitledBorder.LEADING 
       TitledBorder.TRAILING TitledBorder.DEFAULT_JUSTIFICATION (leading) 
    titlePosition - an integer specifying the vertical position of the text in relation to the 
       border -- one of the following: 

TitledBorder.ABOVE_TOP TitledBorder.TOP (sitting on the top line) 
       TitledBorder.BELOW_TOP TitledBorder.ABOVE_BOTTOM TitledBorder.BOTTOM 
       (sitting on the bottom line) TitledBorder.BELOW_BOTTOM 
       TitledBorder.DEFAULT_POSITION (the title position is determined by the 
       current look and feel) 
    titleFont - a Font object specifying the title font 
    titleColor - a Color object specifying the title color 

    Returns: the TitledBorder object 

*javax.swing.BorderFactory.createTitledBorder(String)*

public static |javax.swing.border.TitledBorder| createTitledBorder(java.lang.String title)

Creates a new titled border with the specified title, the default border type 
(determined by the current look and feel), the default text position 
(determined by the current look and feel), the default justification (leading), 
and the default font and text color (determined by the current look and feel). 


    title - a String containing the text of the title 

    Returns: the TitledBorder object 


