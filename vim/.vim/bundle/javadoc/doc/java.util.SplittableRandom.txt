*java.util.SplittableRandom* *SplittableRandom* A generator of uniform pseudoran

public final class SplittableRandom
  extends    |java.lang.Object|

|java.util.SplittableRandom_Description|
|java.util.SplittableRandom_Fields|
|java.util.SplittableRandom_Constructors|
|java.util.SplittableRandom_Methods|

================================================================================

*java.util.SplittableRandom_Constructors*
|java.util.SplittableRandom()|Creates a new SplittableRandom instance that is l
|java.util.SplittableRandom(long)|Creates a new SplittableRandom instance using

*java.util.SplittableRandom_Methods*
|java.util.SplittableRandom.doubles()|Returns an effectively unlimited stream o
|java.util.SplittableRandom.doubles(double,double)|Returns an effectively unlim
|java.util.SplittableRandom.doubles(long)|Returns a stream producing the givens
|java.util.SplittableRandom.doubles(long,double,double)|Returns a stream produc
|java.util.SplittableRandom.ints()|Returns an effectively unlimited stream of p
|java.util.SplittableRandom.ints(int,int)|Returns an effectively unlimited stre
|java.util.SplittableRandom.ints(long)|Returns a stream producing the givenstre
|java.util.SplittableRandom.ints(long,int,int)|Returns a stream producing the g
|java.util.SplittableRandom.longs()|Returns an effectively unlimited stream of 
|java.util.SplittableRandom.longs(long)|Returns a stream producing the givenstr
|java.util.SplittableRandom.longs(long,long)|Returns an effectively unlimited s
|java.util.SplittableRandom.longs(long,long,long)|Returns a stream producing th
|java.util.SplittableRandom.nextBoolean()|Returns a pseudorandombooleanvalue.
|java.util.SplittableRandom.nextDouble()|Returns a pseudorandomdoublevalue betw
|java.util.SplittableRandom.nextDouble(double)|Returns a pseudorandomdoublevalu
|java.util.SplittableRandom.nextDouble(double,double)|Returns a pseudorandomdou
|java.util.SplittableRandom.nextInt()|Returns a pseudorandomintvalue.
|java.util.SplittableRandom.nextInt(int)|Returns a pseudorandomintvalue between
|java.util.SplittableRandom.nextInt(int,int)|Returns a pseudorandomintvalue bet
|java.util.SplittableRandom.nextLong()|Returns a pseudorandomlongvalue.
|java.util.SplittableRandom.nextLong(long)|Returns a pseudorandomlongvalue betw
|java.util.SplittableRandom.nextLong(long,long)|Returns a pseudorandomlongvalue
|java.util.SplittableRandom.split()|Constructs and returns a new SplittableRand

*java.util.SplittableRandom_Description*

A generator of uniform pseudorandom values applicable for use in (among other 
contexts) isolated parallel computations that may generate subtasks. 
ClassSplittableRandomsupports methods for producing pseudorandom numbers of 
typeint,long, anddoublewith similar usages as for class (|java.util.Random|) 
but differs in the following ways: 



Series of generated values pass the DieHarder suite testing independence and 
uniformity properties of random number generators. (Most recently validated 
with version 3.31.1.) These tests validate only the methods for certain types 
and ranges, but similar properties are expected to hold, at least 
approximately, for others as well. The period (length of any series of 
generated values before it repeats) is at least 264. 

Method (|java.util.SplittableRandom|) constructs and returns a new 
SplittableRandom instance that shares no mutable state with the current 
instance. However, with very high probability, the values collectively 
generated by the two objects have the same statistical properties as if the 
same quantity of values were generated by a single thread using a 
singleSplittableRandomobject. 

Instances of SplittableRandom are not thread-safe. They are designed to be 
split, not shared, across threads. For example, a 
fork/join-style(|java.util.concurrent.ForkJoinTask|) computation using random 
numbers might include a construction of the formnew 
Subtask(aSplittableRandom.split()).fork(). 

This class provides additional methods for generating random streams, that 
employ the above techniques when used instream.parallel()mode. 



Instances ofSplittableRandomare not cryptographically secure. Consider instead 
using (|java.security.SecureRandom|) in security-sensitive applications. 
Additionally, default-constructed instances do not use a cryptographically 
random seed unless the system property(|java.lang.System|) 
java.util.secureRandomSeedis set totrue. 



*java.util.SplittableRandom()*

public SplittableRandom()

Creates a new SplittableRandom instance that is likely to generate sequences of 
values that are statistically independent of those of any other instances in 
the current program; and may, and typically does, vary across program 
invocations. 


*java.util.SplittableRandom(long)*

public SplittableRandom(long seed)

Creates a new SplittableRandom instance using the specified initial seed. 
SplittableRandom instances created with the same seed in the same program 
generate identical sequences of values. 

    seed - the initial seed 

*java.util.SplittableRandom.doubles()*

public |java.util.stream.DoubleStream| doubles()

Returns an effectively unlimited stream of pseudorandomdoublevalues from this 
generator and/or one split from it; each value is between zero (inclusive) and 
one (exclusive). 



    Returns: a stream of pseudorandom {@code double} values 

*java.util.SplittableRandom.doubles(double,double)*

public |java.util.stream.DoubleStream| doubles(
  double randomNumberOrigin,
  double randomNumberBound)

Returns an effectively unlimited stream of pseudorandomdoublevalues from this 
generator and/or one split from it; each value conforms to the given origin 
(inclusive) and bound (exclusive). 


    randomNumberOrigin - the origin (inclusive) of each random value 
    randomNumberBound - the bound (exclusive) of each random value 

    Returns: a stream of pseudorandom {@code double} values, each with the given origin 
             (inclusive) and bound (exclusive) 

*java.util.SplittableRandom.doubles(long)*

public |java.util.stream.DoubleStream| doubles(long streamSize)

Returns a stream producing the givenstreamSizenumber of 
pseudorandomdoublevalues from this generator and/or one split from it; each 
value is between zero (inclusive) and one (exclusive). 


    streamSize - the number of values to generate 

    Returns: a stream of {@code double} values 

*java.util.SplittableRandom.doubles(long,double,double)*

public |java.util.stream.DoubleStream| doubles(
  long streamSize,
  double randomNumberOrigin,
  double randomNumberBound)

Returns a stream producing the givenstreamSizenumber of 
pseudorandomdoublevalues from this generator and/or one split from it; each 
value conforms to the given origin (inclusive) and bound (exclusive). 


    streamSize - the number of values to generate 
    randomNumberOrigin - the origin (inclusive) of each random value 
    randomNumberBound - the bound (exclusive) of each random value 

    Returns: a stream of pseudorandom {@code double} values, each with the given origin 
             (inclusive) and bound (exclusive) 

*java.util.SplittableRandom.ints()*

public |java.util.stream.IntStream| ints()

Returns an effectively unlimited stream of pseudorandomintvalues from this 
generator and/or one split from it. 



    Returns: a stream of pseudorandom {@code int} values 

*java.util.SplittableRandom.ints(int,int)*

public |java.util.stream.IntStream| ints(
  int randomNumberOrigin,
  int randomNumberBound)

Returns an effectively unlimited stream of pseudorandomintvalues from this 
generator and/or one split from it; each value conforms to the given origin 
(inclusive) and bound (exclusive). 


    randomNumberOrigin - the origin (inclusive) of each random value 
    randomNumberBound - the bound (exclusive) of each random value 

    Returns: a stream of pseudorandom {@code int} values, each with the given origin 
             (inclusive) and bound (exclusive) 

*java.util.SplittableRandom.ints(long)*

public |java.util.stream.IntStream| ints(long streamSize)

Returns a stream producing the givenstreamSizenumber of pseudorandomintvalues 
from this generator and/or one split from it. 


    streamSize - the number of values to generate 

    Returns: a stream of pseudorandom {@code int} values 

*java.util.SplittableRandom.ints(long,int,int)*

public |java.util.stream.IntStream| ints(
  long streamSize,
  int randomNumberOrigin,
  int randomNumberBound)

Returns a stream producing the givenstreamSizenumber of pseudorandomintvalues 
from this generator and/or one split from it; each value conforms to the given 
origin (inclusive) and bound (exclusive). 


    streamSize - the number of values to generate 
    randomNumberOrigin - the origin (inclusive) of each random value 
    randomNumberBound - the bound (exclusive) of each random value 

    Returns: a stream of pseudorandom {@code int} values, each with the given origin 
             (inclusive) and bound (exclusive) 

*java.util.SplittableRandom.longs()*

public |java.util.stream.LongStream| longs()

Returns an effectively unlimited stream of pseudorandomlongvalues from this 
generator and/or one split from it. 



    Returns: a stream of pseudorandom {@code long} values 

*java.util.SplittableRandom.longs(long)*

public |java.util.stream.LongStream| longs(long streamSize)

Returns a stream producing the givenstreamSizenumber of pseudorandomlongvalues 
from this generator and/or one split from it. 


    streamSize - the number of values to generate 

    Returns: a stream of pseudorandom {@code long} values 

*java.util.SplittableRandom.longs(long,long)*

public |java.util.stream.LongStream| longs(
  long randomNumberOrigin,
  long randomNumberBound)

Returns an effectively unlimited stream of pseudorandomlongvalues from this 
generator and/or one split from it; each value conforms to the given origin 
(inclusive) and bound (exclusive). 


    randomNumberOrigin - the origin (inclusive) of each random value 
    randomNumberBound - the bound (exclusive) of each random value 

    Returns: a stream of pseudorandom {@code long} values, each with the given origin 
             (inclusive) and bound (exclusive) 

*java.util.SplittableRandom.longs(long,long,long)*

public |java.util.stream.LongStream| longs(
  long streamSize,
  long randomNumberOrigin,
  long randomNumberBound)

Returns a stream producing the givenstreamSizenumber of pseudorandomlongvalues 
from this generator and/or one split from it; each value conforms to the given 
origin (inclusive) and bound (exclusive). 


    streamSize - the number of values to generate 
    randomNumberOrigin - the origin (inclusive) of each random value 
    randomNumberBound - the bound (exclusive) of each random value 

    Returns: a stream of pseudorandom {@code long} values, each with the given origin 
             (inclusive) and bound (exclusive) 

*java.util.SplittableRandom.nextBoolean()*

public boolean nextBoolean()

Returns a pseudorandombooleanvalue. 



    Returns: a pseudorandom {@code boolean} value 

*java.util.SplittableRandom.nextDouble()*

public double nextDouble()

Returns a pseudorandomdoublevalue between zero (inclusive) and one (exclusive). 



    Returns: a pseudorandom {@code double} value between zero (inclusive) and one 
             (exclusive) 

*java.util.SplittableRandom.nextDouble(double)*

public double nextDouble(double bound)

Returns a pseudorandomdoublevalue between 0.0 (inclusive) and the specified 
bound (exclusive). 


    bound - the upper bound (exclusive). Must be positive. 

    Returns: a pseudorandom {@code double} value between zero (inclusive) and the bound 
             (exclusive) 

*java.util.SplittableRandom.nextDouble(double,double)*

public double nextDouble(
  double origin,
  double bound)

Returns a pseudorandomdoublevalue between the specified origin (inclusive) and 
bound (exclusive). 


    origin - the least value returned 
    bound - the upper bound (exclusive) 

    Returns: a pseudorandom {@code double} value between the origin (inclusive) and the 
             bound (exclusive) 

*java.util.SplittableRandom.nextInt()*

public int nextInt()

Returns a pseudorandomintvalue. 



    Returns: a pseudorandom {@code int} value 

*java.util.SplittableRandom.nextInt(int)*

public int nextInt(int bound)

Returns a pseudorandomintvalue between zero (inclusive) and the specified bound 
(exclusive). 


    bound - the upper bound (exclusive). Must be positive. 

    Returns: a pseudorandom {@code int} value between zero (inclusive) and the bound 
             (exclusive) 

*java.util.SplittableRandom.nextInt(int,int)*

public int nextInt(
  int origin,
  int bound)

Returns a pseudorandomintvalue between the specified origin (inclusive) and the 
specified bound (exclusive). 


    origin - the least value returned 
    bound - the upper bound (exclusive) 

    Returns: a pseudorandom {@code int} value between the origin (inclusive) and the bound 
             (exclusive) 

*java.util.SplittableRandom.nextLong()*

public long nextLong()

Returns a pseudorandomlongvalue. 



    Returns: a pseudorandom {@code long} value 

*java.util.SplittableRandom.nextLong(long)*

public long nextLong(long bound)

Returns a pseudorandomlongvalue between zero (inclusive) and the specified 
bound (exclusive). 


    bound - the upper bound (exclusive). Must be positive. 

    Returns: a pseudorandom {@code long} value between zero (inclusive) and the bound 
             (exclusive) 

*java.util.SplittableRandom.nextLong(long,long)*

public long nextLong(
  long origin,
  long bound)

Returns a pseudorandomlongvalue between the specified origin (inclusive) and 
the specified bound (exclusive). 


    origin - the least value returned 
    bound - the upper bound (exclusive) 

    Returns: a pseudorandom {@code long} value between the origin (inclusive) and the bound 
             (exclusive) 

*java.util.SplittableRandom.split()*

public |java.util.SplittableRandom| split()

Constructs and returns a new SplittableRandom instance that shares no mutable 
state with this instance. However, with very high probability, the set of 
values collectively generated by the two objects has the same statistical 
properties as if the same quantity of values were generated by a single thread 
using a single SplittableRandom object. Either or both of the two objects may 
be further split using thesplit()method, and the same expected statistical 
properties apply to the entire set of generators constructed by such recursive 
splitting. 



    Returns: the new SplittableRandom instance 


