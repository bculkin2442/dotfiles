*java.time.ZoneOffset* *ZoneOffset* A time-zone offset from Greenwich/UTC, such 

public final class ZoneOffset
  extends    |java.time.ZoneId|
  implements |java.time.temporal.TemporalAccessor|
             |java.time.temporal.TemporalAdjuster|
             |java.lang.Comparable|
             |java.io.Serializable|

|java.time.ZoneOffset_Description|
|java.time.ZoneOffset_Fields|
|java.time.ZoneOffset_Constructors|
|java.time.ZoneOffset_Methods|

================================================================================

*java.time.ZoneOffset_Fields*
|java.time.ZoneOffset_java.time.ZoneOffset.MAX|
|java.time.ZoneOffset_java.time.ZoneOffset.MIN|
|java.time.ZoneOffset_java.time.ZoneOffset.UTC|

*java.time.ZoneOffset_Methods*
|java.time.ZoneOffset.adjustInto(Temporal)|Adjusts the specified temporal objec
|java.time.ZoneOffset.compareTo(ZoneOffset)|Compares this offset to another off
|java.time.ZoneOffset.equals(Object)|Checks if this offset is equal to another 
|java.time.ZoneOffset.from(TemporalAccessor)|Obtains an instance ofZoneOffsetfr
|java.time.ZoneOffset.get(TemporalField)|Gets the value of the specified field 
|java.time.ZoneOffset.getId()|Gets the normalized zone offset ID.
|java.time.ZoneOffset.getLong(TemporalField)|Gets the value of the specified fi
|java.time.ZoneOffset.getRules()|Gets the associated time-zone rules.
|java.time.ZoneOffset.getTotalSeconds()|Gets the total zone offset in seconds.
|java.time.ZoneOffset.hashCode()|A hash code for this offset.
|java.time.ZoneOffset.isSupported(TemporalField)|Checks if the specified field 
|java.time.ZoneOffset.of(String)|Obtains an instance ofZoneOffsetusing the ID.
|java.time.ZoneOffset.ofHours(int)|Obtains an instance ofZoneOffsetusing an off
|java.time.ZoneOffset.ofHoursMinutes(int,int)|Obtains an instance ofZoneOffsetu
|java.time.ZoneOffset.ofHoursMinutesSeconds(int,int,int)|Obtains an instance of
|java.time.ZoneOffset.ofTotalSeconds(int)|Obtains an instance ofZoneOffsetspeci
|java.time.ZoneOffset.query(TemporalQuery<R>)|Queries this offset using the spe
|java.time.ZoneOffset.range(TemporalField)|Gets the range of valid values for t
|java.time.ZoneOffset.toString()|Outputs this offset as aString, using the norm

*java.time.ZoneOffset_Description*

A time-zone offset from Greenwich/UTC, such as+02:00. 

A time-zone offset is the period of time that a time-zone differs from 
Greenwich/UTC. This is usually a fixed number of hours and minutes. 

Different parts of the world have different time-zone offsets. The rules for 
how offsets vary by place and time of year are captured in the 
(|java.time.ZoneId|) class. 

For example, Paris is one hour ahead of Greenwich/UTC in winter and two hours 
ahead in summer. TheZoneIdinstance for Paris will reference 
twoZoneOffsetinstances - a+01:00instance for winter, and a+02:00instance for 
summer. 

In 2008, time-zone offsets around the world extended from -12:00 to +14:00. To 
prevent any problems with that range being extended, yet still provide 
validation, the range of offsets is restricted to -18:00 to 18:00 inclusive. 

This class is designed for use with the ISO calendar system. The fields of 
hours, minutes and seconds make assumptions that are valid for the standard ISO 
definitions of those fields. This class may be used with other calendar systems 
providing the definition of the time fields matches those of the ISO calendar 
system. 

Instances ofZoneOffsetmust be compared using (|java.time.ZoneOffset|) . 
Implementations may choose to cache certain common offsets, however 
applications must not rely on such caching. 

This is a <a href="/java/lang/doc-files/ValueBased.html">value-based class; use 
of identity-sensitive operations (including reference equality (==), identity 
hash code, or synchronization) on instances ofZoneOffsetmay have unpredictable 
results and should be avoided. Theequalsmethod should be used for comparisons. 



*java.time.ZoneOffset_java.time.ZoneOffset.MAX*

Constant for the maximum supported offset. 


*java.time.ZoneOffset_java.time.ZoneOffset.MIN*

Constant for the maximum supported offset. 


*java.time.ZoneOffset_java.time.ZoneOffset.UTC*

The time-zone offset for UTC, with an ID of 'Z'. 



*java.time.ZoneOffset.adjustInto(Temporal)*

public |java.time.temporal.Temporal| adjustInto(java.time.temporal.Temporal temporal)

Adjusts the specified temporal object to have the same offset as this object. 

This returns a temporal object of the same observable type as the input with 
the offset changed to be the same as this. 

The adjustment is equivalent to using (|java.time.temporal.Temporal|) passing 
(|java.time.temporal.ChronoField|) as the field. 

In most cases, it is clearer to reverse the calling pattern by using 
(|java.time.temporal.Temporal|) : 

// these two lines are equivalent, but the second approach is recommended 
temporal = thisOffset.adjustInto(temporal); temporal = 
temporal.with(thisOffset); 

This instance is immutable and unaffected by this method call. 


    temporal - the target object to be adjusted, not null 

    Returns: the adjusted object, not null 

*java.time.ZoneOffset.compareTo(ZoneOffset)*

public int compareTo(java.time.ZoneOffset other)

Compares this offset to another offset in descending order. 

The offsets are compared in the order that they occur for the same time of day 
around the world. Thus, an offset of+10:00comes before an offset of+09:00and so 
on down to-18:00. 

The comparison is "consistent with equals", as defined by 
(|java.lang.Comparable|) . 


    other - the other date to compare to, not null 

    Returns: the comparator value, negative if less, postive if greater 

*java.time.ZoneOffset.equals(Object)*

public boolean equals(java.lang.Object obj)

Checks if this offset is equal to another offset. 

The comparison is based on the amount of the offset in seconds. This is 
equivalent to a comparison by ID. 


    obj - the object to check, null returns false 

    Returns: true if this is equal to the other offset 

*java.time.ZoneOffset.from(TemporalAccessor)*

public static |java.time.ZoneOffset| from(java.time.temporal.TemporalAccessor temporal)

Obtains an instance ofZoneOffsetfrom a temporal object. 

This obtains an offset based on the specified temporal. 
ATemporalAccessorrepresents an arbitrary set of date and time information, 
which this factory converts to an instance ofZoneOffset. 

ATemporalAccessorrepresents some form of date and time information. This 
factory converts the arbitrary temporal object to an instance ofZoneOffset. 

The conversion uses the (|java.time.temporal.TemporalQueries|) query, which 
relies on extracting the OFFSET_SECONDS(|java.time.temporal.ChronoField|) 
field. 

This method matches the signature of the functional interface 
(|java.time.temporal.TemporalQuery|) allowing it to be used in queries via 
method reference,ZoneOffset::from. 


    temporal - the temporal object to convert, not null 

    Returns: the zone-offset, not null 

*java.time.ZoneOffset.get(TemporalField)*

public int get(java.time.temporal.TemporalField field)

Gets the value of the specified field from this offset as anint. 

This queries this offset for the value for the specified field. The returned 
value will always be within the valid range of values for the field. If it is 
not possible to return the value, because the field is not supported or for 
some other reason, an exception is thrown. 

If the field is a (|java.time.temporal.ChronoField|) then the query is 
implemented here. TheOFFSET_SECONDSfield returns the value of the offset. All 
otherChronoFieldinstances will throw anUnsupportedTemporalTypeException. 

If the field is not aChronoField, then the result of this method is obtained by 
invokingTemporalField.getFrom(TemporalAccessor)passingthisas the argument. 
Whether the value can be obtained, and what the value represents, is determined 
by the field. 


    field - the field to get, not null 

    Returns: the value for the field 

*java.time.ZoneOffset.getId()*

public |java.lang.String| getId()

Gets the normalized zone offset ID. 

The ID is minor variation to the standard ISO-8601 formatted string for the 
offset. There are three formats: 

Z- for UTC (ISO-8601) +hh:mmor-hh:mm- if the seconds are zero (ISO-8601) 
+hh:mm:ssor-hh:mm:ss- if the seconds are non-zero (not ISO-8601) 



    Returns: the zone offset ID, not null 

*java.time.ZoneOffset.getLong(TemporalField)*

public long getLong(java.time.temporal.TemporalField field)

Gets the value of the specified field from this offset as along. 

This queries this offset for the value for the specified field. If it is not 
possible to return the value, because the field is not supported or for some 
other reason, an exception is thrown. 

If the field is a (|java.time.temporal.ChronoField|) then the query is 
implemented here. TheOFFSET_SECONDSfield returns the value of the offset. All 
otherChronoFieldinstances will throw anUnsupportedTemporalTypeException. 

If the field is not aChronoField, then the result of this method is obtained by 
invokingTemporalField.getFrom(TemporalAccessor)passingthisas the argument. 
Whether the value can be obtained, and what the value represents, is determined 
by the field. 


    field - the field to get, not null 

    Returns: the value for the field 

*java.time.ZoneOffset.getRules()*

public |java.time.zone.ZoneRules| getRules()

Gets the associated time-zone rules. 

The rules will always return this offset when queried. The implementation class 
is immutable, thread-safe and serializable. 



    Returns: the rules, not null 

*java.time.ZoneOffset.getTotalSeconds()*

public int getTotalSeconds()

Gets the total zone offset in seconds. 

This is the primary way to access the offset amount. It returns the total of 
the hours, minutes and seconds fields as a single offset that can be added to a 
time. 



    Returns: the total zone offset amount in seconds 

*java.time.ZoneOffset.hashCode()*

public int hashCode()

A hash code for this offset. 



    Returns: a suitable hash code 

*java.time.ZoneOffset.isSupported(TemporalField)*

public boolean isSupported(java.time.temporal.TemporalField field)

Checks if the specified field is supported. 

This checks if this offset can be queried for the specified field. If false, 
then calling the range(|java.time.ZoneOffset|) and get(|java.time.ZoneOffset|) 
methods will throw an exception. 

If the field is a (|java.time.temporal.ChronoField|) then the query is 
implemented here. TheOFFSET_SECONDSfield returns true. All 
otherChronoFieldinstances will return false. 

If the field is not aChronoField, then the result of this method is obtained by 
invokingTemporalField.isSupportedBy(TemporalAccessor)passingthisas the 
argument. Whether the field is supported is determined by the field. 


    field - the field to check, null returns false 

    Returns: true if the field is supported on this offset, false if not 

*java.time.ZoneOffset.of(String)*

public static |java.time.ZoneOffset| of(java.lang.String offsetId)

Obtains an instance ofZoneOffsetusing the ID. 

This method parses the string ID of aZoneOffsetto return an instance. The 
parsing accepts all the formats generated by (|java.time.ZoneOffset|) , plus 
some additional formats: 

Z- for UTC +h+hh+hh:mm-hh:mm+hhmm-hhmm+hh:mm:ss-hh:mm:ss+hhmmss-hhmmss Note 
that means either the plus or minus symbol. 

The ID of the returned offset will be normalized to one of the formats 
described by (|java.time.ZoneOffset|) . 

The maximum supported range is from +18:00 to -18:00 inclusive. 


    offsetId - the offset ID, not null 

    Returns: the zone-offset, not null 

*java.time.ZoneOffset.ofHours(int)*

public static |java.time.ZoneOffset| ofHours(int hours)

Obtains an instance ofZoneOffsetusing an offset in hours. 


    hours - the time-zone offset in hours, from -18 to +18 

    Returns: the zone-offset, not null 

*java.time.ZoneOffset.ofHoursMinutes(int,int)*

public static |java.time.ZoneOffset| ofHoursMinutes(
  int hours,
  int minutes)

Obtains an instance ofZoneOffsetusing an offset in hours and minutes. 

The sign of the hours and minutes components must match. Thus, if the hours is 
negative, the minutes must be negative or zero. If the hours is zero, the 
minutes may be positive, negative or zero. 


    hours - the time-zone offset in hours, from -18 to +18 
    minutes - the time-zone offset in minutes, from 0 to 59, sign matches hours 

    Returns: the zone-offset, not null 

*java.time.ZoneOffset.ofHoursMinutesSeconds(int,int,int)*

public static |java.time.ZoneOffset| ofHoursMinutesSeconds(
  int hours,
  int minutes,
  int seconds)

Obtains an instance ofZoneOffsetusing an offset in hours, minutes and seconds. 

The sign of the hours, minutes and seconds components must match. Thus, if the 
hours is negative, the minutes and seconds must be negative or zero. 


    hours - the time-zone offset in hours, from -18 to +18 
    minutes - the time-zone offset in minutes, from 0 to 59, sign matches hours and seconds 
    seconds - the time-zone offset in seconds, from 0 to 59, sign matches hours and minutes 

    Returns: the zone-offset, not null 

*java.time.ZoneOffset.ofTotalSeconds(int)*

public static |java.time.ZoneOffset| ofTotalSeconds(int totalSeconds)

Obtains an instance ofZoneOffsetspecifying the total offset in seconds 

The offset must be in the range-18:00to+18:00, which corresponds to -64800 to 
+64800. 


    totalSeconds - the total time-zone offset in seconds, from -64800 to +64800 

    Returns: the ZoneOffset, not null 

*java.time.ZoneOffset.query(TemporalQuery<R>)*

public |R| query(java.time.temporal.TemporalQuery<R> query)

Queries this offset using the specified query. 

This queries this offset using the specified query strategy object. 
TheTemporalQueryobject defines the logic to be used to obtain the result. Read 
the documentation of the query to understand what the result of this method 
will be. 

The result of this method is obtained by invoking the 
(|java.time.temporal.TemporalQuery|) method on the specified query 
passingthisas the argument. 


    query - the query to invoke, not null 

    Returns: the query result, null may be returned (defined by the query) 

*java.time.ZoneOffset.range(TemporalField)*

public |java.time.temporal.ValueRange| range(java.time.temporal.TemporalField field)

Gets the range of valid values for the specified field. 

The range object expresses the minimum and maximum valid values for a field. 
This offset is used to enhance the accuracy of the returned range. If it is not 
possible to return the range, because the field is not supported or for some 
other reason, an exception is thrown. 

If the field is a (|java.time.temporal.ChronoField|) then the query is 
implemented here. The supported fields(|java.time.ZoneOffset|) will return 
appropriate range instances. All otherChronoFieldinstances will throw 
anUnsupportedTemporalTypeException. 

If the field is not aChronoField, then the result of this method is obtained by 
invokingTemporalField.rangeRefinedBy(TemporalAccessor)passingthisas the 
argument. Whether the range can be obtained is determined by the field. 


    field - the field to query the range for, not null 

    Returns: the range of valid values for the field, not null 

*java.time.ZoneOffset.toString()*

public |java.lang.String| toString()

Outputs this offset as aString, using the normalized ID. 



    Returns: a string representation of this offset, not null 


