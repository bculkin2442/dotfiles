*java.util.concurrent.ConcurrentSkipListSet* *ConcurrentSkipListSet* A scalable 

public class ConcurrentSkipListSet<E>
  extends    |java.util.AbstractSet|
  implements |java.util.NavigableSet|
             |java.lang.Cloneable|
             |java.io.Serializable|

|java.util.concurrent.ConcurrentSkipListSet_Description|
|java.util.concurrent.ConcurrentSkipListSet_Fields|
|java.util.concurrent.ConcurrentSkipListSet_Constructors|
|java.util.concurrent.ConcurrentSkipListSet_Methods|

================================================================================

*java.util.concurrent.ConcurrentSkipListSet_Constructors*
|java.util.concurrent.ConcurrentSkipListSet()|Constructs a new, empty set that 
|java.util.concurrent.ConcurrentSkipListSet(Collection<?extendsE>)|Constructs a
|java.util.concurrent.ConcurrentSkipListSet(Comparator<?superE>)|Constructs a n
|java.util.concurrent.ConcurrentSkipListSet(SortedSet<E>)|Constructs a new set 

*java.util.concurrent.ConcurrentSkipListSet_Methods*
|java.util.concurrent.ConcurrentSkipListSet.add(E)|Adds the specified element t
|java.util.concurrent.ConcurrentSkipListSet.ceiling(E)|
|java.util.concurrent.ConcurrentSkipListSet.clear()|Removes all of the elements
|java.util.concurrent.ConcurrentSkipListSet.clone()|Returns a shallow copy of t
|java.util.concurrent.ConcurrentSkipListSet.comparator()|
|java.util.concurrent.ConcurrentSkipListSet.contains(Object)|Returnstrueif this
|java.util.concurrent.ConcurrentSkipListSet.descendingIterator()|Returns an ite
|java.util.concurrent.ConcurrentSkipListSet.descendingSet()|Returns a reverse o
|java.util.concurrent.ConcurrentSkipListSet.equals(Object)|Compares the specifi
|java.util.concurrent.ConcurrentSkipListSet.first()|
|java.util.concurrent.ConcurrentSkipListSet.floor(E)|
|java.util.concurrent.ConcurrentSkipListSet.headSet(E)|
|java.util.concurrent.ConcurrentSkipListSet.headSet(E,boolean)|
|java.util.concurrent.ConcurrentSkipListSet.higher(E)|
|java.util.concurrent.ConcurrentSkipListSet.isEmpty()|Returnstrueif this set co
|java.util.concurrent.ConcurrentSkipListSet.iterator()|Returns an iterator over
|java.util.concurrent.ConcurrentSkipListSet.last()|
|java.util.concurrent.ConcurrentSkipListSet.lower(E)|
|java.util.concurrent.ConcurrentSkipListSet.pollFirst()|
|java.util.concurrent.ConcurrentSkipListSet.pollLast()|
|java.util.concurrent.ConcurrentSkipListSet.remove(Object)|Removes the specifie
|java.util.concurrent.ConcurrentSkipListSet.removeAll(Collection<?>)|Removes fr
|java.util.concurrent.ConcurrentSkipListSet.size()|Returns the number of elemen
|java.util.concurrent.ConcurrentSkipListSet.spliterator()|Returns aSpliteratoro
|java.util.concurrent.ConcurrentSkipListSet.subSet(E,boolean,E,boolean)|
|java.util.concurrent.ConcurrentSkipListSet.subSet(E,E)|
|java.util.concurrent.ConcurrentSkipListSet.tailSet(E)|
|java.util.concurrent.ConcurrentSkipListSet.tailSet(E,boolean)|

*java.util.concurrent.ConcurrentSkipListSet_Description*

A scalable concurrent (|java.util.NavigableSet|) implementation based on a 
(|java.util.concurrent.ConcurrentSkipListMap|) . The elements of the set are 
kept sorted according to their natural ordering(|java.lang.Comparable|) , or by 
a (|java.util.Comparator|) provided at set creation time, depending on which 
constructor is used. 

This implementation provides expected average log(n) time cost for 
thecontains,add, andremoveoperations and their variants. Insertion, removal, 
and access operations safely execute concurrently by multiple threads. 

Iterators and spliterators are weakly consistent. 

Ascending ordered views and their iterators are faster than descending ones. 

Beware that, unlike in most collections, thesizemethod is not a constant-time 
operation. Because of the asynchronous nature of these sets, determining the 
current number of elements requires a traversal of the elements, and so may 
report inaccurate results if this collection is modified during traversal. 
Additionally, the bulk operationsaddAll,removeAll,retainAll,containsAll,equals, 
andtoArrayare not guaranteed to be performed atomically. For example, an 
iterator operating concurrently with anaddAlloperation might view only some of 
the added elements. 

This class and its iterators implement all of the optional methods of the 
(|java.util.Set|) and (|java.util.Iterator|) interfaces. Like most other 
concurrent collection implementations, this class does not permit the use 
ofnullelements, becausenullarguments and return values cannot be reliably 
distinguished from the absence of elements. 

This class is a member of the <a 
href="/../technotes/guides/collections/index.html"> Java Collections Framework. 



*java.util.concurrent.ConcurrentSkipListSet()*

public ConcurrentSkipListSet()

Constructs a new, empty set that orders its elements according to their natural 
ordering(|java.lang.Comparable|) . 


*java.util.concurrent.ConcurrentSkipListSet(Collection<?extendsE>)*

public ConcurrentSkipListSet(java.util.Collection<? extends E> c)

Constructs a new set containing the elements in the specified collection, that 
orders its elements according to their natural ordering(|java.lang.Comparable|) 
. 

    c - The elements that will comprise the new set 

*java.util.concurrent.ConcurrentSkipListSet(Comparator<?superE>)*

public ConcurrentSkipListSet(java.util.Comparator<? super E> comparator)

Constructs a new, empty set that orders its elements according to the specified 
comparator. 

    comparator - the comparator that will be used to order this set. If {@code null}, the 
       {@linkplain Comparable natural ordering} of the elements will be used. 

*java.util.concurrent.ConcurrentSkipListSet(SortedSet<E>)*

public ConcurrentSkipListSet(java.util.SortedSet<E> s)

Constructs a new set containing the same elements and using the same ordering 
as the specified sorted set. 

    s - sorted set whose elements will comprise the new set 

*java.util.concurrent.ConcurrentSkipListSet.add(E)*

public boolean add(E e)

Adds the specified element to this set if it is not already present. More 
formally, adds the specified elementeto this set if the set contains no 
elemente2such thate.equals(e2). If this set already contains the element, the 
call leaves the set unchanged and returnsfalse. 


    e - element to be added to this set 

    Returns: {@code true} if this set did not already contain the specified element 

*java.util.concurrent.ConcurrentSkipListSet.ceiling(E)*

public |E| ceiling(E e)





*java.util.concurrent.ConcurrentSkipListSet.clear()*

public void clear()

Removes all of the elements from this set. 



*java.util.concurrent.ConcurrentSkipListSet.clone()*

public |java.util.concurrent.ConcurrentSkipListSet|<E> clone()

Returns a shallow copy of thisConcurrentSkipListSetinstance. (The elements 
themselves are not cloned.) 



    Returns: a shallow copy of this set 

*java.util.concurrent.ConcurrentSkipListSet.comparator()*

public |java.util.Comparator|<? super E> comparator()





*java.util.concurrent.ConcurrentSkipListSet.contains(Object)*

public boolean contains(java.lang.Object o)

Returnstrueif this set contains the specified element. More formally, 
returnstrueif and only if this set contains an elementesuch thato.equals(e). 


    o - object to be checked for containment in this set 

    Returns: {@code true} if this set contains the specified element 

*java.util.concurrent.ConcurrentSkipListSet.descendingIterator()*

public |java.util.Iterator|<E> descendingIterator()

Returns an iterator over the elements in this set in descending order. 



    Returns: an iterator over the elements in this set in descending order 

*java.util.concurrent.ConcurrentSkipListSet.descendingSet()*

public |java.util.NavigableSet|<E> descendingSet()

Returns a reverse order view of the elements contained in this set. The 
descending set is backed by this set, so changes to the set are reflected in 
the descending set, and vice-versa. 

The returned set has an ordering equivalent to 
Collections.reverseOrder(|java.util.Collections|) (comparator()). The 
expressions.descendingSet().descendingSet()returns a view ofsessentially 
equivalent tos. 



    Returns: a reverse order view of this set 

*java.util.concurrent.ConcurrentSkipListSet.equals(Object)*

public boolean equals(java.lang.Object o)

Compares the specified object with this set for equality. Returnstrueif the 
specified object is also a set, the two sets have the same size, and every 
member of the specified set is contained in this set (or equivalently, every 
member of this set is contained in the specified set). This definition ensures 
that the equals method works properly across different implementations of the 
set interface. 


    o - the object to be compared for equality with this set 

    Returns: {@code true} if the specified object is equal to this set 

*java.util.concurrent.ConcurrentSkipListSet.first()*

public |E| first()





*java.util.concurrent.ConcurrentSkipListSet.floor(E)*

public |E| floor(E e)





*java.util.concurrent.ConcurrentSkipListSet.headSet(E)*

public |java.util.NavigableSet|<E> headSet(E toElement)





*java.util.concurrent.ConcurrentSkipListSet.headSet(E,boolean)*

public |java.util.NavigableSet|<E> headSet(
  E toElement,
  boolean inclusive)





*java.util.concurrent.ConcurrentSkipListSet.higher(E)*

public |E| higher(E e)





*java.util.concurrent.ConcurrentSkipListSet.isEmpty()*

public boolean isEmpty()

Returnstrueif this set contains no elements. 



    Returns: {@code true} if this set contains no elements 

*java.util.concurrent.ConcurrentSkipListSet.iterator()*

public |java.util.Iterator|<E> iterator()

Returns an iterator over the elements in this set in ascending order. 



    Returns: an iterator over the elements in this set in ascending order 

*java.util.concurrent.ConcurrentSkipListSet.last()*

public |E| last()





*java.util.concurrent.ConcurrentSkipListSet.lower(E)*

public |E| lower(E e)





*java.util.concurrent.ConcurrentSkipListSet.pollFirst()*

public |E| pollFirst()





*java.util.concurrent.ConcurrentSkipListSet.pollLast()*

public |E| pollLast()





*java.util.concurrent.ConcurrentSkipListSet.remove(Object)*

public boolean remove(java.lang.Object o)

Removes the specified element from this set if it is present. More formally, 
removes an elementesuch thato.equals(e), if this set contains such an element. 
Returnstrueif this set contained the element (or equivalently, if this set 
changed as a result of the call). (This set will not contain the element once 
the call returns.) 


    o - object to be removed from this set, if present 

    Returns: {@code true} if this set contained the specified element 

*java.util.concurrent.ConcurrentSkipListSet.removeAll(Collection<?>)*

public boolean removeAll(java.util.Collection<?> c)

Removes from this set all of its elements that are contained in the specified 
collection. If the specified collection is also a set, this operation 
effectively modifies this set so that its value is the asymmetric set 
difference of the two sets. 


    c - collection containing elements to be removed from this set 

    Returns: {@code true} if this set changed as a result of the call 

*java.util.concurrent.ConcurrentSkipListSet.size()*

public int size()

Returns the number of elements in this set. If this set contains more 
thanInteger.MAX_VALUEelements, it returnsInteger.MAX_VALUE. 

Beware that, unlike in most collections, this method is NOT a constant-time 
operation. Because of the asynchronous nature of these sets, determining the 
current number of elements requires traversing them all to count them. 
Additionally, it is possible for the size to change during execution of this 
method, in which case the returned result will be inaccurate. Thus, this method 
is typically not very useful in concurrent applications. 



    Returns: the number of elements in this set 

*java.util.concurrent.ConcurrentSkipListSet.spliterator()*

public |java.util.Spliterator|<E> spliterator()

Returns a (|java.util.Spliterator|) over the elements in this set. 

TheSpliteratorreports (|java.util.Spliterator|) , (|java.util.Spliterator|) , 
(|java.util.Spliterator|) , (|java.util.Spliterator|) and 
(|java.util.Spliterator|) , with an encounter order that is ascending order. 
Overriding implementations should document the reporting of additional 
characteristic values. 

The spliterator's comparator (see (|java.util.Spliterator|) ) isnullif the 
set's comparator (see (|java.util.concurrent.ConcurrentSkipListSet|) ) isnull. 
Otherwise, the spliterator's comparator is the same as or imposes the same 
total ordering as the set's comparator. 



    Returns: a {@code Spliterator} over the elements in this set 

*java.util.concurrent.ConcurrentSkipListSet.subSet(E,boolean,E,boolean)*

public |java.util.NavigableSet|<E> subSet(
  E fromElement,
  boolean fromInclusive,
  E toElement,
  boolean toInclusive)





*java.util.concurrent.ConcurrentSkipListSet.subSet(E,E)*

public |java.util.NavigableSet|<E> subSet(
  E fromElement,
  E toElement)





*java.util.concurrent.ConcurrentSkipListSet.tailSet(E)*

public |java.util.NavigableSet|<E> tailSet(E fromElement)





*java.util.concurrent.ConcurrentSkipListSet.tailSet(E,boolean)*

public |java.util.NavigableSet|<E> tailSet(
  E fromElement,
  boolean inclusive)






