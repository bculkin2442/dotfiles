*java.util.Map* *Map* An object that maps keys to values.

public interface interface Map<K,V>


|java.util.Map_Description|
|java.util.Map_Fields|
|java.util.Map_Constructors|
|java.util.Map_Methods|

================================================================================

*java.util.Map_Methods*
|java.util.Map.clear()|Removes all of the mappings from this map (optional oper
|java.util.Map.compute(K,BiFunction<?superK,?superV,?extendsV>)|Attempts to com
|java.util.Map.computeIfAbsent(K,Function<?superK,?extendsV>)|If the specified 
|java.util.Map.computeIfPresent(K,BiFunction<?superK,?superV,?extendsV>)|If the
|java.util.Map.containsKey(Object)|Returns true if this map contains a mapping 
|java.util.Map.containsValue(Object)|Returns true if this map maps one or more 
|java.util.Map.entrySet()|Returns aSetview of the mappings contained in this ma
|java.util.Map.equals(Object)|Compares the specified object with this map for e
|java.util.Map.forEach(BiConsumer<?superK,?superV>)|Performs the given action f
|java.util.Map.get(Object)|Returns the value to which the specified key is mapp
|java.util.Map.getOrDefault(Object,V)|Returns the value to which the specified 
|java.util.Map.hashCode()|Returns the hash code value for this map.
|java.util.Map.isEmpty()|Returns true if this map contains no key-value mapping
|java.util.Map.keySet()|Returns aSetview of the keys contained in this map.
|java.util.Map.merge(K,V,BiFunction<?superV,?superV,?extendsV>)|If the specifie
|java.util.Map.put(K,V)|Associates the specified value with the specified key i
|java.util.Map.putAll(Map<?extendsK,?extendsV>)|Copies all of the mappings from
|java.util.Map.putIfAbsent(K,V)|If the specified key is not already associated 
|java.util.Map.remove(Object)|Removes the mapping for a key from this map if it
|java.util.Map.remove(Object,Object)|Removes the entry for the specified key on
|java.util.Map.replace(K,V)|Replaces the entry for the specified key only if it
|java.util.Map.replace(K,V,V)|Replaces the entry for the specified key only if 
|java.util.Map.replaceAll(BiFunction<?superK,?superV,?extendsV>)|Replaces each 
|java.util.Map.size()|Returns the number of key-value mappings in this map.
|java.util.Map.values()|Returns aCollectionview of the values contained in this

*java.util.Map_Description*

An object that maps keys to values. A map cannot contain duplicate keys; each 
key can map to at most one value. 

This interface takes the place of the Dictionary class, which was a totally 
abstract class rather than an interface. 

The Map interface provides three collection views, which allow a map's contents 
to be viewed as a set of keys, collection of values, or set of key-value 
mappings. The order of a map is defined as the order in which the iterators on 
the map's collection views return their elements. Some map implementations, 
like the TreeMap class, make specific guarantees as to their order; others, 
like the HashMap class, do not. 

Note: great care must be exercised if mutable objects are used as map keys. The 
behavior of a map is not specified if the value of an object is changed in a 
manner that affects equals comparisons while the object is a key in the map. A 
special case of this prohibition is that it is not permissible for a map to 
contain itself as a key. While it is permissible for a map to contain itself as 
a value, extreme caution is advised: the equals and hashCode methods are no 
longer well defined on such a map. 

All general-purpose map implementation classes should provide two "standard" 
constructors: a void (no arguments) constructor which creates an empty map, and 
a constructor with a single argument of type Map, which creates a new map with 
the same key-value mappings as its argument. In effect, the latter constructor 
allows the user to copy any map, producing an equivalent map of the desired 
class. There is no way to enforce this recommendation (as interfaces cannot 
contain constructors) but all of the general-purpose map implementations in the 
JDK comply. 

The "destructive" methods contained in this interface, that is, the methods 
that modify the map on which they operate, are specified to throw 
UnsupportedOperationException if this map does not support the operation. If 
this is the case, these methods may, but are not required to, throw an 
UnsupportedOperationException if the invocation would have no effect on the 
map. For example, invoking the (|java.util.Map|) method on an unmodifiable map 
may, but is not required to, throw the exception if the map whose mappings are 
to be "superimposed" is empty. 

Some map implementations have restrictions on the keys and values they may 
contain. For example, some implementations prohibit null keys and values, and 
some have restrictions on the types of their keys. Attempting to insert an 
ineligible key or value throws an unchecked exception, typically 
NullPointerException or ClassCastException. Attempting to query the presence of 
an ineligible key or value may throw an exception, or it may simply return 
false; some implementations will exhibit the former behavior and some will 
exhibit the latter. More generally, attempting an operation on an ineligible 
key or value whose completion would not result in the insertion of an 
ineligible element into the map may throw an exception or it may succeed, at 
the option of the implementation. Such exceptions are marked as "optional" in 
the specification for this interface. 

Many methods in Collections Framework interfaces are defined in terms of the 
equals(|java.lang.Object|) method. For example, the specification for the 
containsKey(Object key)(|java.util.Map|) method says: "returns true if and only 
if this map contains a mapping for a key k such that (key==null ? k==null : 
key.equals(k))." This specification should not be construed to imply that 
invoking Map.containsKey with a non-null argument key will cause key.equals(k) 
to be invoked for any key k. Implementations are free to implement 
optimizations whereby the equals invocation is avoided, for example, by first 
comparing the hash codes of the two keys. (The (|java.lang.Object|) 
specification guarantees that two objects with unequal hash codes cannot be 
equal.) More generally, implementations of the various Collections Framework 
interfaces are free to take advantage of the specified behavior of underlying 
(|java.lang.Object|) methods wherever the implementor deems it appropriate. 

Some map operations which perform recursive traversal of the map may fail with 
an exception for self-referential instances where the map directly or 
indirectly contains itself. This includes 
theclone(),equals(),hashCode()andtoString()methods. Implementations may 
optionally handle the self-referential scenario, however most current 
implementations do not do so. 

This interface is a member of the <a 
href="/../technotes/guides/collections/index.html"> Java Collections Framework. 



*java.util.Map.clear()*

public void clear()

Removes all of the mappings from this map (optional operation). The map will be 
empty after this call returns. 



*java.util.Map.compute(K,BiFunction<?superK,?superV,?extendsV>)*

public |V| compute(
  K key,
  java.util.function.BiFunction<? super K, ? super V, ? extends V> remappingFunction)

Attempts to compute a mapping for the specified key and its current mapped 
value (ornullif there is no current mapping). For example, to either create or 
append aStringmsg to a value mapping: 

map.compute(key, (k, v) -> (v == null) ? msg : v.concat(msg)) 

(Method merge()(|java.util.Map|) is often simpler to use for such purposes.) 

If the function returnsnull, the mapping is removed (or remains absent if 
initially absent). If the function itself throws an (unchecked) exception, the 
exception is rethrown, and the current mapping is left unchanged. 


    key - key with which the specified value is to be associated 
    remappingFunction - the function to compute a value 

    Returns: the new value associated with the specified key, or null if none 

*java.util.Map.computeIfAbsent(K,Function<?superK,?extendsV>)*

public |V| computeIfAbsent(
  K key,
  java.util.function.Function<? super K, ? extends V> mappingFunction)

If the specified key is not already associated with a value (or is mapped 
tonull), attempts to compute its value using the given mapping function and 
enters it into this map unlessnull. 

If the function returnsnullno mapping is recorded. If the function itself 
throws an (unchecked) exception, the exception is rethrown, and no mapping is 
recorded. The most common usage is to construct a new object serving as an 
initial mapped value or memoized result, as in: 

map.computeIfAbsent(key, k -> new Value(f(k))); 

Or to implement a multi-value map,Map>, supporting multiple values per key: 

map.computeIfAbsent(key, k -> new HashSet()).add(v); 


    key - key with which the specified value is to be associated 
    mappingFunction - the function to compute a value 

    Returns: the current (existing or computed) value associated with the specified key, or 
             null if the computed value is null 

*java.util.Map.computeIfPresent(K,BiFunction<?superK,?superV,?extendsV>)*

public |V| computeIfPresent(
  K key,
  java.util.function.BiFunction<? super K, ? super V, ? extends V> remappingFunction)

If the value for the specified key is present and non-null, attempts to compute 
a new mapping given the key and its current mapped value. 

If the function returnsnull, the mapping is removed. If the function itself 
throws an (unchecked) exception, the exception is rethrown, and the current 
mapping is left unchanged. 


    key - key with which the specified value is to be associated 
    remappingFunction - the function to compute a value 

    Returns: the new value associated with the specified key, or null if none 

*java.util.Map.containsKey(Object)*

public boolean containsKey(java.lang.Object key)

Returns true if this map contains a mapping for the specified key. More 
formally, returns true if and only if this map contains a mapping for a key k 
such that (key==null ? k==null : key.equals(k)). (There can be at most one such 
mapping.) 


    key - key whose presence in this map is to be tested 

    Returns: true if this map contains a mapping for the specified key 

*java.util.Map.containsValue(Object)*

public boolean containsValue(java.lang.Object value)

Returns true if this map maps one or more keys to the specified value. More 
formally, returns true if and only if this map contains at least one mapping to 
a value v such that (value==null ? v==null : value.equals(v)). This operation 
will probably require time linear in the map size for most implementations of 
the Map interface. 


    value - value whose presence in this map is to be tested 

    Returns: true if this map maps one or more keys to the specified value 

*java.util.Map.entrySet()*

public |java.util.Set|<Entry<K,V>> entrySet()

Returns a (|java.util.Set|) view of the mappings contained in this map. The set 
is backed by the map, so changes to the map are reflected in the set, and 
vice-versa. If the map is modified while an iteration over the set is in 
progress (except through the iterator's own remove operation, or through the 
setValue operation on a map entry returned by the iterator) the results of the 
iteration are undefined. The set supports element removal, which removes the 
corresponding mapping from the map, via the Iterator.remove, Set.remove, 
removeAll, retainAll and clear operations. It does not support the add or 
addAll operations. 



    Returns: a set view of the mappings contained in this map 

*java.util.Map.equals(Object)*

public boolean equals(java.lang.Object o)

Compares the specified object with this map for equality. Returns true if the 
given object is also a map and the two maps represent the same mappings. More 
formally, two maps m1 and m2 represent the same mappings if 
m1.entrySet().equals(m2.entrySet()). This ensures that the equals method works 
properly across different implementations of the Map interface. 


    o - object to be compared for equality with this map 

    Returns: true if the specified object is equal to this map 

*java.util.Map.forEach(BiConsumer<?superK,?superV>)*

public void forEach(java.util.function.BiConsumer<? super K, ? super V> action)

Performs the given action for each entry in this map until all entries have 
been processed or the action throws an exception. Unless otherwise specified by 
the implementing class, actions are performed in the order of entry set 
iteration (if an iteration order is specified.) Exceptions thrown by the action 
are relayed to the caller. 


    action - The action to be performed for each entry 

*java.util.Map.get(Object)*

public |V| get(java.lang.Object key)

Returns the value to which the specified key is mapped, ornullif this map 
contains no mapping for the key. 

More formally, if this map contains a mapping from a keykto a valuevsuch 
that(key==null ? k==null : key.equals(k)), then this method returnsv; otherwise 
it returnsnull. (There can be at most one such mapping.) 

If this map permits null values, then a return value ofnulldoes not necessarily 
indicate that the map contains no mapping for the key; it's also possible that 
the map explicitly maps the key tonull. The containsKey(|java.util.Map|) 
operation may be used to distinguish these two cases. 


    key - the key whose associated value is to be returned 

    Returns: the value to which the specified key is mapped, or {@code null} if this map 
             contains no mapping for the key 

*java.util.Map.getOrDefault(Object,V)*

public |V| getOrDefault(
  java.lang.Object key,
  V defaultValue)

Returns the value to which the specified key is mapped, ordefaultValueif this 
map contains no mapping for the key. 


    key - the key whose associated value is to be returned 
    defaultValue - the default mapping of the key 

    Returns: the value to which the specified key is mapped, or {@code defaultValue} if this 
             map contains no mapping for the key 

*java.util.Map.hashCode()*

public int hashCode()

Returns the hash code value for this map. The hash code of a map is defined to 
be the sum of the hash codes of each entry in the map's entrySet() view. This 
ensures that m1.equals(m2) implies that m1.hashCode()==m2.hashCode() for any 
two maps m1 and m2, as required by the general contract of (|java.lang.Object|) 
. 



    Returns: the hash code value for this map 

*java.util.Map.isEmpty()*

public boolean isEmpty()

Returns true if this map contains no key-value mappings. 



    Returns: true if this map contains no key-value mappings 

*java.util.Map.keySet()*

public |java.util.Set|<K> keySet()

Returns a (|java.util.Set|) view of the keys contained in this map. The set is 
backed by the map, so changes to the map are reflected in the set, and 
vice-versa. If the map is modified while an iteration over the set is in 
progress (except through the iterator's own remove operation), the results of 
the iteration are undefined. The set supports element removal, which removes 
the corresponding mapping from the map, via the Iterator.remove, Set.remove, 
removeAll, retainAll, and clear operations. It does not support the add or 
addAll operations. 



    Returns: a set view of the keys contained in this map 

*java.util.Map.merge(K,V,BiFunction<?superV,?superV,?extendsV>)*

public |V| merge(
  K key,
  V value,
  java.util.function.BiFunction<? super V, ? super V, ? extends V> remappingFunction)

If the specified key is not already associated with a value or is associated 
with null, associates it with the given non-null value. Otherwise, replaces the 
associated value with the results of the given remapping function, or removes 
if the result isnull. This method may be of use when combining multiple mapped 
values for a key. For example, to either create or append aString msgto a value 
mapping: 

map.merge(key, msg, String::concat) 

If the function returnsnullthe mapping is removed. If the function itself 
throws an (unchecked) exception, the exception is rethrown, and the current 
mapping is left unchanged. 


    key - key with which the resulting value is to be associated 
    value - the non-null value to be merged with the existing value associated with the key 
       or, if no existing value or a null value is associated with the key, to 
       be associated with the key 
    remappingFunction - the function to recompute a value if present 

    Returns: the new value associated with the specified key, or null if no value is 
             associated with the key 

*java.util.Map.put(K,V)*

public |V| put(
  K key,
  V value)

Associates the specified value with the specified key in this map (optional 
operation). If the map previously contained a mapping for the key, the old 
value is replaced by the specified value. (A map m is said to contain a mapping 
for a key k if and only if m.containsKey(k)(|java.util.Map|) would return 
true.) 


    key - key with which the specified value is to be associated 
    value - value to be associated with the specified key 

    Returns: the previous value associated with key, or null if there was no mapping for 
             key. (A null return can also indicate that the map previously 
             associated null with key, if the implementation supports null 
             values.) 

*java.util.Map.putAll(Map<?extendsK,?extendsV>)*

public void putAll(java.util.Map<? extends K, ? extends V> m)

Copies all of the mappings from the specified map to this map (optional 
operation). The effect of this call is equivalent to that of calling put(k, 
v)(|java.util.Map|) on this map once for each mapping from key k to value v in 
the specified map. The behavior of this operation is undefined if the specified 
map is modified while the operation is in progress. 


    m - mappings to be stored in this map 

*java.util.Map.putIfAbsent(K,V)*

public |V| putIfAbsent(
  K key,
  V value)

If the specified key is not already associated with a value (or is mapped 
tonull) associates it with the given value and returnsnull, else returns the 
current value. 


    key - key with which the specified value is to be associated 
    value - value to be associated with the specified key 

    Returns: the previous value associated with the specified key, or {@code null} if there 
             was no mapping for the key. (A {@code null} return can also 
             indicate that the map previously associated {@code null} with the 
             key, if the implementation supports null values.) 

*java.util.Map.remove(Object)*

public |V| remove(java.lang.Object key)

Removes the mapping for a key from this map if it is present (optional 
operation). More formally, if this map contains a mapping from key k to value v 
such that (key==null ? k==null : key.equals(k)), that mapping is removed. (The 
map can contain at most one such mapping.) 

Returns the value to which this map previously associated the key, or null if 
the map contained no mapping for the key. 

If this map permits null values, then a return value of null does not 
necessarily indicate that the map contained no mapping for the key; it's also 
possible that the map explicitly mapped the key to null. 

The map will not contain a mapping for the specified key once the call returns. 


    key - key whose mapping is to be removed from the map 

    Returns: the previous value associated with key, or null if there was no mapping for 
             key. 

*java.util.Map.remove(Object,Object)*

public boolean remove(
  java.lang.Object key,
  java.lang.Object value)

Removes the entry for the specified key only if it is currently mapped to the 
specified value. 


    key - key with which the specified value is associated 
    value - value expected to be associated with the specified key 

    Returns: {@code true} if the value was removed 

*java.util.Map.replace(K,V)*

public |V| replace(
  K key,
  V value)

Replaces the entry for the specified key only if it is currently mapped to some 
value. 


    key - key with which the specified value is associated 
    value - value to be associated with the specified key 

    Returns: the previous value associated with the specified key, or {@code null} if there 
             was no mapping for the key. (A {@code null} return can also 
             indicate that the map previously associated {@code null} with the 
             key, if the implementation supports null values.) 

*java.util.Map.replace(K,V,V)*

public boolean replace(
  K key,
  V oldValue,
  V newValue)

Replaces the entry for the specified key only if currently mapped to the 
specified value. 


    key - key with which the specified value is associated 
    oldValue - value expected to be associated with the specified key 
    newValue - value to be associated with the specified key 

    Returns: {@code true} if the value was replaced 

*java.util.Map.replaceAll(BiFunction<?superK,?superV,?extendsV>)*

public void replaceAll(java.util.function.BiFunction<? super K, ? super V, ? extends V> function)

Replaces each entry's value with the result of invoking the given function on 
that entry until all entries have been processed or the function throws an 
exception. Exceptions thrown by the function are relayed to the caller. 


    function - the function to apply to each entry 

*java.util.Map.size()*

public int size()

Returns the number of key-value mappings in this map. If the map contains more 
than Integer.MAX_VALUE elements, returns Integer.MAX_VALUE. 



    Returns: the number of key-value mappings in this map 

*java.util.Map.values()*

public |java.util.Collection|<V> values()

Returns a (|java.util.Collection|) view of the values contained in this map. 
The collection is backed by the map, so changes to the map are reflected in the 
collection, and vice-versa. If the map is modified while an iteration over the 
collection is in progress (except through the iterator's own remove operation), 
the results of the iteration are undefined. The collection supports element 
removal, which removes the corresponding mapping from the map, via the 
Iterator.remove, Collection.remove, removeAll, retainAll and clear operations. 
It does not support the add or addAll operations. 



    Returns: a collection view of the values contained in this map 


