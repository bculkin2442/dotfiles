*javax.security.auth.Policy* *Policy*  This is an abstract class for representin

public abstract class Policy
  extends    |java.lang.Object|

|javax.security.auth.Policy_Description|
|javax.security.auth.Policy_Fields|
|javax.security.auth.Policy_Constructors|
|javax.security.auth.Policy_Methods|

================================================================================

*javax.security.auth.Policy_Constructors*
|javax.security.auth.Policy()|Sole constructor.

*javax.security.auth.Policy_Methods*
|javax.security.auth.Policy.getPermissions(Subject,CodeSource)|Retrieve the Per
|javax.security.auth.Policy.getPolicy()|Returns the installed Policy object.
|javax.security.auth.Policy.refresh()|Refresh and reload the Policy.
|javax.security.auth.Policy.setPolicy(Policy)|Sets the system-wide Policy objec

*javax.security.auth.Policy_Description*

This is an abstract class for representing the system policy for Subject-based 
authorization. A subclass implementation of this class provides a means to 
specify a Subject-based access controlPolicy. 

APolicyobject can be queried for the set of Permissions granted to code running 
as aPrincipalin the following manner: 



policy = Policy.getPolicy(); PermissionCollection perms = 
policy.getPermissions(subject, codeSource); 

ThePolicyobject consults the local policy and returns and 
appropriatePermissionsobject with the Permissions granted to the Principals 
associated with the provided subject, and granted to the code specified by the 
provided codeSource. 

APolicycontains the following information. Note that this example only 
represents the syntax for the defaultPolicyimplementation. Subclass 
implementations of this class may implement alternative syntaxes and may 
retrieve thePolicyfrom any source such as files, databases, or servers. 

Each entry in thePolicyis represented as a grant entry. Each grant entry 
specifies a codebase, code signers, and Principals triplet, as well as the 
Permissions granted to that triplet. 



grant CodeBase ["URL"], Signedby ["signers"], Principal [Principal_Class] 
"Principal_Name" { Permission Permission_Class ["Target_Name"] [, 
"Permission_Actions"] [, signedBy "SignerName"]; }; 

The CodeBase and Signedby components of the triplet name/value pairs are 
optional. If they are not present, then any any codebase will match, and any 
signer (including unsigned code) will match. For Example, 



grant CodeBase "foo.com", Signedby "foo", Principal 
com.sun.security.auth.SolarisPrincipal "duke" { permission 
java.io.FilePermission "/home/duke", "read, write"; }; 

This grant entry specifies that code from "foo.com", signed by "foo', and 
running as aSolarisPrincipalwith the name, duke, has onePermission. 
ThisPermissionpermits the executing code to read and write files in the 
directory, "/home/duke". 

To "run" as a particularPrincipal, code invokes theSubject.doAs(subject, 
...)method. After invoking that method, the code runs as all the Principals 
associated with the specifiedSubject. Note that thisPolicy(and the Permissions 
granted in thisPolicy) only become effective after the call toSubject.doAshas 
occurred. 

Multiple Principals may be listed within one grant entry. All the Principals in 
the grant entry must be associated with theSubjectprovided toSubject.doAsfor 
thatSubjectto be granted the specified Permissions. 



grant Principal com.sun.security.auth.SolarisPrincipal "duke", Principal 
com.sun.security.auth.SolarisNumericUserPrincipal "0" { permission 
java.io.FilePermission "/home/duke", "read, write"; permission 
java.net.SocketPermission "duke.com", "connect"; }; 

This entry grants any code running as both "duke" and "0" permission to read 
and write files in duke's home directory, as well as permission to make socket 
connections to "duke.com". 

Note that non Principal-based grant entries are not permitted in thisPolicy. 
Therefore, grant entries such as: 



grant CodeBase "foo.com", Signedby "foo" { permission java.io.FilePermission 
"/tmp/scratch", "read, write"; }; 

are rejected. Such permission must be listed in thejava.security.Policy. 

The defaultPolicyimplementation can be changed by setting the value of 
theauth.policy.providersecurity property to the fully qualified name of the 
desiredPolicyimplementation class. 


  Deprecated: as of JDK version 1.4 -- Replaced by java.security.Policy.
              java.security.Policy has a method:
 <pre>
      public PermissionCollection getPermissions
          (java.security.ProtectionDomain pd)

 </pre>
 and ProtectionDomain has a constructor:
 <pre>
      public ProtectionDomain
          (CodeSource cs,
           PermissionCollection permissions,
           ClassLoader loader,
           Principal[] principals)
 </pre>

 These two APIs provide callers the means to query the
 Policy for Principal-based Permission entries.

*javax.security.auth.Policy()*

protected Policy()

Sole constructor. (For invocation by subclass constructors, typically 
implicit.) 


*javax.security.auth.Policy.getPermissions(Subject,CodeSource)*

public abstract |java.security.PermissionCollection| getPermissions(
  javax.security.auth.Subject subject,
  java.security.CodeSource cs)

Retrieve the Permissions granted to the Principals associated with the 
specifiedCodeSource. 




    subject - the {@code Subject} whose associated Principals, in conjunction with the 
       provided {@code CodeSource}, determines the Permissions returned by this 
       method. This parameter may be {@code null}. 
    cs - the code specified by its {@code CodeSource} that determines, in conjunction 
       with the provided {@code Subject}, the Permissions returned by this 
       method. This parameter may be {@code null}. 

    Returns: the Collection of Permissions granted to all the {@code Subject} and code 
             specified in the provided subject and cs parameters. 

*javax.security.auth.Policy.getPolicy()*

public static |javax.security.auth.Policy| getPolicy()

Returns the installed Policy object. This method first 
callsSecurityManager.checkPermissionwith 
theAuthPermission("getPolicy")permission to ensure the caller has permission to 
get the Policy object. 





    Returns: the installed Policy. The return value cannot be {@code null}. 

*javax.security.auth.Policy.refresh()*

public abstract void refresh()

Refresh and reload the Policy. 

This method causes this object to refresh/reload its current Policy. This is 
implementation-dependent. For example, if the Policy object is stored in a 
file, callingrefreshwill cause the file to be re-read. 





*javax.security.auth.Policy.setPolicy(Policy)*

public static void setPolicy(javax.security.auth.Policy policy)

Sets the system-wide Policy object. This method first 
callsSecurityManager.checkPermissionwith 
theAuthPermission("setPolicy")permission to ensure the caller has permission to 
set the Policy. 




    policy - the new system Policy object. 


