*java.util.concurrent.CompletionStage* *CompletionStage* A stage of a possibly a

public interface interface CompletionStage<T>


|java.util.concurrent.CompletionStage_Description|
|java.util.concurrent.CompletionStage_Fields|
|java.util.concurrent.CompletionStage_Constructors|
|java.util.concurrent.CompletionStage_Methods|

================================================================================

*java.util.concurrent.CompletionStage_Methods*
|java.util.concurrent.CompletionStage.acceptEither(CompletionStage<?extendsT>,Consumer<?superT>)|
|java.util.concurrent.CompletionStage.acceptEitherAsync(CompletionStage<?extendsT>,Consumer<?superT>)|
|java.util.concurrent.CompletionStage.acceptEitherAsync(CompletionStage<?extendsT>,Consumer<?superT>,Executor)|
|java.util.concurrent.CompletionStage.applyToEither(CompletionStage<?extendsT>,Function<?superT,U>)|
|java.util.concurrent.CompletionStage.applyToEitherAsync(CompletionStage<?extendsT>,Function<?superT,U>)|
|java.util.concurrent.CompletionStage.applyToEitherAsync(CompletionStage<?extendsT>,Function<?superT,U>,Executor)|
|java.util.concurrent.CompletionStage.exceptionally(Function<Throwable,?extendsT>)|
|java.util.concurrent.CompletionStage.handle(BiFunction<?superT,Throwable,?extendsU>)|
|java.util.concurrent.CompletionStage.handleAsync(BiFunction<?superT,Throwable,?extendsU>)|
|java.util.concurrent.CompletionStage.handleAsync(BiFunction<?superT,Throwable,?extendsU>,Executor)|
|java.util.concurrent.CompletionStage.runAfterBoth(CompletionStage<?>,Runnable)|
|java.util.concurrent.CompletionStage.runAfterBothAsync(CompletionStage<?>,Runnable)|
|java.util.concurrent.CompletionStage.runAfterBothAsync(CompletionStage<?>,Runnable,Executor)|
|java.util.concurrent.CompletionStage.runAfterEither(CompletionStage<?>,Runnable)|
|java.util.concurrent.CompletionStage.runAfterEitherAsync(CompletionStage<?>,Runnable)|
|java.util.concurrent.CompletionStage.runAfterEitherAsync(CompletionStage<?>,Runnable,Executor)|
|java.util.concurrent.CompletionStage.thenAccept(Consumer<?superT>)|Returns a n
|java.util.concurrent.CompletionStage.thenAcceptAsync(Consumer<?superT>)|Return
|java.util.concurrent.CompletionStage.thenAcceptAsync(Consumer<?superT>,Executor)|
|java.util.concurrent.CompletionStage.thenAcceptBoth(CompletionStage<?extendsU>,BiConsumer<?superT,?superU>)|
|java.util.concurrent.CompletionStage.thenAcceptBothAsync(CompletionStage<?extendsU>,BiConsumer<?superT,?superU>)|
|java.util.concurrent.CompletionStage.thenAcceptBothAsync(CompletionStage<?extendsU>,BiConsumer<?superT,?superU>,Executor)|
|java.util.concurrent.CompletionStage.thenApply(Function<?superT,?extendsU>)|Re
|java.util.concurrent.CompletionStage.thenApplyAsync(Function<?superT,?extendsU>)|
|java.util.concurrent.CompletionStage.thenApplyAsync(Function<?superT,?extendsU>,Executor)|
|java.util.concurrent.CompletionStage.thenCombine(CompletionStage<?extendsU>,BiFunction<?superT,?superU,?extendsV>)|
|java.util.concurrent.CompletionStage.thenCombineAsync(CompletionStage<?extendsU>,BiFunction<?superT,?superU,?extendsV>)|
|java.util.concurrent.CompletionStage.thenCombineAsync(CompletionStage<?extendsU>,BiFunction<?superT,?superU,?extendsV>,Executor)|
|java.util.concurrent.CompletionStage.thenCompose(Function<?superT,?extendsCompletionStage<U>>)|
|java.util.concurrent.CompletionStage.thenComposeAsync(Function<?superT,?extendsCompletionStage<U>>)|
|java.util.concurrent.CompletionStage.thenComposeAsync(Function<?superT,?extendsCompletionStage<U>>,Executor)|
|java.util.concurrent.CompletionStage.thenRun(Runnable)|Returns a new Completio
|java.util.concurrent.CompletionStage.thenRunAsync(Runnable)|Returns a new Comp
|java.util.concurrent.CompletionStage.thenRunAsync(Runnable,Executor)|Returns a
|java.util.concurrent.CompletionStage.toCompletableFuture()|Returns aCompletabl
|java.util.concurrent.CompletionStage.whenComplete(BiConsumer<?superT,?superThrowable>)|
|java.util.concurrent.CompletionStage.whenCompleteAsync(BiConsumer<?superT,?superThrowable>)|
|java.util.concurrent.CompletionStage.whenCompleteAsync(BiConsumer<?superT,?superThrowable>,Executor)|

*java.util.concurrent.CompletionStage_Description*

A stage of a possibly asynchronous computation, that performs an action or 
computes a value when another CompletionStage completes. A stage completes upon 
termination of its computation, but this may in turn trigger other dependent 
stages. The functionality defined in this interface takes only a few basic 
forms, which expand out to a larger set of methods to capture a range of usage 
styles: 

The computation performed by a stage may be expressed as a Function, Consumer, 
or Runnable (using methods with names including apply, accept, or run, 
respectively) depending on whether it requires arguments and/or produces 
results. For example,stage.thenApply(x -> square(x)).thenAccept(x -> 
System.out.print(x)).thenRun(() -> System.out.println()). An additional form 
(compose) applies functions of stages themselves, rather than their results. 

One stage's execution may be triggered by completion of a single stage, or both 
of two stages, or either of two stages. Dependencies on a single stage are 
arranged using methods with prefix then. Those triggered by completion of both 
of two stages may combine their results or effects, using correspondingly named 
methods. Those triggered by either of two stages make no guarantees about which 
of the results or effects are used for the dependent stage's computation. 

Dependencies among stages control the triggering of computations, but do not 
otherwise guarantee any particular ordering. Additionally, execution of a new 
stage's computations may be arranged in any of three ways: default execution, 
default asynchronous execution (using methods with suffix async that employ the 
stage's default asynchronous execution facility), or custom (via a supplied 
(|java.util.concurrent.Executor|) ). The execution properties of default and 
async modes are specified by CompletionStage implementations, not this 
interface. Methods with explicit Executor arguments may have arbitrary 
execution properties, and might not even support concurrent execution, but are 
arranged for processing in a way that accommodates asynchrony. 

Two method forms support processing whether the triggering stage completed 
normally or exceptionally: Method 
whenComplete(|java.util.concurrent.CompletionStage|) allows injection of an 
action regardless of outcome, otherwise preserving the outcome in its 
completion. Method handle(|java.util.concurrent.CompletionStage|) additionally 
allows the stage to compute a replacement result that may enable further 
processing by other dependent stages. In all other cases, if a stage's 
computation terminates abruptly with an (unchecked) exception or error, then 
all dependent stages requiring its completion complete exceptionally as well, 
with a (|java.util.concurrent.CompletionException|) holding the exception as 
its cause. If a stage is dependent on both of two stages, and both complete 
exceptionally, then the CompletionException may correspond to either one of 
these exceptions. If a stage is dependent on either of two others, and only one 
of them completes exceptionally, no guarantees are made about whether the 
dependent stage completes normally or exceptionally. In the case of 
methodwhenComplete, when the supplied action itself encounters an exception, 
then the stage exceptionally completes with this exception if not already 
completed exceptionally. 



All methods adhere to the above triggering, execution, and exceptional 
completion specifications (which are not repeated in individual method 
specifications). Additionally, while arguments used to pass a completion result 
(that is, for parameters of typeT) for methods accepting them may be null, 
passing a null value for any other parameter will result in a 
(|java.lang.NullPointerException|) being thrown. 

This interface does not define methods for initially creating, forcibly 
completing normally or exceptionally, probing completion status or results, or 
awaiting completion of a stage. Implementations of CompletionStage may provide 
means of achieving such effects, as appropriate. Method 
(|java.util.concurrent.CompletionStage|) enables interoperability among 
different implementations of this interface by providing a common conversion 
type. 



*java.util.concurrent.CompletionStage.acceptEither(CompletionStage<?extendsT>,Consumer<?superT>)*

public |java.util.concurrent.CompletionStage|<Void> acceptEither(
  java.util.concurrent.CompletionStage<? extends T> other,
  java.util.function.Consumer<? super T> action)

Returns a new CompletionStage that, when either this or the other given stage 
complete normally, is executed with the corresponding result as argument to the 
supplied action. 

See the (|java.util.concurrent.CompletionStage|) documentation for rules 
covering exceptional completion. 


    other - the other CompletionStage 
    action - the action to perform before completing the returned CompletionStage 

    Returns: the new CompletionStage 

*java.util.concurrent.CompletionStage.acceptEitherAsync(CompletionStage<?extendsT>,Consumer<?superT>)*

public |java.util.concurrent.CompletionStage|<Void> acceptEitherAsync(
  java.util.concurrent.CompletionStage<? extends T> other,
  java.util.function.Consumer<? super T> action)

Returns a new CompletionStage that, when either this or the other given stage 
complete normally, is executed using this stage's default asynchronous 
execution facility, with the corresponding result as argument to the supplied 
action. 

See the (|java.util.concurrent.CompletionStage|) documentation for rules 
covering exceptional completion. 


    other - the other CompletionStage 
    action - the action to perform before completing the returned CompletionStage 

    Returns: the new CompletionStage 

*java.util.concurrent.CompletionStage.acceptEitherAsync(CompletionStage<?extendsT>,Consumer<?superT>,Executor)*

public |java.util.concurrent.CompletionStage|<Void> acceptEitherAsync(
  java.util.concurrent.CompletionStage<? extends T> other,
  java.util.function.Consumer<? super T> action,
  java.util.concurrent.Executor executor)

Returns a new CompletionStage that, when either this or the other given stage 
complete normally, is executed using the supplied executor, with the 
corresponding result as argument to the supplied function. 

See the (|java.util.concurrent.CompletionStage|) documentation for rules 
covering exceptional completion. 


    other - the other CompletionStage 
    action - the action to perform before completing the returned CompletionStage 
    executor - the executor to use for asynchronous execution 

    Returns: the new CompletionStage 

*java.util.concurrent.CompletionStage.applyToEither(CompletionStage<?extendsT>,Function<?superT,U>)*

public |java.util.concurrent.CompletionStage|<U> applyToEither(
  java.util.concurrent.CompletionStage<? extends T> other,
  java.util.function.Function<? super T, U> fn)

Returns a new CompletionStage that, when either this or the other given stage 
complete normally, is executed with the corresponding result as argument to the 
supplied function. 

See the (|java.util.concurrent.CompletionStage|) documentation for rules 
covering exceptional completion. 


    other - the other CompletionStage 
    fn - the function to use to compute the value of the returned CompletionStage 

    Returns: the new CompletionStage 

*java.util.concurrent.CompletionStage.applyToEitherAsync(CompletionStage<?extendsT>,Function<?superT,U>)*

public |java.util.concurrent.CompletionStage|<U> applyToEitherAsync(
  java.util.concurrent.CompletionStage<? extends T> other,
  java.util.function.Function<? super T, U> fn)

Returns a new CompletionStage that, when either this or the other given stage 
complete normally, is executed using this stage's default asynchronous 
execution facility, with the corresponding result as argument to the supplied 
function. 

See the (|java.util.concurrent.CompletionStage|) documentation for rules 
covering exceptional completion. 


    other - the other CompletionStage 
    fn - the function to use to compute the value of the returned CompletionStage 

    Returns: the new CompletionStage 

*java.util.concurrent.CompletionStage.applyToEitherAsync(CompletionStage<?extendsT>,Function<?superT,U>,Executor)*

public |java.util.concurrent.CompletionStage|<U> applyToEitherAsync(
  java.util.concurrent.CompletionStage<? extends T> other,
  java.util.function.Function<? super T, U> fn,
  java.util.concurrent.Executor executor)

Returns a new CompletionStage that, when either this or the other given stage 
complete normally, is executed using the supplied executor, with the 
corresponding result as argument to the supplied function. 

See the (|java.util.concurrent.CompletionStage|) documentation for rules 
covering exceptional completion. 


    other - the other CompletionStage 
    fn - the function to use to compute the value of the returned CompletionStage 
    executor - the executor to use for asynchronous execution 

    Returns: the new CompletionStage 

*java.util.concurrent.CompletionStage.exceptionally(Function<Throwable,?extendsT>)*

public |java.util.concurrent.CompletionStage|<T> exceptionally(java.util.function.Function<java.lang.Throwable, ? extends T> fn)

Returns a new CompletionStage that, when this stage completes exceptionally, is 
executed with this stage's exception as the argument to the supplied function. 
Otherwise, if this stage completes normally, then the returned stage also 
completes normally with the same value. 


    fn - the function to use to compute the value of the returned CompletionStage if 
       this CompletionStage completed exceptionally 

    Returns: the new CompletionStage 

*java.util.concurrent.CompletionStage.handle(BiFunction<?superT,Throwable,?extendsU>)*

public |java.util.concurrent.CompletionStage|<U> handle(java.util.function.BiFunction<? super T, java.lang.Throwable, ? extends U> fn)

Returns a new CompletionStage that, when this stage completes either normally 
or exceptionally, is executed with this stage's result and exception as 
arguments to the supplied function. The given function is invoked with the 
result (ornullif none) and the exception (ornullif none) of this stage when 
complete as arguments. 


    fn - the function to use to compute the value of the returned CompletionStage 

    Returns: the new CompletionStage 

*java.util.concurrent.CompletionStage.handleAsync(BiFunction<?superT,Throwable,?extendsU>)*

public |java.util.concurrent.CompletionStage|<U> handleAsync(java.util.function.BiFunction<? super T, java.lang.Throwable, ? extends U> fn)

Returns a new CompletionStage that, when this stage completes either normally 
or exceptionally, is executed using this stage's default asynchronous execution 
facility, with this stage's result and exception as arguments to the supplied 
function. The given function is invoked with the result (ornullif none) and the 
exception (ornullif none) of this stage when complete as arguments. 


    fn - the function to use to compute the value of the returned CompletionStage 

    Returns: the new CompletionStage 

*java.util.concurrent.CompletionStage.handleAsync(BiFunction<?superT,Throwable,?extendsU>,Executor)*

public |java.util.concurrent.CompletionStage|<U> handleAsync(
  java.util.function.BiFunction<? super T, java.lang.Throwable, ? extends U> fn,
  java.util.concurrent.Executor executor)

Returns a new CompletionStage that, when this stage completes either normally 
or exceptionally, is executed using the supplied executor, with this stage's 
result and exception as arguments to the supplied function. The given function 
is invoked with the result (ornullif none) and the exception (ornullif none) of 
this stage when complete as arguments. 


    fn - the function to use to compute the value of the returned CompletionStage 
    executor - the executor to use for asynchronous execution 

    Returns: the new CompletionStage 

*java.util.concurrent.CompletionStage.runAfterBoth(CompletionStage<?>,Runnable)*

public |java.util.concurrent.CompletionStage|<Void> runAfterBoth(
  java.util.concurrent.CompletionStage<?> other,
  java.lang.Runnable action)

Returns a new CompletionStage that, when this and the other given stage both 
complete normally, executes the given action. 

See the (|java.util.concurrent.CompletionStage|) documentation for rules 
covering exceptional completion. 


    other - the other CompletionStage 
    action - the action to perform before completing the returned CompletionStage 

    Returns: the new CompletionStage 

*java.util.concurrent.CompletionStage.runAfterBothAsync(CompletionStage<?>,Runnable)*

public |java.util.concurrent.CompletionStage|<Void> runAfterBothAsync(
  java.util.concurrent.CompletionStage<?> other,
  java.lang.Runnable action)

Returns a new CompletionStage that, when this and the other given stage 
complete normally, executes the given action using this stage's default 
asynchronous execution facility. 

See the (|java.util.concurrent.CompletionStage|) documentation for rules 
covering exceptional completion. 


    other - the other CompletionStage 
    action - the action to perform before completing the returned CompletionStage 

    Returns: the new CompletionStage 

*java.util.concurrent.CompletionStage.runAfterBothAsync(CompletionStage<?>,Runnable,Executor)*

public |java.util.concurrent.CompletionStage|<Void> runAfterBothAsync(
  java.util.concurrent.CompletionStage<?> other,
  java.lang.Runnable action,
  java.util.concurrent.Executor executor)

Returns a new CompletionStage that, when this and the other given stage 
complete normally, executes the given action using the supplied executor 

See the (|java.util.concurrent.CompletionStage|) documentation for rules 
covering exceptional completion. 


    other - the other CompletionStage 
    action - the action to perform before completing the returned CompletionStage 
    executor - the executor to use for asynchronous execution 

    Returns: the new CompletionStage 

*java.util.concurrent.CompletionStage.runAfterEither(CompletionStage<?>,Runnable)*

public |java.util.concurrent.CompletionStage|<Void> runAfterEither(
  java.util.concurrent.CompletionStage<?> other,
  java.lang.Runnable action)

Returns a new CompletionStage that, when either this or the other given stage 
complete normally, executes the given action. 

See the (|java.util.concurrent.CompletionStage|) documentation for rules 
covering exceptional completion. 


    other - the other CompletionStage 
    action - the action to perform before completing the returned CompletionStage 

    Returns: the new CompletionStage 

*java.util.concurrent.CompletionStage.runAfterEitherAsync(CompletionStage<?>,Runnable)*

public |java.util.concurrent.CompletionStage|<Void> runAfterEitherAsync(
  java.util.concurrent.CompletionStage<?> other,
  java.lang.Runnable action)

Returns a new CompletionStage that, when either this or the other given stage 
complete normally, executes the given action using this stage's default 
asynchronous execution facility. 

See the (|java.util.concurrent.CompletionStage|) documentation for rules 
covering exceptional completion. 


    other - the other CompletionStage 
    action - the action to perform before completing the returned CompletionStage 

    Returns: the new CompletionStage 

*java.util.concurrent.CompletionStage.runAfterEitherAsync(CompletionStage<?>,Runnable,Executor)*

public |java.util.concurrent.CompletionStage|<Void> runAfterEitherAsync(
  java.util.concurrent.CompletionStage<?> other,
  java.lang.Runnable action,
  java.util.concurrent.Executor executor)

Returns a new CompletionStage that, when either this or the other given stage 
complete normally, executes the given action using supplied executor. 

See the (|java.util.concurrent.CompletionStage|) documentation for rules 
covering exceptional completion. 


    other - the other CompletionStage 
    action - the action to perform before completing the returned CompletionStage 
    executor - the executor to use for asynchronous execution 

    Returns: the new CompletionStage 

*java.util.concurrent.CompletionStage.thenAccept(Consumer<?superT>)*

public |java.util.concurrent.CompletionStage|<Void> thenAccept(java.util.function.Consumer<? super T> action)

Returns a new CompletionStage that, when this stage completes normally, is 
executed with this stage's result as the argument to the supplied action. 

See the (|java.util.concurrent.CompletionStage|) documentation for rules 
covering exceptional completion. 


    action - the action to perform before completing the returned CompletionStage 

    Returns: the new CompletionStage 

*java.util.concurrent.CompletionStage.thenAcceptAsync(Consumer<?superT>)*

public |java.util.concurrent.CompletionStage|<Void> thenAcceptAsync(java.util.function.Consumer<? super T> action)

Returns a new CompletionStage that, when this stage completes normally, is 
executed using this stage's default asynchronous execution facility, with this 
stage's result as the argument to the supplied action. 

See the (|java.util.concurrent.CompletionStage|) documentation for rules 
covering exceptional completion. 


    action - the action to perform before completing the returned CompletionStage 

    Returns: the new CompletionStage 

*java.util.concurrent.CompletionStage.thenAcceptAsync(Consumer<?superT>,Executor)*

public |java.util.concurrent.CompletionStage|<Void> thenAcceptAsync(
  java.util.function.Consumer<? super T> action,
  java.util.concurrent.Executor executor)

Returns a new CompletionStage that, when this stage completes normally, is 
executed using the supplied Executor, with this stage's result as the argument 
to the supplied action. 

See the (|java.util.concurrent.CompletionStage|) documentation for rules 
covering exceptional completion. 


    action - the action to perform before completing the returned CompletionStage 
    executor - the executor to use for asynchronous execution 

    Returns: the new CompletionStage 

*java.util.concurrent.CompletionStage.thenAcceptBoth(CompletionStage<?extendsU>,BiConsumer<?superT,?superU>)*

public |java.util.concurrent.CompletionStage|<Void> thenAcceptBoth(
  java.util.concurrent.CompletionStage<? extends U> other,
  java.util.function.BiConsumer<? super T, ? super U> action)

Returns a new CompletionStage that, when this and the other given stage both 
complete normally, is executed with the two results as arguments to the 
supplied action. 

See the (|java.util.concurrent.CompletionStage|) documentation for rules 
covering exceptional completion. 


    other - the other CompletionStage 
    action - the action to perform before completing the returned CompletionStage 

    Returns: the new CompletionStage 

*java.util.concurrent.CompletionStage.thenAcceptBothAsync(CompletionStage<?extendsU>,BiConsumer<?superT,?superU>)*

public |java.util.concurrent.CompletionStage|<Void> thenAcceptBothAsync(
  java.util.concurrent.CompletionStage<? extends U> other,
  java.util.function.BiConsumer<? super T, ? super U> action)

Returns a new CompletionStage that, when this and the other given stage 
complete normally, is executed using this stage's default asynchronous 
execution facility, with the two results as arguments to the supplied action. 


    other - the other CompletionStage 
    action - the action to perform before completing the returned CompletionStage 

    Returns: the new CompletionStage 

*java.util.concurrent.CompletionStage.thenAcceptBothAsync(CompletionStage<?extendsU>,BiConsumer<?superT,?superU>,Executor)*

public |java.util.concurrent.CompletionStage|<Void> thenAcceptBothAsync(
  java.util.concurrent.CompletionStage<? extends U> other,
  java.util.function.BiConsumer<? super T, ? super U> action,
  java.util.concurrent.Executor executor)

Returns a new CompletionStage that, when this and the other given stage 
complete normally, is executed using the supplied executor, with the two 
results as arguments to the supplied function. 


    other - the other CompletionStage 
    action - the action to perform before completing the returned CompletionStage 
    executor - the executor to use for asynchronous execution 

    Returns: the new CompletionStage 

*java.util.concurrent.CompletionStage.thenApply(Function<?superT,?extendsU>)*

public |java.util.concurrent.CompletionStage|<U> thenApply(java.util.function.Function<? super T, ? extends U> fn)

Returns a new CompletionStage that, when this stage completes normally, is 
executed with this stage's result as the argument to the supplied function. 

See the (|java.util.concurrent.CompletionStage|) documentation for rules 
covering exceptional completion. 


    fn - the function to use to compute the value of the returned CompletionStage 

    Returns: the new CompletionStage 

*java.util.concurrent.CompletionStage.thenApplyAsync(Function<?superT,?extendsU>)*

public |java.util.concurrent.CompletionStage|<U> thenApplyAsync(java.util.function.Function<? super T, ? extends U> fn)

Returns a new CompletionStage that, when this stage completes normally, is 
executed using this stage's default asynchronous execution facility, with this 
stage's result as the argument to the supplied function. 

See the (|java.util.concurrent.CompletionStage|) documentation for rules 
covering exceptional completion. 


    fn - the function to use to compute the value of the returned CompletionStage 

    Returns: the new CompletionStage 

*java.util.concurrent.CompletionStage.thenApplyAsync(Function<?superT,?extendsU>,Executor)*

public |java.util.concurrent.CompletionStage|<U> thenApplyAsync(
  java.util.function.Function<? super T, ? extends U> fn,
  java.util.concurrent.Executor executor)

Returns a new CompletionStage that, when this stage completes normally, is 
executed using the supplied Executor, with this stage's result as the argument 
to the supplied function. 

See the (|java.util.concurrent.CompletionStage|) documentation for rules 
covering exceptional completion. 


    fn - the function to use to compute the value of the returned CompletionStage 
    executor - the executor to use for asynchronous execution 

    Returns: the new CompletionStage 

*java.util.concurrent.CompletionStage.thenCombine(CompletionStage<?extendsU>,BiFunction<?superT,?superU,?extendsV>)*

public |java.util.concurrent.CompletionStage|<V> thenCombine(
  java.util.concurrent.CompletionStage<? extends U> other,
  java.util.function.BiFunction<? super T, ? super U, ? extends V> fn)

Returns a new CompletionStage that, when this and the other given stage both 
complete normally, is executed with the two results as arguments to the 
supplied function. 

See the (|java.util.concurrent.CompletionStage|) documentation for rules 
covering exceptional completion. 


    other - the other CompletionStage 
    fn - the function to use to compute the value of the returned CompletionStage 

    Returns: the new CompletionStage 

*java.util.concurrent.CompletionStage.thenCombineAsync(CompletionStage<?extendsU>,BiFunction<?superT,?superU,?extendsV>)*

public |java.util.concurrent.CompletionStage|<V> thenCombineAsync(
  java.util.concurrent.CompletionStage<? extends U> other,
  java.util.function.BiFunction<? super T, ? super U, ? extends V> fn)

Returns a new CompletionStage that, when this and the other given stage 
complete normally, is executed using this stage's default asynchronous 
execution facility, with the two results as arguments to the supplied function. 

See the (|java.util.concurrent.CompletionStage|) documentation for rules 
covering exceptional completion. 


    other - the other CompletionStage 
    fn - the function to use to compute the value of the returned CompletionStage 

    Returns: the new CompletionStage 

*java.util.concurrent.CompletionStage.thenCombineAsync(CompletionStage<?extendsU>,BiFunction<?superT,?superU,?extendsV>,Executor)*

public |java.util.concurrent.CompletionStage|<V> thenCombineAsync(
  java.util.concurrent.CompletionStage<? extends U> other,
  java.util.function.BiFunction<? super T, ? super U, ? extends V> fn,
  java.util.concurrent.Executor executor)

Returns a new CompletionStage that, when this and the other given stage 
complete normally, is executed using the supplied executor, with the two 
results as arguments to the supplied function. 

See the (|java.util.concurrent.CompletionStage|) documentation for rules 
covering exceptional completion. 


    other - the other CompletionStage 
    fn - the function to use to compute the value of the returned CompletionStage 
    executor - the executor to use for asynchronous execution 

    Returns: the new CompletionStage 

*java.util.concurrent.CompletionStage.thenCompose(Function<?superT,?extendsCompletionStage<U>>)*

public |java.util.concurrent.CompletionStage|<U> thenCompose(java.util.function.Function<? super T, ? extends java.util.concurrent.CompletionStage<U>> fn)

Returns a new CompletionStage that, when this stage completes normally, is 
executed with this stage as the argument to the supplied function. 

See the (|java.util.concurrent.CompletionStage|) documentation for rules 
covering exceptional completion. 


    fn - the function returning a new CompletionStage 

    Returns: the CompletionStage 

*java.util.concurrent.CompletionStage.thenComposeAsync(Function<?superT,?extendsCompletionStage<U>>)*

public |java.util.concurrent.CompletionStage|<U> thenComposeAsync(java.util.function.Function<? super T, ? extends java.util.concurrent.CompletionStage<U>> fn)

Returns a new CompletionStage that, when this stage completes normally, is 
executed using this stage's default asynchronous execution facility, with this 
stage as the argument to the supplied function. 

See the (|java.util.concurrent.CompletionStage|) documentation for rules 
covering exceptional completion. 


    fn - the function returning a new CompletionStage 

    Returns: the CompletionStage 

*java.util.concurrent.CompletionStage.thenComposeAsync(Function<?superT,?extendsCompletionStage<U>>,Executor)*

public |java.util.concurrent.CompletionStage|<U> thenComposeAsync(
  java.util.function.Function<? super T, ? extends java.util.concurrent.CompletionStage<U>> fn,
  java.util.concurrent.Executor executor)

Returns a new CompletionStage that, when this stage completes normally, is 
executed using the supplied Executor, with this stage's result as the argument 
to the supplied function. 

See the (|java.util.concurrent.CompletionStage|) documentation for rules 
covering exceptional completion. 


    fn - the function returning a new CompletionStage 
    executor - the executor to use for asynchronous execution 

    Returns: the CompletionStage 

*java.util.concurrent.CompletionStage.thenRun(Runnable)*

public |java.util.concurrent.CompletionStage|<Void> thenRun(java.lang.Runnable action)

Returns a new CompletionStage that, when this stage completes normally, 
executes the given action. 

See the (|java.util.concurrent.CompletionStage|) documentation for rules 
covering exceptional completion. 


    action - the action to perform before completing the returned CompletionStage 

    Returns: the new CompletionStage 

*java.util.concurrent.CompletionStage.thenRunAsync(Runnable)*

public |java.util.concurrent.CompletionStage|<Void> thenRunAsync(java.lang.Runnable action)

Returns a new CompletionStage that, when this stage completes normally, 
executes the given action using this stage's default asynchronous execution 
facility. 

See the (|java.util.concurrent.CompletionStage|) documentation for rules 
covering exceptional completion. 


    action - the action to perform before completing the returned CompletionStage 

    Returns: the new CompletionStage 

*java.util.concurrent.CompletionStage.thenRunAsync(Runnable,Executor)*

public |java.util.concurrent.CompletionStage|<Void> thenRunAsync(
  java.lang.Runnable action,
  java.util.concurrent.Executor executor)

Returns a new CompletionStage that, when this stage completes normally, 
executes the given action using the supplied Executor. 

See the (|java.util.concurrent.CompletionStage|) documentation for rules 
covering exceptional completion. 


    action - the action to perform before completing the returned CompletionStage 
    executor - the executor to use for asynchronous execution 

    Returns: the new CompletionStage 

*java.util.concurrent.CompletionStage.toCompletableFuture()*

public |java.util.concurrent.CompletableFuture|<T> toCompletableFuture()

Returns a (|java.util.concurrent.CompletableFuture|) maintaining the same 
completion properties as this stage. If this stage is already a 
CompletableFuture, this method may return this stage itself. Otherwise, 
invocation of this method may be equivalent in effect tothenApply(x -> x), but 
returning an instance of typeCompletableFuture. A CompletionStage 
implementation that does not choose to interoperate with others may 
throwUnsupportedOperationException. 



    Returns: the CompletableFuture 

*java.util.concurrent.CompletionStage.whenComplete(BiConsumer<?superT,?superThrowable>)*

public |java.util.concurrent.CompletionStage|<T> whenComplete(java.util.function.BiConsumer<? super T, ? super java.lang.Throwable> action)

Returns a new CompletionStage with the same result or exception as this stage, 
and when this stage completes, executes the given action with the result 
(ornullif none) and the exception (ornullif none) of this stage. 


    action - the action to perform 

    Returns: the new CompletionStage 

*java.util.concurrent.CompletionStage.whenCompleteAsync(BiConsumer<?superT,?superThrowable>)*

public |java.util.concurrent.CompletionStage|<T> whenCompleteAsync(java.util.function.BiConsumer<? super T, ? super java.lang.Throwable> action)

Returns a new CompletionStage with the same result or exception as this stage, 
and when this stage completes, executes the given action executes the given 
action using this stage's default asynchronous execution facility, with the 
result (ornullif none) and the exception (ornullif none) of this stage as 
arguments. 


    action - the action to perform 

    Returns: the new CompletionStage 

*java.util.concurrent.CompletionStage.whenCompleteAsync(BiConsumer<?superT,?superThrowable>,Executor)*

public |java.util.concurrent.CompletionStage|<T> whenCompleteAsync(
  java.util.function.BiConsumer<? super T, ? super java.lang.Throwable> action,
  java.util.concurrent.Executor executor)

Returns a new CompletionStage with the same result or exception as this stage, 
and when this stage completes, executes using the supplied Executor, the given 
action with the result (ornullif none) and the exception (ornullif none) of 
this stage as arguments. 


    action - the action to perform 
    executor - the executor to use for asynchronous execution 

    Returns: the new CompletionStage 


