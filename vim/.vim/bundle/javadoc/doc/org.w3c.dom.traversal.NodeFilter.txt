*org.w3c.dom.traversal.NodeFilter* *NodeFilter* Filters are objects that know ho

public interface interface NodeFilter


|org.w3c.dom.traversal.NodeFilter_Description|
|org.w3c.dom.traversal.NodeFilter_Fields|
|org.w3c.dom.traversal.NodeFilter_Constructors|
|org.w3c.dom.traversal.NodeFilter_Methods|

================================================================================

*org.w3c.dom.traversal.NodeFilter_Fields*
|short_org.w3c.dom.traversal.NodeFilter.FILTER_ACCEPT|
|short_org.w3c.dom.traversal.NodeFilter.FILTER_REJECT|
|short_org.w3c.dom.traversal.NodeFilter.FILTER_SKIP|
|int_org.w3c.dom.traversal.NodeFilter.SHOW_ALL|
|int_org.w3c.dom.traversal.NodeFilter.SHOW_ATTRIBUTE|
|int_org.w3c.dom.traversal.NodeFilter.SHOW_CDATA_SECTION|
|int_org.w3c.dom.traversal.NodeFilter.SHOW_COMMENT|
|int_org.w3c.dom.traversal.NodeFilter.SHOW_DOCUMENT|
|int_org.w3c.dom.traversal.NodeFilter.SHOW_DOCUMENT_FRAGMENT|
|int_org.w3c.dom.traversal.NodeFilter.SHOW_DOCUMENT_TYPE|
|int_org.w3c.dom.traversal.NodeFilter.SHOW_ELEMENT|
|int_org.w3c.dom.traversal.NodeFilter.SHOW_ENTITY|
|int_org.w3c.dom.traversal.NodeFilter.SHOW_ENTITY_REFERENCE|
|int_org.w3c.dom.traversal.NodeFilter.SHOW_NOTATION|
|int_org.w3c.dom.traversal.NodeFilter.SHOW_PROCESSING_INSTRUCTION|
|int_org.w3c.dom.traversal.NodeFilter.SHOW_TEXT|

*org.w3c.dom.traversal.NodeFilter_Methods*
|org.w3c.dom.traversal.NodeFilter.acceptNode(Node)|Test whether a specified nod

*org.w3c.dom.traversal.NodeFilter_Description*

Filters are objects that know how to "filter out" nodes. If a NodeIterator or 
TreeWalker is given a NodeFilter, it applies the filter before it returns the 
next node. If the filter says to accept the node, the traversal logic returns 
it; otherwise, traversal looks for the next node and pretends that the node 
that was rejected was not there. The DOM does not provide any filters. 
NodeFilter is just an interface that users can implement to provide their own 
filters. NodeFilters do not need to know how to traverse from node to node, nor 
do they need to know anything about the data structure that is being traversed. 
This makes it very easy to write filters, since the only thing they have to 
know how to do is evaluate a single node. One filter may be used with a number 
of different kinds of traversals, encouraging code reuse. See also the Document 
Object Model (DOM) Level 2 Traversal and Range Specification. 



*short_org.w3c.dom.traversal.NodeFilter.FILTER_ACCEPT*

Accept the node. Navigation methods defined for NodeIterator or TreeWalker will 
return this node. 


*short_org.w3c.dom.traversal.NodeFilter.FILTER_REJECT*

Reject the node. Navigation methods defined for NodeIterator or TreeWalker will 
not return this node. For TreeWalker, the children of this node will also be 
rejected. NodeIterators treat this as a synonym for FILTER_SKIP. 


*short_org.w3c.dom.traversal.NodeFilter.FILTER_SKIP*

Skip this single node. Navigation methods defined for NodeIterator or 
TreeWalker will not return this node. For both NodeIterator and TreeWalker, the 
children of this node will still be considered. 


*int_org.w3c.dom.traversal.NodeFilter.SHOW_ALL*

Show all Nodes. 


*int_org.w3c.dom.traversal.NodeFilter.SHOW_ATTRIBUTE*

Show Attr nodes. This is meaningful only when creating an NodeIterator or 
TreeWalker with an attribute node as its root; in this case, it means that the 
attribute node will appear in the first position of the iteration or traversal. 
Since attributes are never children of other nodes, they do not appear when 
traversing over the document tree. 


*int_org.w3c.dom.traversal.NodeFilter.SHOW_CDATA_SECTION*

Show CDATASection nodes. 


*int_org.w3c.dom.traversal.NodeFilter.SHOW_COMMENT*

Show Comment nodes. 


*int_org.w3c.dom.traversal.NodeFilter.SHOW_DOCUMENT*

Show Document nodes. 


*int_org.w3c.dom.traversal.NodeFilter.SHOW_DOCUMENT_FRAGMENT*

Show DocumentFragment nodes. 


*int_org.w3c.dom.traversal.NodeFilter.SHOW_DOCUMENT_TYPE*

Show DocumentType nodes. 


*int_org.w3c.dom.traversal.NodeFilter.SHOW_ELEMENT*

Show Element nodes. 


*int_org.w3c.dom.traversal.NodeFilter.SHOW_ENTITY*

Show Entity nodes. This is meaningful only when creating an NodeIterator or 
TreeWalker with an Entity node as its root; in this case, it means that the 
Entity node will appear in the first position of the traversal. Since entities 
are not part of the document tree, they do not appear when traversing over the 
document tree. 


*int_org.w3c.dom.traversal.NodeFilter.SHOW_ENTITY_REFERENCE*

Show EntityReference nodes. 


*int_org.w3c.dom.traversal.NodeFilter.SHOW_NOTATION*

Show Notation nodes. This is meaningful only when creating an NodeIterator or 
TreeWalker with a Notation node as its root; in this case, it means that the 
Notation node will appear in the first position of the traversal. Since 
notations are not part of the document tree, they do not appear when traversing 
over the document tree. 


*int_org.w3c.dom.traversal.NodeFilter.SHOW_PROCESSING_INSTRUCTION*

Show ProcessingInstruction nodes. 


*int_org.w3c.dom.traversal.NodeFilter.SHOW_TEXT*

Show Text nodes. 



*org.w3c.dom.traversal.NodeFilter.acceptNode(Node)*

public short acceptNode(org.w3c.dom.Node n)

Test whether a specified node is visible in the logical view of a TreeWalker or 
NodeIterator. This function will be called by the implementation of TreeWalker 
and NodeIterator; it is not normally called directly from user code. (Though 
you could do so if you wanted to use the same filter to guide your own 
application logic.) 


    n - The node to check to see if it passes the filter or not. 

    Returns: A constant to determine whether the node is accepted, rejected, or skipped, as 
             defined above. 


