*java.util.concurrent.atomic.DoubleAccumulator* *DoubleAccumulator* One or more 

public class DoubleAccumulator
  extends    |java.util.concurrent.atomic.Striped64|
  implements |java.io.Serializable|

|java.util.concurrent.atomic.DoubleAccumulator_Description|
|java.util.concurrent.atomic.DoubleAccumulator_Fields|
|java.util.concurrent.atomic.DoubleAccumulator_Constructors|
|java.util.concurrent.atomic.DoubleAccumulator_Methods|

================================================================================

*java.util.concurrent.atomic.DoubleAccumulator_Constructors*
|java.util.concurrent.atomic.DoubleAccumulator(DoubleBinaryOperator,double)|Cre

*java.util.concurrent.atomic.DoubleAccumulator_Methods*
|java.util.concurrent.atomic.DoubleAccumulator.accumulate(double)|Updates with 
|java.util.concurrent.atomic.DoubleAccumulator.doubleValue()|Equivalent to#get.
|java.util.concurrent.atomic.DoubleAccumulator.floatValue()|Returns the#get cur
|java.util.concurrent.atomic.DoubleAccumulator.get()|Returns the current value.
|java.util.concurrent.atomic.DoubleAccumulator.getThenReset()|Equivalent in eff
|java.util.concurrent.atomic.DoubleAccumulator.intValue()|Returns the#get curre
|java.util.concurrent.atomic.DoubleAccumulator.longValue()|Returns the#get curr
|java.util.concurrent.atomic.DoubleAccumulator.reset()|Resets variables maintai
|java.util.concurrent.atomic.DoubleAccumulator.toString()|Returns the String re

*java.util.concurrent.atomic.DoubleAccumulator_Description*

One or more variables that together maintain a runningdoublevalue updated using 
a supplied function. When updates (method 
(|java.util.concurrent.atomic.DoubleAccumulator|) ) are contended across 
threads, the set of variables may grow dynamically to reduce contention. Method 
(|java.util.concurrent.atomic.DoubleAccumulator|) (or, equivalently, 
(|java.util.concurrent.atomic.DoubleAccumulator|) ) returns the current value 
across the variables maintaining updates. 

This class is usually preferable to alternatives when multiple threads update a 
common value that is used for purposes such as summary statistics that are 
frequently updated but less frequently read. 

The supplied accumulator function should be side-effect-free, since it may be 
re-applied when attempted updates fail due to contention among threads. The 
function is applied with the current value as its first argument, and the given 
update as the second argument. For example, to maintain a running maximum 
value, you could supplyDouble::maxalong withDouble.NEGATIVE_INFINITYas the 
identity. The order of accumulation within or across threads is not guaranteed. 
Thus, this class may not be applicable if numerical stability is required, 
especially when combining values of substantially different orders of 
magnitude. 

Class (|java.util.concurrent.atomic.DoubleAdder|) provides analogs of the 
functionality of this class for the common special case of maintaining sums. 
The callnew DoubleAdder()is equivalent tonew DoubleAccumulator((x, y) -> x + y, 
0.0). 

This class extends (|java.lang.Number|) , but does not define methods such 
asequals,hashCodeandcompareTobecause instances are expected to be mutated, and 
so are not useful as collection keys. 



*java.util.concurrent.atomic.DoubleAccumulator(DoubleBinaryOperator,double)*

public DoubleAccumulator(
  java.util.function.DoubleBinaryOperator accumulatorFunction,
  double identity)

Creates a new instance using the given accumulator function and identity 
element. 

    accumulatorFunction - a side-effect-free function of two arguments 
    identity - identity (initial value) for the accumulator function 

*java.util.concurrent.atomic.DoubleAccumulator.accumulate(double)*

public void accumulate(double x)

Updates with the given value. 


    x - the value 

*java.util.concurrent.atomic.DoubleAccumulator.doubleValue()*

public double doubleValue()

Equivalent to (|java.util.concurrent.atomic.DoubleAccumulator|) . 



    Returns: the current value 

*java.util.concurrent.atomic.DoubleAccumulator.floatValue()*

public float floatValue()

Returns the current value(|java.util.concurrent.atomic.DoubleAccumulator|) as 
afloatafter a narrowing primitive conversion. 



*java.util.concurrent.atomic.DoubleAccumulator.get()*

public double get()

Returns the current value. The returned value is NOT an atomic snapshot; 
invocation in the absence of concurrent updates returns an accurate result, but 
concurrent updates that occur while the value is being calculated might not be 
incorporated. 



    Returns: the current value 

*java.util.concurrent.atomic.DoubleAccumulator.getThenReset()*

public double getThenReset()

Equivalent in effect to (|java.util.concurrent.atomic.DoubleAccumulator|) 
followed by (|java.util.concurrent.atomic.DoubleAccumulator|) . This method may 
apply for example during quiescent points between multithreaded computations. 
If there are updates concurrent with this method, the returned value is not 
guaranteed to be the final value occurring before the reset. 



    Returns: the value before reset 

*java.util.concurrent.atomic.DoubleAccumulator.intValue()*

public int intValue()

Returns the current value(|java.util.concurrent.atomic.DoubleAccumulator|) as 
anintafter a narrowing primitive conversion. 



*java.util.concurrent.atomic.DoubleAccumulator.longValue()*

public long longValue()

Returns the current value(|java.util.concurrent.atomic.DoubleAccumulator|) as 
alongafter a narrowing primitive conversion. 



*java.util.concurrent.atomic.DoubleAccumulator.reset()*

public void reset()

Resets variables maintaining updates to the identity value. This method may be 
a useful alternative to creating a new updater, but is only effective if there 
are no concurrent updates. Because this method is intrinsically racy, it should 
only be used when it is known that no threads are concurrently updating. 



*java.util.concurrent.atomic.DoubleAccumulator.toString()*

public |java.lang.String| toString()

Returns the String representation of the current value. 



    Returns: the String representation of the current value 


