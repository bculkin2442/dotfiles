*java.io.StreamTokenizer* *StreamTokenizer* TheStreamTokenizerclass takes an inp

public class StreamTokenizer
  extends    |java.lang.Object|

|java.io.StreamTokenizer_Description|
|java.io.StreamTokenizer_Fields|
|java.io.StreamTokenizer_Constructors|
|java.io.StreamTokenizer_Methods|

================================================================================

*java.io.StreamTokenizer_Fields*
|double_java.io.StreamTokenizer.nval|
|java.lang.String_java.io.StreamTokenizer.sval|
|int_java.io.StreamTokenizer.TT_EOF|
|int_java.io.StreamTokenizer.TT_EOL|
|int_java.io.StreamTokenizer.TT_NUMBER|
|int_java.io.StreamTokenizer.TT_WORD|
|int_java.io.StreamTokenizer.ttype|

*java.io.StreamTokenizer_Constructors*
|java.io.StreamTokenizer(InputStream)|Creates a stream tokenizer that parses th
|java.io.StreamTokenizer(Reader)|Create a tokenizer that parses the given chara

*java.io.StreamTokenizer_Methods*
|java.io.StreamTokenizer.commentChar(int)|Specified that the character argument
|java.io.StreamTokenizer.eolIsSignificant(boolean)|Determines whether or not en
|java.io.StreamTokenizer.lineno()|Return the current line number.
|java.io.StreamTokenizer.lowerCaseMode(boolean)|Determines whether or not word 
|java.io.StreamTokenizer.nextToken()|Parses the next token from the input strea
|java.io.StreamTokenizer.ordinaryChar(int)|Specifies that the character argumen
|java.io.StreamTokenizer.ordinaryChars(int,int)|Specifies that all characters c
|java.io.StreamTokenizer.parseNumbers()|Specifies that numbers should be parsed
|java.io.StreamTokenizer.pushBack()|Causes the next call to thenextTokenmethod 
|java.io.StreamTokenizer.quoteChar(int)|Specifies that matching pairs of this c
|java.io.StreamTokenizer.resetSyntax()|Resets this tokenizer's syntax table so 
|java.io.StreamTokenizer.slashSlashComments(boolean)|Determines whether or not 
|java.io.StreamTokenizer.slashStarComments(boolean)|Determines whether or not t
|java.io.StreamTokenizer.toString()|Returns the string representation of the cu
|java.io.StreamTokenizer.whitespaceChars(int,int)|Specifies that all characters
|java.io.StreamTokenizer.wordChars(int,int)|Specifies that all characters c in 

*java.io.StreamTokenizer_Description*

TheStreamTokenizerclass takes an input stream and parses it into "tokens", 
allowing the tokens to be read one at a time. The parsing process is controlled 
by a table and a number of flags that can be set to various states. The stream 
tokenizer can recognize identifiers, numbers, quoted strings, and various 
comment styles. 

Each byte read from the input stream is regarded as a character in the 
range'\u0000'through'\u00FF'. The character value is used to look up five 
possible attributes of the character: white space, alphabetic, numeric, string 
quote, and comment character. Each character can have zero or more of these 
attributes. 

In addition, an instance has four flags. These flags indicate: 

Whether line terminators are to be returned as tokens or treated as white space 
that merely separates tokens. Whether C-style comments are to be recognized and 
skipped. Whether C++-style comments are to be recognized and skipped. Whether 
the characters of identifiers are converted to lowercase. 

A typical application first constructs an instance of this class, sets up the 
syntax tables, and then repeatedly loops calling thenextTokenmethod in each 
iteration of the loop until it returns the valueTT_EOF. 



*double_java.io.StreamTokenizer.nval*

If the current token is a number, this field contains the value of that number. 
The current token is a number when the value of thettypefield isTT_NUMBER. 

The initial value of this field is 0.0. 


*java.lang.String_java.io.StreamTokenizer.sval*

If the current token is a word token, this field contains a string giving the 
characters of the word token. When the current token is a quoted string token, 
this field contains the body of the string. 

The current token is a word when the value of thettypefield isTT_WORD. The 
current token is a quoted string token when the value of thettypefield is a 
quote character. 

The initial value of this field is null. 


*int_java.io.StreamTokenizer.TT_EOF*

A constant indicating that the end of the stream has been read. 


*int_java.io.StreamTokenizer.TT_EOL*

A constant indicating that the end of the line has been read. 


*int_java.io.StreamTokenizer.TT_NUMBER*

A constant indicating that a number token has been read. 


*int_java.io.StreamTokenizer.TT_WORD*

A constant indicating that a word token has been read. 


*int_java.io.StreamTokenizer.ttype*

After a call to thenextTokenmethod, this field contains the type of the token 
just read. For a single character token, its value is the single character, 
converted to an integer. For a quoted string token, its value is the quote 
character. Otherwise, its value is one of the following: 

TT_WORDindicates that the token is a word. TT_NUMBERindicates that the token is 
a number. TT_EOLindicates that the end of line has been read. The field can 
only have this value if theeolIsSignificantmethod has been called with the 
argumenttrue. TT_EOFindicates that the end of the input stream has been 
reached. 

The initial value of this field is -4. 



*java.io.StreamTokenizer(InputStream)*

public StreamTokenizer(java.io.InputStream is)

Creates a stream tokenizer that parses the specified input stream. The stream 
tokenizer is initialized to the following default state: 

All byte values'A'through'Z','a'through'z', and'\u00A0'through'\u00FF'are 
considered to be alphabetic. All byte values'\u0000'through'\u0020'are 
considered to be white space. '/'is a comment character. Single quote'\''and 
double quote'"'are string quote characters. Numbers are parsed. Ends of lines 
are treated as white space, not as separate tokens. C-style and C++-style 
comments are not recognized. 

    is - an input stream. 

*java.io.StreamTokenizer(Reader)*

public StreamTokenizer(java.io.Reader r)

Create a tokenizer that parses the given character stream. 

    r - a Reader object providing the input stream. 

*java.io.StreamTokenizer.commentChar(int)*

public void commentChar(int ch)

Specified that the character argument starts a single-line comment. All 
characters from the comment character to the end of the line are ignored by 
this stream tokenizer. 

Any other attribute settings for the specified character are cleared. 


    ch - the character. 

*java.io.StreamTokenizer.eolIsSignificant(boolean)*

public void eolIsSignificant(boolean flag)

Determines whether or not ends of line are treated as tokens. If the flag 
argument is true, this tokenizer treats end of lines as tokens; 
thenextTokenmethod returnsTT_EOLand also sets thettypefield to this value when 
an end of line is read. 

A line is a sequence of characters ending with either a carriage-return 
character ('\r') or a newline character ('\n'). In addition, a carriage-return 
character followed immediately by a newline character is treated as a single 
end-of-line token. 

If theflagis false, end-of-line characters are treated as white space and serve 
only to separate tokens. 


    flag - {@code true} indicates that end-of-line characters are separate tokens; {@code 
       false} indicates that end-of-line characters are white space. 

*java.io.StreamTokenizer.lineno()*

public int lineno()

Return the current line number. 



    Returns: the current line number of this stream tokenizer. 

*java.io.StreamTokenizer.lowerCaseMode(boolean)*

public void lowerCaseMode(boolean fl)

Determines whether or not word token are automatically lowercased. If the flag 
argument istrue, then the value in thesvalfield is lowercased whenever a word 
token is returned (thettypefield has the valueTT_WORDby thenextTokenmethod of 
this tokenizer. 

If the flag argument isfalse, then thesvalfield is not modified. 


    fl - {@code true} indicates that all word tokens should be lowercased. 

*java.io.StreamTokenizer.nextToken()*

public int nextToken()
  throws |java.io.IOException|
         
Parses the next token from the input stream of this tokenizer. The type of the 
next token is returned in thettypefield. Additional information about the token 
may be in thenvalfield or thesvalfield of this tokenizer. 

Typical clients of this class first set up the syntax tables and then sit in a 
loop calling nextToken to parse successive tokens until TT_EOF is returned. 



    Returns: the value of the {@code ttype} field. 

*java.io.StreamTokenizer.ordinaryChar(int)*

public void ordinaryChar(int ch)

Specifies that the character argument is "ordinary" in this tokenizer. It 
removes any special significance the character has as a comment character, word 
component, string delimiter, white space, or number character. When such a 
character is encountered by the parser, the parser treats it as a 
single-character token and setsttypefield to the character value. 

Making a line terminator character "ordinary" may interfere with the ability of 
aStreamTokenizerto count lines. Thelinenomethod may no longer reflect the 
presence of such terminator characters in its line count. 


    ch - the character. 

*java.io.StreamTokenizer.ordinaryChars(int,int)*

public void ordinaryChars(
  int low,
  int hi)

Specifies that all characters c in the range low<=c<=high are "ordinary" in 
this tokenizer. See theordinaryCharmethod for more information on a character 
being ordinary. 


    low - the low end of the range. 
    hi - the high end of the range. 

*java.io.StreamTokenizer.parseNumbers()*

public void parseNumbers()

Specifies that numbers should be parsed by this tokenizer. The syntax table of 
this tokenizer is modified so that each of the twelve characters: 

0 1 2 3 4 5 6 7 8 9 . - 

has the "numeric" attribute. 

When the parser encounters a word token that has the format of a double 
precision floating-point number, it treats the token as a number rather than a 
word, by setting thettypefield to the valueTT_NUMBERand putting the numeric 
value of the token into thenvalfield. 



*java.io.StreamTokenizer.pushBack()*

public void pushBack()

Causes the next call to thenextTokenmethod of this tokenizer to return the 
current value in thettypefield, and not to modify the value in 
thenvalorsvalfield. 



*java.io.StreamTokenizer.quoteChar(int)*

public void quoteChar(int ch)

Specifies that matching pairs of this character delimit string constants in 
this tokenizer. 

When thenextTokenmethod encounters a string constant, thettypefield is set to 
the string delimiter and thesvalfield is set to the body of the string. 

If a string quote character is encountered, then a string is recognized, 
consisting of all characters after (but not including) the string quote 
character, up to (but not including) the next occurrence of that same string 
quote character, or a line terminator, or end of file. The usual escape 
sequences such as"\n"and"\t"are recognized and converted to single characters 
as the string is parsed. 

Any other attribute settings for the specified character are cleared. 


    ch - the character. 

*java.io.StreamTokenizer.resetSyntax()*

public void resetSyntax()

Resets this tokenizer's syntax table so that all characters are "ordinary." See 
theordinaryCharmethod for more information on a character being ordinary. 



*java.io.StreamTokenizer.slashSlashComments(boolean)*

public void slashSlashComments(boolean flag)

Determines whether or not the tokenizer recognizes C++-style comments. If the 
flag argument istrue, this stream tokenizer recognizes C++-style comments. Any 
occurrence of two consecutive slash characters ('/') is treated as the 
beginning of a comment that extends to the end of the line. 

If the flag argument isfalse, then C++-style comments are not treated 
specially. 


    flag - {@code true} indicates to recognize and ignore C++-style comments. 

*java.io.StreamTokenizer.slashStarComments(boolean)*

public void slashStarComments(boolean flag)

Determines whether or not the tokenizer recognizes C-style comments. If the 
flag argument istrue, this stream tokenizer recognizes C-style comments. All 
text between successive occurrences of/*and * are discarded. 

If the flag argument isfalse, then C-style comments are not treated specially. 


    flag - {@code true} indicates to recognize and ignore C-style comments. 

*java.io.StreamTokenizer.toString()*

public |java.lang.String| toString()

Returns the string representation of the current stream token and the line 
number it occurs on. 

The precise string returned is unspecified, although the following example can 
be considered typical: 

Token['a'], line 10 



    Returns: a string representation of the token 

*java.io.StreamTokenizer.whitespaceChars(int,int)*

public void whitespaceChars(
  int low,
  int hi)

Specifies that all characters c in the range low<=c<=high are white space 
characters. White space characters serve only to separate tokens in the input 
stream. 

Any other attribute settings for the characters in the specified range are 
cleared. 


    low - the low end of the range. 
    hi - the high end of the range. 

*java.io.StreamTokenizer.wordChars(int,int)*

public void wordChars(
  int low,
  int hi)

Specifies that all characters c in the range low<=c<=high are word 
constituents. A word token consists of a word constituent followed by zero or 
more word constituents or number constituents. 


    low - the low end of the range. 
    hi - the high end of the range. 


