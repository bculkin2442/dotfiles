*java.sql.DriverAction* *DriverAction* An interface that must be implemented whe

public interface interface DriverAction


|java.sql.DriverAction_Description|
|java.sql.DriverAction_Fields|
|java.sql.DriverAction_Constructors|
|java.sql.DriverAction_Methods|

================================================================================

*java.sql.DriverAction_Methods*
|java.sql.DriverAction.deregister()|Method called byDriverManager#deregisterDri

*java.sql.DriverAction_Description*

An interface that must be implemented when a (|java.sql.Driver|) wants to be 
notified byDriverManager. 

ADriverActionimplementation is not intended to be used directly by 
applications. A JDBC Driver may choose to create itsDriverActionimplementation 
in a private class to avoid it being called directly. 

The JDBC driver's static initialization block must call 
(|java.sql.DriverManager|) in order to 
informDriverManagerwhichDriverActionimplementation to call when the JDBC driver 
is de-registered. 



*java.sql.DriverAction.deregister()*

public void deregister()

Method called by (|java.sql.DriverManager|) to notify the JDBC driver that it 
was de-registered. 

Thederegistermethod is intended only to be used by JDBC Drivers and not by 
applications. JDBC drivers are recommended to not implementDriverActionin a 
public class. If there are active connections to the database at the time that 
thederegistermethod is called, it is implementation specific as to whether the 
connections are closed or allowed to continue. Once this method is called, it 
is implementation specific as to whether the driver may limit the ability to 
create new connections to the database, invoke otherDrivermethods or throw 
aSQLException. Consult your JDBC driver's documentation for additional 
information on its behavior. 




