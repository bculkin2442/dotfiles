*java.time.chrono.AbstractChronology* *AbstractChronology* An abstract implement

public abstract class AbstractChronology
  extends    |java.lang.Object|
  implements |java.time.chrono.Chronology|

|java.time.chrono.AbstractChronology_Description|
|java.time.chrono.AbstractChronology_Fields|
|java.time.chrono.AbstractChronology_Constructors|
|java.time.chrono.AbstractChronology_Methods|

================================================================================

*java.time.chrono.AbstractChronology_Constructors*
|java.time.chrono.AbstractChronology()|Creates an instance.

*java.time.chrono.AbstractChronology_Methods*
|java.time.chrono.AbstractChronology.compareTo(Chronology)|Compares this chrono
|java.time.chrono.AbstractChronology.equals(Object)|Checks if this chronology i
|java.time.chrono.AbstractChronology.hashCode()|A hash code for this chronology
|java.time.chrono.AbstractChronology.resolveDate(Map<TemporalField,Long>,ResolverStyle)|
|java.time.chrono.AbstractChronology.toString()|Outputs this chronology as aStr

*java.time.chrono.AbstractChronology_Description*

An abstract implementation of a calendar system, used to organize and identify 
dates. 

The main date and time API is built on the ISO calendar system. The chronology 
operates behind the scenes to represent the general concept of a calendar 
system. 

See (|java.time.chrono.Chronology|) for more details. 



*java.time.chrono.AbstractChronology()*

protected AbstractChronology()

Creates an instance. 


*java.time.chrono.AbstractChronology.compareTo(Chronology)*

public int compareTo(java.time.chrono.Chronology other)

Compares this chronology to another chronology. 

The comparison order first by the chronology ID string, then by any additional 
information specific to the subclass. It is "consistent with equals", as 
defined by (|java.lang.Comparable|) . 


    other - the other chronology to compare to, not null 

    Returns: the comparator value, negative if less, positive if greater 

*java.time.chrono.AbstractChronology.equals(Object)*

public boolean equals(java.lang.Object obj)

Checks if this chronology is equal to another chronology. 

The comparison is based on the entire state of the object. 


    obj - the object to check, null returns false 

    Returns: true if this is equal to the other chronology 

*java.time.chrono.AbstractChronology.hashCode()*

public int hashCode()

A hash code for this chronology. 

The hash code should be based on the entire state of the object. 



    Returns: a suitable hash code 

*java.time.chrono.AbstractChronology.resolveDate(Map<TemporalField,Long>,ResolverStyle)*

public |java.time.chrono.ChronoLocalDate| resolveDate(
  java.util.Map<java.time.temporal.TemporalField, java.lang.Long> fieldValues,
  java.time.format.ResolverStyle resolverStyle)

Resolves parsedChronoFieldvalues into a date during parsing. 

MostTemporalFieldimplementations are resolved using the resolve method on the 
field. By contrast, theChronoFieldclass defines fields that only have meaning 
relative to the chronology. As such,ChronoFielddate fields are resolved here in 
the context of a specific chronology. ChronoFieldinstances are resolved by this 
method, which may be overridden in subclasses. 

EPOCH_DAY- If present, this is converted to a date and all other date fields 
are then cross-checked against the date. PROLEPTIC_MONTH- If present, then it 
is split into theYEARandMONTH_OF_YEAR. If the mode is strict or smart then the 
field is validated. YEAR_OF_ERAandERA- If both are present, then they are 
combined to form aYEAR. In lenient mode, theYEAR_OF_ERArange is not validated, 
in smart and strict mode it is. TheERAis validated for range in all three 
modes. If only theYEAR_OF_ERAis present, and the mode is smart or lenient, then 
the last available era is assumed. In strict mode, no era is assumed and 
theYEAR_OF_ERAis left untouched. If only theERAis present, then it is left 
untouched. YEAR,MONTH_OF_YEARandDAY_OF_MONTH- If all three are present, then 
they are combined to form a date. In all three modes, theYEARis validated. If 
the mode is smart or strict, then the month and day are validated. If the mode 
is lenient, then the date is combined in a manner equivalent to creating a date 
on the first day of the first month in the requested year, then adding the 
difference in months, then the difference in days. If the mode is smart, and 
the day-of-month is greater than the maximum for the year-month, then the 
day-of-month is adjusted to the last day-of-month. If the mode is strict, then 
the three fields must form a valid date. YEARandDAY_OF_YEAR- If both are 
present, then they are combined to form a date. In all three modes, theYEARis 
validated. If the mode is lenient, then the date is combined in a manner 
equivalent to creating a date on the first day of the requested year, then 
adding the difference in days. If the mode is smart or strict, then the two 
fields must form a valid date. 
YEAR,MONTH_OF_YEAR,ALIGNED_WEEK_OF_MONTHandALIGNED_DAY_OF_WEEK_IN_MONTH- If all 
four are present, then they are combined to form a date. In all three modes, 
theYEARis validated. If the mode is lenient, then the date is combined in a 
manner equivalent to creating a date on the first day of the first month in the 
requested year, then adding the difference in months, then the difference in 
weeks, then in days. If the mode is smart or strict, then the all four fields 
are validated to their outer ranges. The date is then combined in a manner 
equivalent to creating a date on the first day of the requested year and month, 
then adding the amount in weeks and days to reach their values. If the mode is 
strict, the date is additionally validated to check that the day and week 
adjustment did not change the month. 
YEAR,MONTH_OF_YEAR,ALIGNED_WEEK_OF_MONTHandDAY_OF_WEEK- If all four are 
present, then they are combined to form a date. The approach is the same as 
described above for years, months and weeks inALIGNED_DAY_OF_WEEK_IN_MONTH. The 
day-of-week is adjusted as the next or same matching day-of-week once the 
years, months and weeks have been handled. 
YEAR,ALIGNED_WEEK_OF_YEARandALIGNED_DAY_OF_WEEK_IN_YEAR- If all three are 
present, then they are combined to form a date. In all three modes, theYEARis 
validated. If the mode is lenient, then the date is combined in a manner 
equivalent to creating a date on the first day of the requested year, then 
adding the difference in weeks, then in days. If the mode is smart or strict, 
then the all three fields are validated to their outer ranges. The date is then 
combined in a manner equivalent to creating a date on the first day of the 
requested year, then adding the amount in weeks and days to reach their values. 
If the mode is strict, the date is additionally validated to check that the day 
and week adjustment did not change the year. 
YEAR,ALIGNED_WEEK_OF_YEARandDAY_OF_WEEK- If all three are present, then they 
are combined to form a date. The approach is the same as described above for 
years and weeks inALIGNED_DAY_OF_WEEK_IN_YEAR. The day-of-week is adjusted as 
the next or same matching day-of-week once the years and weeks have been 
handled. 

The default implementation is suitable for most calendar systems. If 
(|java.time.temporal.ChronoField|) is found without an 
(|java.time.temporal.ChronoField|) then the last era in 
(|java.time.chrono.AbstractChronology|) is used. The implementation assumes a 7 
day week, that the first day-of-month has the value 1, that first day-of-year 
has the value 1, and that the first of the month and year always exists. 


    fieldValues - the map of fields to values, which can be updated, not null 
    resolverStyle - the requested type of resolve, not null 

    Returns: the resolved date, null if insufficient information to create a date 

*java.time.chrono.AbstractChronology.toString()*

public |java.lang.String| toString()

Outputs this chronology as aString, using the chronology ID. 



    Returns: a string representation of this chronology, not null 


