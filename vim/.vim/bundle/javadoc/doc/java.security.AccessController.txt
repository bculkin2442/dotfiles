*java.security.AccessController* *AccessController*  The AccessController class 

public final class AccessController
  extends    |java.lang.Object|

|java.security.AccessController_Description|
|java.security.AccessController_Fields|
|java.security.AccessController_Constructors|
|java.security.AccessController_Methods|

================================================================================

*java.security.AccessController_Methods*
|java.security.AccessController.checkPermission(Permission)|Determines whether 
|java.security.AccessController.doPrivileged(PrivilegedAction<T>)|Performs the 
|java.security.AccessController.doPrivileged(PrivilegedAction<T>,AccessControlContext)|
|java.security.AccessController.doPrivileged(PrivilegedAction<T>,AccessControlContext,Permission...)|
|java.security.AccessController.doPrivileged(PrivilegedExceptionAction<T>)|Perf
|java.security.AccessController.doPrivileged(PrivilegedExceptionAction<T>,AccessControlContext)|
|java.security.AccessController.doPrivileged(PrivilegedExceptionAction<T>,AccessControlContext,Permission...)|
|java.security.AccessController.doPrivilegedWithCombiner(PrivilegedAction<T>)|P
|java.security.AccessController.doPrivilegedWithCombiner(PrivilegedAction<T>,AccessControlContext,Permission...)|
|java.security.AccessController.doPrivilegedWithCombiner(PrivilegedExceptionAction<T>)|
|java.security.AccessController.doPrivilegedWithCombiner(PrivilegedExceptionAction<T>,AccessControlContext,Permission...)|
|java.security.AccessController.getContext()|This method takes a "snapshot" of 

*java.security.AccessController_Description*

The AccessController class is used for access control operations and decisions. 

More specifically, the AccessController class is used for three purposes: 

to decide whether an access to a critical system resource is to be allowed or 
denied, based on the security policy currently in effect, to mark code as being 
"privileged", thus affecting subsequent access determinations, and to obtain a 
"snapshot" of the current calling context so access-control decisions from a 
different context can be made with respect to the saved context. 

The checkPermission(|java.security.AccessController|) method determines whether 
the access request indicated by a specified permission should be granted or 
denied. A sample call appears below. In this example,checkPermissionwill 
determine whether or not to grant "read" access to the file named "testFile" in 
the "/temp" directory. 



FilePermission perm = new FilePermission("/temp/testFile", "read"); 
AccessController.checkPermission(perm); 



If a requested access is allowed,checkPermissionreturns quietly. If denied, an 
AccessControlException is thrown. AccessControlException can also be thrown if 
the requested permission is of an incorrect type or contains an invalid value. 
Such information is given whenever possible. 

Suppose the current thread traversed m callers, in the order of caller 1 to 
caller 2 to caller m. Then caller m invoked thecheckPermissionmethod. 
ThecheckPermissionmethod determines whether access is granted or denied based 
on the following algorithm: 

for (int i = m; i > 0; i--) { 

if (caller i's domain does not have the permission) throw 
AccessControlException 

else if (caller i is marked as privileged) { if (a context was specified in the 
call to doPrivileged) context.checkPermission(permission) if (limited 
permissions were specified in the call to doPrivileged) { for (each limited 
permission) { if (the limited permission implies the requested permission) 
return; } } else return; } } 

// Next, check the context inherited when the thread was created. // Whenever a 
new thread is created, the AccessControlContext at // that time is stored and 
associated with the new thread, as the // "inherited" context. 

inheritedContext.checkPermission(permission); 

A caller can be marked as being "privileged" (see 
doPrivileged(|java.security.AccessController|) and below). When making access 
control decisions, thecheckPermissionmethod stops checking if it reaches a 
caller that was marked as "privileged" via adoPrivilegedcall without a context 
argument (see below for information about a context argument). If that caller's 
domain has the specified permission and at least one limiting permission 
argument (if any) implies the requested permission, no further checking is done 
andcheckPermissionreturns quietly, indicating that the requested access is 
allowed. If that domain does not have the specified permission, an exception is 
thrown, as usual. If the caller's domain had the specified permission but it 
was not implied by any limiting permission arguments given in the call 
todoPrivilegedthen the permission checking continues until there are no more 
callers or anotherdoPrivilegedcall matches the requested permission and returns 
normally. 

The normal use of the "privileged" feature is as follows. If you don't need to 
return a value from within the "privileged" block, do the following: 

somemethod() { ...normal code here... AccessController.doPrivileged(new 
PrivilegedAction() { public Void run() { // privileged code goes here, for 
example: System.loadLibrary("awt"); return null; // nothing to return } }); 
...normal code here... } 

PrivilegedAction is an interface with a single method, namedrun. The above 
example shows creation of an implementation of that interface; a concrete 
implementation of therunmethod is supplied. When the call todoPrivilegedis 
made, an instance of the PrivilegedAction implementation is passed to it. 
ThedoPrivilegedmethod calls therunmethod from the PrivilegedAction 
implementation after enabling privileges, and returns therunmethod's return 
value as thedoPrivilegedreturn value (which is ignored in this example). 

If you need to return a value, you can do something like the following: 

somemethod() { ...normal code here... String user = 
AccessController.doPrivileged( new PrivilegedAction() { public String run() { 
return System.getProperty("user.name"); } }); ...normal code here... } 

If the action performed in yourrunmethod could throw a "checked" exception 
(those listed in thethrowsclause of a method), then you need to use 
thePrivilegedExceptionActioninterface instead of thePrivilegedActioninterface: 

somemethod() throws FileNotFoundException { ...normal code here... try { 
FileInputStream fis = AccessController.doPrivileged( new 
PrivilegedExceptionAction() { public FileInputStream run() throws 
FileNotFoundException { return new FileInputStream("someFile"); } }); } catch 
(PrivilegedActionException e) { // e.getException() should be an instance of 
FileNotFoundException, // as only "checked" exceptions will be "wrapped" in a 
// PrivilegedActionException. throw (FileNotFoundException) e.getException(); } 
...normal code here... } 

Be *very* careful in your use of the "privileged" construct, and always 
remember to make the privileged code section as small as possible. You can 
passPermissionarguments to further limit the scope of the "privilege" (see 
below). 

Note thatcheckPermissionalways performs security checks within the context of 
the currently executing thread. Sometimes a security check that should be made 
within a given context will actually need to be done from within a different 
context (for example, from within a worker thread). The 
getContext(|java.security.AccessController|) method and AccessControlContext 
class are provided for this situation. ThegetContextmethod takes a "snapshot" 
of the current calling context, and places it in an AccessControlContext 
object, which it returns. A sample call is the following: 



AccessControlContext acc = AccessController.getContext() 



AccessControlContext itself has acheckPermissionmethod that makes access 
decisions based on the context it encapsulates, rather than that of the current 
execution thread. Code within a different context can thus call that method on 
the previously-saved AccessControlContext object. A sample call is the 
following: 



acc.checkPermission(permission) 



There are also times where you don't know a priori which permissions to check 
the context against. In these cases you can use the doPrivileged method that 
takes a context. You can also limit the scope of the privileged code by passing 
additionalPermissionparameters. 

somemethod() { AccessController.doPrivileged(new PrivilegedAction() { public 
Object run() { // Code goes here. Any permission checks within this // run 
method will require that the intersection of the // caller's protection domain 
and the snapshot's // context have the desired permission. If a requested // 
permission is not implied by the limiting FilePermission // argument then 
checking of the thread continues beyond the // caller of doPrivileged. } }, 
acc, new FilePermission("/temp/*", read)); ...normal code here... } 

Passing a limitingPermissionargument of an instance ofAllPermissionis 
equivalent to calling the equivalentdoPrivilegedmethod without 
limitingPermissionarguments. Passing a zero length array ofPermissiondisables 
the code privileges so that checking always continues beyond the caller of 
thatdoPrivilegedmethod. 



*java.security.AccessController.checkPermission(Permission)*

public static void checkPermission(java.security.Permission perm)
  throws |java.security.AccessControlException|
         
Determines whether the access request indicated by the specified permission 
should be allowed or denied, based on the current AccessControlContext and 
security policy. This method quietly returns if the access request is 
permitted, or throws an AccessControlException otherwise. The getPermission 
method of the AccessControlException returns thepermPermission object instance. 


    perm - the requested permission. 

*java.security.AccessController.doPrivileged(PrivilegedAction<T>)*

public static native |T| doPrivileged(java.security.PrivilegedAction<T> action)

Performs the specifiedPrivilegedActionwith privileges enabled. The action is 
performed with all of the permissions possessed by the caller's protection 
domain. 

If the action'srunmethod throws an (unchecked) exception, it will propagate 
through this method. 

Note that any DomainCombiner associated with the current AccessControlContext 
will be ignored while the action is performed. 


    action - the action to be performed. 

    Returns: the value returned by the action's {@code run} method. 

*java.security.AccessController.doPrivileged(PrivilegedAction<T>,AccessControlContext)*

public static native |T| doPrivileged(
  java.security.PrivilegedAction<T> action,
  java.security.AccessControlContext context)

Performs the specifiedPrivilegedActionwith privileges enabled and restricted by 
the specifiedAccessControlContext. The action is performed with the 
intersection of the permissions possessed by the caller's protection domain, 
and those possessed by the domains represented by the 
specifiedAccessControlContext. 

If the action'srunmethod throws an (unchecked) exception, it will propagate 
through this method. 

If a security manager is installed and the specifiedAccessControlContextwas not 
created by system code and the caller'sProtectionDomainhas not been granted 
the"createAccessControlContext" (|java.security.SecurityPermission|) , then the 
action is performed with no permissions. 


    action - the action to be performed. 
    context - an access control context representing the restriction to be applied to the 
       caller's domain's privileges before performing the specified action. If 
       the context is {@code null}, then no additional restriction is applied. 

    Returns: the value returned by the action's {@code run} method. 

*java.security.AccessController.doPrivileged(PrivilegedAction<T>,AccessControlContext,Permission...)*

public static |T| doPrivileged(
  java.security.PrivilegedAction<T> action,
  java.security.AccessControlContext context,
  java.security.Permission[] perms)

Performs the specifiedPrivilegedActionwith privileges enabled and restricted by 
the specifiedAccessControlContextand with a privilege scope limited by 
specifiedPermissionarguments. 

The action is performed with the intersection of the permissions possessed by 
the caller's protection domain, and those possessed by the domains represented 
by the specifiedAccessControlContext. 

If the action'srunmethod throws an (unchecked) exception, it will propagate 
through this method. 

If a security manager is installed and the specifiedAccessControlContextwas not 
created by system code and the caller'sProtectionDomainhas not been granted 
the"createAccessControlContext" (|java.security.SecurityPermission|) , then the 
action is performed with no permissions. 


    action - the action to be performed. 
    context - an access control context representing the restriction to be applied to the 
       caller's domain's privileges before performing the specified action. If 
       the context is {@code null}, then no additional restriction is applied. 
    perms - the {@code Permission} arguments which limit the scope of the caller's 
       privileges. The number of arguments is variable. 

    Returns: the value returned by the action's {@code run} method. 

*java.security.AccessController.doPrivileged(PrivilegedExceptionAction<T>)*

public static native |T| doPrivileged(java.security.PrivilegedExceptionAction<T> action)
  throws |java.security.PrivilegedActionException|
         
Performs the specifiedPrivilegedExceptionActionwith privileges enabled. The 
action is performed with all of the permissions possessed by the caller's 
protection domain. 

If the action'srunmethod throws an unchecked exception, it will propagate 
through this method. 

Note that any DomainCombiner associated with the current AccessControlContext 
will be ignored while the action is performed. 


    action - the action to be performed 

    Returns: the value returned by the action's {@code run} method 

*java.security.AccessController.doPrivileged(PrivilegedExceptionAction<T>,AccessControlContext)*

public static native |T| doPrivileged(
  java.security.PrivilegedExceptionAction<T> action,
  java.security.AccessControlContext context)
  throws |java.security.PrivilegedActionException|
         
Performs the specifiedPrivilegedExceptionActionwith privileges enabled and 
restricted by the specifiedAccessControlContext. The action is performed with 
the intersection of the permissions possessed by the caller's protection 
domain, and those possessed by the domains represented by the 
specifiedAccessControlContext. 

If the action'srunmethod throws an unchecked exception, it will propagate 
through this method. 

If a security manager is installed and the specifiedAccessControlContextwas not 
created by system code and the caller'sProtectionDomainhas not been granted 
the"createAccessControlContext" (|java.security.SecurityPermission|) , then the 
action is performed with no permissions. 


    action - the action to be performed 
    context - an access control context representing the restriction to be applied to the 
       caller's domain's privileges before performing the specified action. If 
       the context is {@code null}, then no additional restriction is applied. 

    Returns: the value returned by the action's {@code run} method 

*java.security.AccessController.doPrivileged(PrivilegedExceptionAction<T>,AccessControlContext,Permission...)*

public static |T| doPrivileged(
  java.security.PrivilegedExceptionAction<T> action,
  java.security.AccessControlContext context,
  java.security.Permission[] perms)
  throws |java.security.PrivilegedActionException|
         
Performs the specifiedPrivilegedExceptionActionwith privileges enabled and 
restricted by the specifiedAccessControlContextand with a privilege scope 
limited by specifiedPermissionarguments. 

The action is performed with the intersection of the permissions possessed by 
the caller's protection domain, and those possessed by the domains represented 
by the specifiedAccessControlContext. 

If the action'srunmethod throws an (unchecked) exception, it will propagate 
through this method. 

If a security manager is installed and the specifiedAccessControlContextwas not 
created by system code and the caller'sProtectionDomainhas not been granted 
the"createAccessControlContext" (|java.security.SecurityPermission|) , then the 
action is performed with no permissions. 


    action - the action to be performed. 
    context - an access control context representing the restriction to be applied to the 
       caller's domain's privileges before performing the specified action. If 
       the context is {@code null}, then no additional restriction is applied. 
    perms - the {@code Permission} arguments which limit the scope of the caller's 
       privileges. The number of arguments is variable. 

    Returns: the value returned by the action's {@code run} method. 

*java.security.AccessController.doPrivilegedWithCombiner(PrivilegedAction<T>)*

public static |T| doPrivilegedWithCombiner(java.security.PrivilegedAction<T> action)

Performs the specifiedPrivilegedActionwith privileges enabled. The action is 
performed with all of the permissions possessed by the caller's protection 
domain. 

If the action'srunmethod throws an (unchecked) exception, it will propagate 
through this method. 

This method preserves the current AccessControlContext's DomainCombiner (which 
may be null) while the action is performed. 


    action - the action to be performed. 

    Returns: the value returned by the action's {@code run} method. 

*java.security.AccessController.doPrivilegedWithCombiner(PrivilegedAction<T>,AccessControlContext,Permission...)*

public static |T| doPrivilegedWithCombiner(
  java.security.PrivilegedAction<T> action,
  java.security.AccessControlContext context,
  java.security.Permission[] perms)

Performs the specifiedPrivilegedActionwith privileges enabled and restricted by 
the specifiedAccessControlContextand with a privilege scope limited by 
specifiedPermissionarguments. 

The action is performed with the intersection of the permissions possessed by 
the caller's protection domain, and those possessed by the domains represented 
by the specifiedAccessControlContext. 

If the action'srunmethod throws an (unchecked) exception, it will propagate 
through this method. 

This method preserves the current AccessControlContext's DomainCombiner (which 
may be null) while the action is performed. 

If a security manager is installed and the specifiedAccessControlContextwas not 
created by system code and the caller'sProtectionDomainhas not been granted 
the"createAccessControlContext" (|java.security.SecurityPermission|) , then the 
action is performed with no permissions. 


    action - the action to be performed. 
    context - an access control context representing the restriction to be applied to the 
       caller's domain's privileges before performing the specified action. If 
       the context is {@code null}, then no additional restriction is applied. 
    perms - the {@code Permission} arguments which limit the scope of the caller's 
       privileges. The number of arguments is variable. 

    Returns: the value returned by the action's {@code run} method. 

*java.security.AccessController.doPrivilegedWithCombiner(PrivilegedExceptionAction<T>)*

public static |T| doPrivilegedWithCombiner(java.security.PrivilegedExceptionAction<T> action)
  throws |java.security.PrivilegedActionException|
         
Performs the specifiedPrivilegedExceptionActionwith privileges enabled. The 
action is performed with all of the permissions possessed by the caller's 
protection domain. 

If the action'srunmethod throws an unchecked exception, it will propagate 
through this method. 

This method preserves the current AccessControlContext's DomainCombiner (which 
may be null) while the action is performed. 


    action - the action to be performed. 

    Returns: the value returned by the action's {@code run} method 

*java.security.AccessController.doPrivilegedWithCombiner(PrivilegedExceptionAction<T>,AccessControlContext,Permission...)*

public static |T| doPrivilegedWithCombiner(
  java.security.PrivilegedExceptionAction<T> action,
  java.security.AccessControlContext context,
  java.security.Permission[] perms)
  throws |java.security.PrivilegedActionException|
         
Performs the specifiedPrivilegedExceptionActionwith privileges enabled and 
restricted by the specifiedAccessControlContextand with a privilege scope 
limited by specifiedPermissionarguments. 

The action is performed with the intersection of the permissions possessed by 
the caller's protection domain, and those possessed by the domains represented 
by the specifiedAccessControlContext. 

If the action'srunmethod throws an (unchecked) exception, it will propagate 
through this method. 

This method preserves the current AccessControlContext's DomainCombiner (which 
may be null) while the action is performed. 

If a security manager is installed and the specifiedAccessControlContextwas not 
created by system code and the caller'sProtectionDomainhas not been granted 
the"createAccessControlContext" (|java.security.SecurityPermission|) , then the 
action is performed with no permissions. 


    action - the action to be performed. 
    context - an access control context representing the restriction to be applied to the 
       caller's domain's privileges before performing the specified action. If 
       the context is {@code null}, then no additional restriction is applied. 
    perms - the {@code Permission} arguments which limit the scope of the caller's 
       privileges. The number of arguments is variable. 

    Returns: the value returned by the action's {@code run} method. 

*java.security.AccessController.getContext()*

public static |java.security.AccessControlContext| getContext()

This method takes a "snapshot" of the current calling context, which includes 
the current Thread's inherited AccessControlContext and any limited privilege 
scope, and places it in an AccessControlContext object. This context may then 
be checked at a later point, possibly in another thread. 



    Returns: the AccessControlContext based on the current context. 


