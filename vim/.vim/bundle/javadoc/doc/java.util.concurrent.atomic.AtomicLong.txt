*java.util.concurrent.atomic.AtomicLong* *AtomicLong* Alongvalue that may be upd

public class AtomicLong
  extends    |java.lang.Number|
  implements |java.io.Serializable|

|java.util.concurrent.atomic.AtomicLong_Description|
|java.util.concurrent.atomic.AtomicLong_Fields|
|java.util.concurrent.atomic.AtomicLong_Constructors|
|java.util.concurrent.atomic.AtomicLong_Methods|

================================================================================

*java.util.concurrent.atomic.AtomicLong_Constructors*
|java.util.concurrent.atomic.AtomicLong()|Creates a new AtomicLong with initial
|java.util.concurrent.atomic.AtomicLong(long)|Creates a new AtomicLong with the

*java.util.concurrent.atomic.AtomicLong_Methods*
|java.util.concurrent.atomic.AtomicLong.accumulateAndGet(long,LongBinaryOperator)|
|java.util.concurrent.atomic.AtomicLong.addAndGet(long)|Atomically adds the giv
|java.util.concurrent.atomic.AtomicLong.compareAndSet(long,long)|Atomically set
|java.util.concurrent.atomic.AtomicLong.decrementAndGet()|Atomically decrements
|java.util.concurrent.atomic.AtomicLong.doubleValue()|Returns the value of this
|java.util.concurrent.atomic.AtomicLong.floatValue()|Returns the value of thisA
|java.util.concurrent.atomic.AtomicLong.get()|Gets the current value.
|java.util.concurrent.atomic.AtomicLong.getAndAccumulate(long,LongBinaryOperator)|
|java.util.concurrent.atomic.AtomicLong.getAndAdd(long)|Atomically adds the giv
|java.util.concurrent.atomic.AtomicLong.getAndDecrement()|Atomically decrements
|java.util.concurrent.atomic.AtomicLong.getAndIncrement()|Atomically increments
|java.util.concurrent.atomic.AtomicLong.getAndSet(long)|Atomically sets to the 
|java.util.concurrent.atomic.AtomicLong.getAndUpdate(LongUnaryOperator)|Atomica
|java.util.concurrent.atomic.AtomicLong.incrementAndGet()|Atomically increments
|java.util.concurrent.atomic.AtomicLong.intValue()|Returns the value of thisAto
|java.util.concurrent.atomic.AtomicLong.lazySet(long)|Eventually sets to the gi
|java.util.concurrent.atomic.AtomicLong.longValue()|Returns the value of thisAt
|java.util.concurrent.atomic.AtomicLong.set(long)|Sets to the given value.
|java.util.concurrent.atomic.AtomicLong.toString()|Returns the String represent
|java.util.concurrent.atomic.AtomicLong.updateAndGet(LongUnaryOperator)|Atomica
|java.util.concurrent.atomic.AtomicLong.weakCompareAndSet(long,long)|Atomically

*java.util.concurrent.atomic.AtomicLong_Description*

Alongvalue that may be updated atomically. See the 
(|java.util.concurrent.atomic|) package specification for description of the 
properties of atomic variables. AnAtomicLongis used in applications such as 
atomically incremented sequence numbers, and cannot be used as a replacement 
for a (|java.lang.Long|) . However, this class does extendNumberto allow 
uniform access by tools and utilities that deal with numerically-based classes. 



*java.util.concurrent.atomic.AtomicLong()*

public AtomicLong()

Creates a new AtomicLong with initial value0. 


*java.util.concurrent.atomic.AtomicLong(long)*

public AtomicLong(long initialValue)

Creates a new AtomicLong with the given initial value. 

    initialValue - the initial value 

*java.util.concurrent.atomic.AtomicLong.accumulateAndGet(long,LongBinaryOperator)*

public final long accumulateAndGet(
  long x,
  java.util.function.LongBinaryOperator accumulatorFunction)

Atomically updates the current value with the results of applying the given 
function to the current and given values, returning the updated value. The 
function should be side-effect-free, since it may be re-applied when attempted 
updates fail due to contention among threads. The function is applied with the 
current value as its first argument, and the given update as the second 
argument. 


    x - the update value 
    accumulatorFunction - a side-effect-free function of two arguments 

    Returns: the updated value 

*java.util.concurrent.atomic.AtomicLong.addAndGet(long)*

public final long addAndGet(long delta)

Atomically adds the given value to the current value. 


    delta - the value to add 

    Returns: the updated value 

*java.util.concurrent.atomic.AtomicLong.compareAndSet(long,long)*

public final boolean compareAndSet(
  long expect,
  long update)

Atomically sets the value to the given updated value if the current value==the 
expected value. 


    expect - the expected value 
    update - the new value 

    Returns: {@code true} if successful. False return indicates that the actual value was 
             not equal to the expected value. 

*java.util.concurrent.atomic.AtomicLong.decrementAndGet()*

public final long decrementAndGet()

Atomically decrements by one the current value. 



    Returns: the updated value 

*java.util.concurrent.atomic.AtomicLong.doubleValue()*

public double doubleValue()

Returns the value of thisAtomicLongas adoubleafter a widening primitive 
conversion. 



*java.util.concurrent.atomic.AtomicLong.floatValue()*

public float floatValue()

Returns the value of thisAtomicLongas afloatafter a widening primitive 
conversion. 



*java.util.concurrent.atomic.AtomicLong.get()*

public final long get()

Gets the current value. 



    Returns: the current value 

*java.util.concurrent.atomic.AtomicLong.getAndAccumulate(long,LongBinaryOperator)*

public final long getAndAccumulate(
  long x,
  java.util.function.LongBinaryOperator accumulatorFunction)

Atomically updates the current value with the results of applying the given 
function to the current and given values, returning the previous value. The 
function should be side-effect-free, since it may be re-applied when attempted 
updates fail due to contention among threads. The function is applied with the 
current value as its first argument, and the given update as the second 
argument. 


    x - the update value 
    accumulatorFunction - a side-effect-free function of two arguments 

    Returns: the previous value 

*java.util.concurrent.atomic.AtomicLong.getAndAdd(long)*

public final long getAndAdd(long delta)

Atomically adds the given value to the current value. 


    delta - the value to add 

    Returns: the previous value 

*java.util.concurrent.atomic.AtomicLong.getAndDecrement()*

public final long getAndDecrement()

Atomically decrements by one the current value. 



    Returns: the previous value 

*java.util.concurrent.atomic.AtomicLong.getAndIncrement()*

public final long getAndIncrement()

Atomically increments by one the current value. 



    Returns: the previous value 

*java.util.concurrent.atomic.AtomicLong.getAndSet(long)*

public final long getAndSet(long newValue)

Atomically sets to the given value and returns the old value. 


    newValue - the new value 

    Returns: the previous value 

*java.util.concurrent.atomic.AtomicLong.getAndUpdate(LongUnaryOperator)*

public final long getAndUpdate(java.util.function.LongUnaryOperator updateFunction)

Atomically updates the current value with the results of applying the given 
function, returning the previous value. The function should be 
side-effect-free, since it may be re-applied when attempted updates fail due to 
contention among threads. 


    updateFunction - a side-effect-free function 

    Returns: the previous value 

*java.util.concurrent.atomic.AtomicLong.incrementAndGet()*

public final long incrementAndGet()

Atomically increments by one the current value. 



    Returns: the updated value 

*java.util.concurrent.atomic.AtomicLong.intValue()*

public int intValue()

Returns the value of thisAtomicLongas anintafter a narrowing primitive 
conversion. 



*java.util.concurrent.atomic.AtomicLong.lazySet(long)*

public final void lazySet(long newValue)

Eventually sets to the given value. 


    newValue - the new value 

*java.util.concurrent.atomic.AtomicLong.longValue()*

public long longValue()

Returns the value of thisAtomicLongas along. 



*java.util.concurrent.atomic.AtomicLong.set(long)*

public final void set(long newValue)

Sets to the given value. 


    newValue - the new value 

*java.util.concurrent.atomic.AtomicLong.toString()*

public |java.lang.String| toString()

Returns the String representation of the current value. 



    Returns: the String representation of the current value 

*java.util.concurrent.atomic.AtomicLong.updateAndGet(LongUnaryOperator)*

public final long updateAndGet(java.util.function.LongUnaryOperator updateFunction)

Atomically updates the current value with the results of applying the given 
function, returning the updated value. The function should be side-effect-free, 
since it may be re-applied when attempted updates fail due to contention among 
threads. 


    updateFunction - a side-effect-free function 

    Returns: the updated value 

*java.util.concurrent.atomic.AtomicLong.weakCompareAndSet(long,long)*

public final boolean weakCompareAndSet(
  long expect,
  long update)

Atomically sets the value to the given updated value if the current value==the 
expected value. 

May fail spuriously and does not provide ordering guarantees, so is only rarely 
an appropriate alternative tocompareAndSet. 


    expect - the expected value 
    update - the new value 

    Returns: {@code true} if successful 


