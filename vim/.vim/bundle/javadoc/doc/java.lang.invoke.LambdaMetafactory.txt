*java.lang.invoke.LambdaMetafactory* *LambdaMetafactory* Methods to facilitate t

public class LambdaMetafactory
  extends    |java.lang.Object|

|java.lang.invoke.LambdaMetafactory_Description|
|java.lang.invoke.LambdaMetafactory_Fields|
|java.lang.invoke.LambdaMetafactory_Constructors|
|java.lang.invoke.LambdaMetafactory_Methods|

================================================================================

*java.lang.invoke.LambdaMetafactory_Fields*
|int_java.lang.invoke.LambdaMetafactory.FLAG_BRIDGES|
|int_java.lang.invoke.LambdaMetafactory.FLAG_MARKERS|
|int_java.lang.invoke.LambdaMetafactory.FLAG_SERIALIZABLE|

*java.lang.invoke.LambdaMetafactory_Constructors*
|java.lang.invoke.LambdaMetafactory()|

*java.lang.invoke.LambdaMetafactory_Methods*
|java.lang.invoke.LambdaMetafactory.altMetafactory(MethodHandles.Lookup,String,MethodType,Object...)|
|java.lang.invoke.LambdaMetafactory.metafactory(MethodHandles.Lookup,String,MethodType,MethodType,MethodHandle,MethodType)|

*java.lang.invoke.LambdaMetafactory_Description*

Methods to facilitate the creation of simple "function objects" that implement 
one or more interfaces by delegation to a provided 
(|java.lang.invoke.MethodHandle|) , possibly after type adaptation and partial 
evaluation of arguments. These methods are typically used as bootstrap methods 
forinvokedynamiccall sites, to support the lambda expression and method 
reference expression features of the Java Programming Language. 

Indirect access to the behavior specified by the providedMethodHandleproceeds 
in order through three phases: 

Linkage occurs when the methods in this class are invoked. They take as 
arguments an interface to be implemented (typically a functional interface, one 
with a single abstract method), a name and signature of a method from that 
interface to be implemented, a method handle describing the desired 
implementation behavior for that method, and possibly other additional 
metadata, and produce a (|java.lang.invoke.CallSite|) whose target can be used 
to create suitable function objects. Linkage may involve dynamically loading a 
new class that implements the target interface. TheCallSitecan be considered a 
"factory" for function objects and so these linkage methods are referred to as 
"metafactories". 

Capture occurs when theCallSite's target is invoked, typically through 
aninvokedynamiccall site, producing a function object. This may occur many 
times for a single factoryCallSite. Capture may involve allocation of a new 
function object, or may return an existing function object. The 
behaviorMethodHandlemay have additional parameters beyond those of the 
specified interface method; these are referred to as captured parameters, which 
must be provided as arguments to theCallSitetarget, and which may be 
early-bound to the behaviorMethodHandle. The number of captured parameters and 
their types are determined during linkage. 

Invocation occurs when an implemented interface method is invoked on a function 
object. This may occur many times for a single function object. The method 
referenced by the behaviorMethodHandleis invoked with the captured arguments 
and any additional arguments provided on invocation, as if by 
(|java.lang.invoke.MethodHandle|) . 

It is sometimes useful to restrict the set of inputs or results permitted at 
invocation. For example, when the generic interfacePredicateis parameterized 
asPredicate, the input must be aString, even though the method to implement 
allows anyObject. At linkage time, an additional 
(|java.lang.invoke.MethodType|) parameter describes the "instantiated" method 
type; on invocation, the arguments and eventual result are checked against 
thisMethodType. 

This class provides two forms of linkage methods: a standard version ( 
(|java.lang.invoke.LambdaMetafactory|) ) using an optimized protocol, and an 
alternate version (|java.lang.invoke.LambdaMetafactory|) ). The alternate 
version is a generalization of the standard version, providing additional 
control over the behavior of the generated function objects via flags and 
additional arguments. The alternate version adds the ability to manage the 
following attributes of function objects: 

Bridging. It is sometimes useful to implement multiple variations of the method 
signature, involving argument or return type adaptation. This occurs when 
multiple distinct VM signatures for a method are logically considered to be the 
same method by the language. The flagFLAG_BRIDGESindicates that a list of 
additionalMethodTypes will be provided, each of which will be implemented by 
the resulting function object. These methods will share the same name and 
instantiated type. 

Multiple interfaces. If needed, more than one interface can be implemented by 
the function object. (These additional interfaces are typically marker 
interfaces with no methods.) The flagFLAG_MARKERSindicates that a list of 
additional interfaces will be provided, each of which should be implemented by 
the resulting function object. 

Serializability. The generated function objects do not generally support 
serialization. If desired,FLAG_SERIALIZABLEcan be used to indicate that the 
function objects should be serializable. Serializable function objects will 
use, as their serialized form, instances of the classSerializedLambda, which 
requires additional assistance from the capturing class (the class described by 
the (|java.lang.invoke.MethodHandles.Lookup|) parametercaller); see 
(|java.lang.invoke.SerializedLambda|) for details. 

Assume the linkage arguments are as follows: 

invokedType(describing theCallSitesignature) has K parameters of types (D1..Dk) 
and return type Rd; samMethodType(describing the implemented method type) has N 
parameters, of types (U1..Un) and return type Ru; 
implMethod(theMethodHandleproviding the implementation has M parameters, of 
types (A1..Am) and return type Ra (if the method describes an instance method, 
the method type of this method handle already includes an extra first argument 
corresponding to the receiver); instantiatedMethodType(allowing restrictions on 
invocation) has N parameters, of types (T1..Tn) and return type Rt. 

Then the following linkage invariants must hold: 

Rd is an interface implMethodis a direct method handle 
samMethodTypeandinstantiatedMethodTypehave the same arity N, and for i=1..N, Ti 
and Ui are the same type, or Ti and Ui are both reference types and Ti is a 
subtype of Ui Either Rt and Ru are the same type, or both are reference types 
and Rt is a subtype of Ru K + N = M For i=1..K, Di = Ai For i=1..N, Ti is 
adaptable to Aj, where j=i+k The return type Rt is void, or the return type Ra 
is not void and is adaptable to Rt 

Further, at capture time, ifimplMethodcorresponds to an instance method, and 
there are any capture arguments (K > 0), then the first capture argument 
(corresponding to the receiver) must be non-null. 

A type Q is considered adaptable to S as follows: 

QSLink-time checksInvocation-time checks 

PrimitivePrimitive Q can be converted to S via a primitive widening conversion 
None 

PrimitiveReference S is a supertype of the Wrapper(Q) Cast from Wrapper(Q) to S 

ReferencePrimitive for parameter types: Q is a primitive wrapper and 
Primitive(Q) can be widened to S for return types: If Q is a primitive wrapper, 
check that Primitive(Q) can be widened to S If Q is not a primitive wrapper, 
cast Q to the base Wrapper(S); for example Number for numeric types 

ReferenceReference for parameter types: S is a supertype of Q for return types: 
none Cast from Q to S 





*int_java.lang.invoke.LambdaMetafactory.FLAG_BRIDGES*

Flag for alternate metafactories indicating the lambda object requires 
additional bridge methods 


*int_java.lang.invoke.LambdaMetafactory.FLAG_MARKERS*

Flag for alternate metafactories indicating the lambda object implements other 
marker interfaces besides Serializable 


*int_java.lang.invoke.LambdaMetafactory.FLAG_SERIALIZABLE*

Flag for alternate metafactories indicating the lambda object must be 
serializable 



*java.lang.invoke.LambdaMetafactory()*

public LambdaMetafactory()




*java.lang.invoke.LambdaMetafactory.altMetafactory(MethodHandles.Lookup,String,MethodType,Object...)*

public static |java.lang.invoke.CallSite| altMetafactory(
  java.lang.invoke.MethodHandles.Lookup caller,
  java.lang.String invokedName,
  java.lang.invoke.MethodType invokedType,
  java.lang.Object[] args)
  throws |java.lang.invoke.LambdaConversionException|
         
Facilitates the creation of simple "function objects" that implement one or 
more interfaces by delegation to a provided (|java.lang.invoke.MethodHandle|) , 
after appropriate type adaptation and partial evaluation of arguments. 
Typically used as a bootstrap method forinvokedynamiccall sites, to support the 
lambda expression and method reference expression features of the Java 
Programming Language. 

This is the general, more flexible metafactory; a streamlined version is 
provided by (|java.lang.invoke.LambdaMetafactory|) . A general description of 
the behavior of this method is provided 
above(|java.lang.invoke.LambdaMetafactory|) . 

The argument list for this method includes three fixed parameters, 
corresponding to the parameters automatically stacked by the VM for the 
bootstrap method in aninvokedynamicinvocation, and anObject[]parameter that 
contains additional parameters. The declared argument list for this method is: 

CallSite altMetafactory(MethodHandles.Lookup caller, String invokedName, 
MethodType invokedType, Object... args) 

but it behaves as if the argument list is as follows: 

CallSite altMetafactory(MethodHandles.Lookup caller, String invokedName, 
MethodType invokedType, MethodType samMethodType, MethodHandle implMethod, 
MethodType instantiatedMethodType, int flags, int markerInterfaceCount, // IF 
flags has MARKERS set Class... markerInterfaces, // IF flags has MARKERS set 
int bridgeCount, // IF flags has BRIDGES set MethodType... bridges // IF flags 
has BRIDGES set ) 

Arguments that appear in the argument list for 
(|java.lang.invoke.LambdaMetafactory|) have the same specification as in that 
method. The additional arguments are interpreted as follows: 

flagsindicates additional options; this is a bitwise OR of desired flags. 
Defined flags are (|java.lang.invoke.LambdaMetafactory|) , 
(|java.lang.invoke.LambdaMetafactory|) , and 
(|java.lang.invoke.LambdaMetafactory|) . markerInterfaceCountis the number of 
additional interfaces the function object should implement, and is present if 
and only if theFLAG_MARKERSflag is set. markerInterfacesis a variable-length 
list of additional interfaces to implement, whose length 
equalsmarkerInterfaceCount, and is present if and only if theFLAG_MARKERSflag 
is set. bridgeCountis the number of additional method signatures the function 
object should implement, and is present if and only if theFLAG_BRIDGESflag is 
set. bridgesis a variable-length list of additional methods signatures to 
implement, whose length equalsbridgeCount, and is present if and only if 
theFLAG_BRIDGESflag is set. 

Each class named bymarkerInterfacesis subject to the same restrictions asRd, 
the return type ofinvokedType, as described 
above(|java.lang.invoke.LambdaMetafactory|) . EachMethodTypenamed bybridgesis 
subject to the same restrictions assamMethodType, as described 
above(|java.lang.invoke.LambdaMetafactory|) . 

When FLAG_SERIALIZABLE is set inflags, the function objects will 
implementSerializable, and will have awriteReplacemethod that returns an 
appropriate (|java.lang.invoke.SerializedLambda|) . Thecallerclass must have an 
appropriate$deserializeLambda$method, as described in 
(|java.lang.invoke.SerializedLambda|) . 

When the target of theCallSitereturned from this method is invoked, the 
resulting function objects are instances of a class with the following 
properties: 

The class implements the interface named by the return type ofinvokedTypeand 
any interfaces named bymarkerInterfaces The class declares methods with the 
name given byinvokedName, and the signature given bysamMethodTypeand additional 
signatures given bybridges The class may override methods fromObject, and may 
implement methods related to serialization. 


    caller - Represents a lookup context with the accessibility privileges of the caller. 
       When used with {@code invokedynamic}, this is stacked automatically by 
       the VM. 
    invokedName - The name of the method to implement. When used with {@code invokedynamic}, this 
       is provided by the {@code NameAndType} of the {@code InvokeDynamic} 
       structure and is stacked automatically by the VM. 
    invokedType - The expected signature of the {@code CallSite}. The parameter types represent 
       the types of capture variables; the return type is the interface to 
       implement. When used with {@code invokedynamic}, this is provided by the 
       {@code NameAndType} of the {@code InvokeDynamic} structure and is 
       stacked automatically by the VM. In the event that the implementation 
       method is an instance method and this signature has any parameters, the 
       first parameter in the invocation signature must correspond to the 
       receiver. 
    args - An {@code Object[]} array containing the required arguments {@code 
       samMethodType}, {@code implMethod}, {@code instantiatedMethodType}, 
       {@code flags}, and any optional arguments, as described {@link 
       #altMetafactory(MethodHandles.Lookup, String, MethodType, Object...)} 
       above} 

    Returns: a CallSite whose target can be used to perform capture, generating instances of 
             the interface named by {@code invokedType} 

*java.lang.invoke.LambdaMetafactory.metafactory(MethodHandles.Lookup,String,MethodType,MethodType,MethodHandle,MethodType)*

public static |java.lang.invoke.CallSite| metafactory(
  java.lang.invoke.MethodHandles.Lookup caller,
  java.lang.String invokedName,
  java.lang.invoke.MethodType invokedType,
  java.lang.invoke.MethodType samMethodType,
  java.lang.invoke.MethodHandle implMethod,
  java.lang.invoke.MethodType instantiatedMethodType)
  throws |java.lang.invoke.LambdaConversionException|
         
Facilitates the creation of simple "function objects" that implement one or 
more interfaces by delegation to a provided (|java.lang.invoke.MethodHandle|) , 
after appropriate type adaptation and partial evaluation of arguments. 
Typically used as a bootstrap method forinvokedynamiccall sites, to support the 
lambda expression and method reference expression features of the Java 
Programming Language. 

This is the standard, streamlined metafactory; additional flexibility is 
provided by (|java.lang.invoke.LambdaMetafactory|) . A general description of 
the behavior of this method is provided 
above(|java.lang.invoke.LambdaMetafactory|) . 

When the target of theCallSitereturned from this method is invoked, the 
resulting function objects are instances of a class which implements the 
interface named by the return type ofinvokedType, declares a method with the 
name given byinvokedNameand the signature given bysamMethodType. It may also 
override additional methods fromObject. 


    caller - Represents a lookup context with the accessibility privileges of the caller. 
       When used with {@code invokedynamic}, this is stacked automatically by 
       the VM. 
    invokedName - The name of the method to implement. When used with {@code invokedynamic}, this 
       is provided by the {@code NameAndType} of the {@code InvokeDynamic} 
       structure and is stacked automatically by the VM. 
    invokedType - The expected signature of the {@code CallSite}. The parameter types represent 
       the types of capture variables; the return type is the interface to 
       implement. When used with {@code invokedynamic}, this is provided by the 
       {@code NameAndType} of the {@code InvokeDynamic} structure and is 
       stacked automatically by the VM. In the event that the implementation 
       method is an instance method and this signature has any parameters, the 
       first parameter in the invocation signature must correspond to the 
       receiver. 
    samMethodType - Signature and return type of method to be implemented by the function object. 
    implMethod - A direct method handle describing the implementation method which should be 
       called (with suitable adaptation of argument types, return types, and 
       with captured arguments prepended to the invocation arguments) at 
       invocation time. 
    instantiatedMethodType - The signature and return type that should be enforced dynamically at invocation 
       time. This may be the same as {@code samMethodType}, or may be a 
       specialization of it. 

    Returns: a CallSite whose target can be used to perform capture, generating instances of 
             the interface named by {@code invokedType} 


