*javax.swing.plaf.nimbus.AbstractRegionPainter* *AbstractRegionPainter* Convenie

public abstract class AbstractRegionPainter
  extends    |java.lang.Object|
  implements |javax.swing.Painter|

|javax.swing.plaf.nimbus.AbstractRegionPainter_Description|
|javax.swing.plaf.nimbus.AbstractRegionPainter_Fields|
|javax.swing.plaf.nimbus.AbstractRegionPainter_Constructors|
|javax.swing.plaf.nimbus.AbstractRegionPainter_Methods|

================================================================================

*javax.swing.plaf.nimbus.AbstractRegionPainter_Constructors*
|javax.swing.plaf.nimbus.AbstractRegionPainter()|Create a new AbstractRegionPai

*javax.swing.plaf.nimbus.AbstractRegionPainter_Methods*
|javax.swing.plaf.nimbus.AbstractRegionPainter.configureGraphics(Graphics2D)|Co
|javax.swing.plaf.nimbus.AbstractRegionPainter.decodeAnchorX(float,float)|Decod
|javax.swing.plaf.nimbus.AbstractRegionPainter.decodeAnchorY(float,float)|Decod
|javax.swing.plaf.nimbus.AbstractRegionPainter.decodeColor(Color,Color,float)|D
|javax.swing.plaf.nimbus.AbstractRegionPainter.decodeColor(String,float,float,float,int)|
|javax.swing.plaf.nimbus.AbstractRegionPainter.decodeGradient(float,float,float,float,float[],Color[])|
|javax.swing.plaf.nimbus.AbstractRegionPainter.decodeRadialGradient(float,float,float,float[],Color[])|
|javax.swing.plaf.nimbus.AbstractRegionPainter.decodeX(float)|Decodes and retur
|javax.swing.plaf.nimbus.AbstractRegionPainter.decodeY(float)|Decodes and retur
|javax.swing.plaf.nimbus.AbstractRegionPainter.doPaint(Graphics2D,JComponent,int,int,Object[])|
|javax.swing.plaf.nimbus.AbstractRegionPainter.getComponentColor(JComponent,String,Color,float,float,int)|
|javax.swing.plaf.nimbus.AbstractRegionPainter.getExtendedCacheKeys(JComponent)|
|javax.swing.plaf.nimbus.AbstractRegionPainter.getPaintContext()|Gets the Paint
|javax.swing.plaf.nimbus.AbstractRegionPainter.paint(Graphics2D,JComponent,int,int)|

*javax.swing.plaf.nimbus.AbstractRegionPainter_Description*

Convenient base class for defining Painter instances for rendering a region or 
component in Nimbus. 



*javax.swing.plaf.nimbus.AbstractRegionPainter()*

protected AbstractRegionPainter()

Create a new AbstractRegionPainter 


*javax.swing.plaf.nimbus.AbstractRegionPainter.configureGraphics(Graphics2D)*

protected void configureGraphics(java.awt.Graphics2D g)

Configures the given Graphics2D. Often, rendering hints or compositing rules 
are applied to a Graphics2D object prior to painting, which should affect all 
of the subsequent painting operations. This method provides a convenient hook 
for configuring the Graphics object prior to rendering, regardless of whether 
the render operation is performed to an intermediate buffer or directly to the 
display. 


    g - The Graphics2D object to configure. Will not be null. 

*javax.swing.plaf.nimbus.AbstractRegionPainter.decodeAnchorX(float,float)*

protected final float decodeAnchorX(
  float x,
  float dx)

Decodes and returns a float value representing the actual pixel location for 
the anchor point given the encoded X value of the control point, and the offset 
distance to the anchor from that control point. 


    x - an encoded x value of the bezier control point (0...1, or 1...2, or 2...3) 
    dx - the offset distance to the anchor from the control point x 

    Returns: the decoded x location of the control point 

*javax.swing.plaf.nimbus.AbstractRegionPainter.decodeAnchorY(float,float)*

protected final float decodeAnchorY(
  float y,
  float dy)

Decodes and returns a float value representing the actual pixel location for 
the anchor point given the encoded Y value of the control point, and the offset 
distance to the anchor from that control point. 


    y - an encoded y value of the bezier control point (0...1, or 1...2, or 2...3) 
    dy - the offset distance to the anchor from the control point y 

    Returns: the decoded y position of the control point 

*javax.swing.plaf.nimbus.AbstractRegionPainter.decodeColor(Color,Color,float)*

protected final |java.awt.Color| decodeColor(
  java.awt.Color color1,
  java.awt.Color color2,
  float midPoint)

Decodes and returns a color, which is derived from a offset between two other 
colors. 


    color1 - The first color 
    color2 - The second color 
    midPoint - The offset between color 1 and color 2, a value of 0.0 is color 1 and 1.0 is 
       color 2; 

    Returns: The derived color 

*javax.swing.plaf.nimbus.AbstractRegionPainter.decodeColor(String,float,float,float,int)*

protected final |java.awt.Color| decodeColor(
  java.lang.String key,
  float hOffset,
  float sOffset,
  float bOffset,
  int aOffset)

Decodes and returns a color, which is derived from a base color in UI defaults. 


    key - A key corresponding to the value in the UI Defaults table of UIManager where 
       the base color is defined 
    hOffset - The hue offset used for derivation. 
    sOffset - The saturation offset used for derivation. 
    bOffset - The brightness offset used for derivation. 
    aOffset - The alpha offset used for derivation. Between 0...255 

    Returns: The derived color, whose color value will change if the parent uiDefault color 
             changes. 

*javax.swing.plaf.nimbus.AbstractRegionPainter.decodeGradient(float,float,float,float,float[],Color[])*

protected final |java.awt.LinearGradientPaint| decodeGradient(
  float x1,
  float y1,
  float x2,
  float y2,
  float[] midpoints,
  java.awt.Color[] colors)

Given parameters for creating a LinearGradientPaint, this method will create 
and return a linear gradient paint. One primary purpose for this method is to 
avoid creating a LinearGradientPaint where the start and end points are equal. 
In such a case, the end y point is slightly increased to avoid the overlap. 


    x1 - 
    y1 - 
    x2 - 
    y2 - 
    midpoints - 
    colors - 

    Returns: a valid LinearGradientPaint. This method never returns null. 

*javax.swing.plaf.nimbus.AbstractRegionPainter.decodeRadialGradient(float,float,float,float[],Color[])*

protected final |java.awt.RadialGradientPaint| decodeRadialGradient(
  float x,
  float y,
  float r,
  float[] midpoints,
  java.awt.Color[] colors)

Given parameters for creating a RadialGradientPaint, this method will create 
and return a radial gradient paint. One primary purpose for this method is to 
avoid creating a RadialGradientPaint where the radius is non-positive. In such 
a case, the radius is just slightly increased to avoid 0. 


    x - 
    y - 
    r - 
    midpoints - 
    colors - 

    Returns: a valid RadialGradientPaint. This method never returns null. 

*javax.swing.plaf.nimbus.AbstractRegionPainter.decodeX(float)*

protected final float decodeX(float x)

Decodes and returns a float value representing the actual pixel location for 
the given encoded X value. 


    x - an encoded x value (0...1, or 1...2, or 2...3) 

    Returns: the decoded x value 

*javax.swing.plaf.nimbus.AbstractRegionPainter.decodeY(float)*

protected final float decodeY(float y)

Decodes and returns a float value representing the actual pixel location for 
the given encoded y value. 


    y - an encoded y value (0...1, or 1...2, or 2...3) 

    Returns: the decoded y value 

*javax.swing.plaf.nimbus.AbstractRegionPainter.doPaint(Graphics2D,JComponent,int,int,Object[])*

protected abstract void doPaint(
  java.awt.Graphics2D g,
  javax.swing.JComponent c,
  int width,
  int height,
  java.lang.Object[] extendedCacheKeys)

Actually performs the painting operation. Subclasses must implement this 
method. The graphics object passed may represent the actual surface being 
rendered to, or it may be an intermediate buffer. It has also been 
pre-translated. Simply render the component as if it were located at 0, 0 and 
had a width of width and a height of height. For performance reasons, you may 
want to read the clip from the Graphics2D object and only render within that 
space. 


    g - The Graphics2D surface to paint to 
    c - The JComponent related to the drawing event. For example, if the region being 
       rendered is Button, then c will be a JButton. If the region being drawn 
       is ScrollBarSlider, then the component will be JScrollBar. This value 
       may be null. 
    width - The width of the region to paint. Note that in the case of painting the 
       foreground, this value may differ from c.getWidth(). 
    height - The height of the region to paint. Note that in the case of painting the 
       foreground, this value may differ from c.getHeight(). 
    extendedCacheKeys - The result of the call to getExtendedCacheKeys() 

*javax.swing.plaf.nimbus.AbstractRegionPainter.getComponentColor(JComponent,String,Color,float,float,int)*

protected final |java.awt.Color| getComponentColor(
  javax.swing.JComponent c,
  java.lang.String property,
  java.awt.Color defaultColor,
  float saturationOffset,
  float brightnessOffset,
  int alphaOffset)

Get a color property from the given JComponent. First checks for a getXXX() 
method and if that fails checks for a client property with key property. If 
that still fails to return a Color then defaultColor is returned. 


    c - The component to get the color property from 
    property - The name of a bean style property or client property 
    defaultColor - The color to return if no color was obtained from the component. 

    Returns: The color that was obtained from the component or defaultColor 

*javax.swing.plaf.nimbus.AbstractRegionPainter.getExtendedCacheKeys(JComponent)*

protected |java.lang.Object|[] getExtendedCacheKeys(javax.swing.JComponent c)

Get any extra attributes which the painter implementation would like to include 
in the image cache lookups. This is checked for every call of the paint(g, c, 
w, h) method. 


    c - The component on the current paint call 

    Returns: Array of extra objects to be included in the cache key 

*javax.swing.plaf.nimbus.AbstractRegionPainter.getPaintContext()*

protected abstract |javax.swing.plaf.nimbus.AbstractRegionPainter.PaintContext| getPaintContext()

Gets the PaintContext for this painting operation. This method is called on 
every paint, and so should be fast and produce no garbage. The PaintContext 
contains information such as cache hints. It also contains data necessary for 
decoding points at runtime, such as the stretching insets, the canvas size at 
which the encoded points were defined, and whether the stretching insets are 
inverted. 

This method allows for subclasses to package the painting of different states 
with possibly different canvas sizes, etc, into one AbstractRegionPainter 
implementation. 



    Returns: a PaintContext associated with this paint operation. 

*javax.swing.plaf.nimbus.AbstractRegionPainter.paint(Graphics2D,JComponent,int,int)*

public final void paint(
  java.awt.Graphics2D g,
  javax.swing.JComponent c,
  int w,
  int h)






