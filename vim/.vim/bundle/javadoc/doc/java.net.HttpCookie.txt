*java.net.HttpCookie* *HttpCookie* An HttpCookie object represents an HTTP cooki

public final class HttpCookie
  extends    |java.lang.Object|
  implements |java.lang.Cloneable|

|java.net.HttpCookie_Description|
|java.net.HttpCookie_Fields|
|java.net.HttpCookie_Constructors|
|java.net.HttpCookie_Methods|

================================================================================

*java.net.HttpCookie_Constructors*
|java.net.HttpCookie(String,String)|Constructs a cookie with a specified name a

*java.net.HttpCookie_Methods*
|java.net.HttpCookie.clone()|Create and return a copy of this object.
|java.net.HttpCookie.domainMatches(String,String)|The utility method to check w
|java.net.HttpCookie.equals(Object)|Test the equality of two HTTP cookies.
|java.net.HttpCookie.getComment()|Returns the comment describing the purpose of
|java.net.HttpCookie.getCommentURL()|Returns the comment URL describing the pur
|java.net.HttpCookie.getDiscard()|Returns the discard attribute of the cookie
|java.net.HttpCookie.getDomain()|Returns the domain name set for this cookie.
|java.net.HttpCookie.getMaxAge()|Returns the maximum age of the cookie, specifi
|java.net.HttpCookie.getName()|Returns the name of the cookie.
|java.net.HttpCookie.getPath()|Returns the path on the server to which the brow
|java.net.HttpCookie.getPortlist()|Returns the port list attribute of the cooki
|java.net.HttpCookie.getSecure()|Returnstrueif sending this cookie should be re
|java.net.HttpCookie.getValue()|Returns the value of the cookie.
|java.net.HttpCookie.getVersion()|Returns the version of the protocol this cook
|java.net.HttpCookie.hasExpired()|Reports whether this HTTP cookie has expired 
|java.net.HttpCookie.hashCode()|Returns the hash code of this HTTP cookie.
|java.net.HttpCookie.isHttpOnly()|Returnstrueif this cookie contains the HttpOn
|java.net.HttpCookie.parse(String)|Constructs cookies from set-cookie or set-co
|java.net.HttpCookie.setComment(String)|Specifies a comment that describes a co
|java.net.HttpCookie.setCommentURL(String)|Specifies a comment URL that describ
|java.net.HttpCookie.setDiscard(boolean)|Specify whether user agent should disc
|java.net.HttpCookie.setDomain(String)|Specifies the domain within which this c
|java.net.HttpCookie.setHttpOnly(boolean)|Indicates whether the cookie should b
|java.net.HttpCookie.setMaxAge(long)|Sets the maximum age of the cookie in seco
|java.net.HttpCookie.setPath(String)|Specifies a path for the cookie to which t
|java.net.HttpCookie.setPortlist(String)|Specify the portlist of the cookie, wh
|java.net.HttpCookie.setSecure(boolean)|Indicates whether the cookie should onl
|java.net.HttpCookie.setValue(String)|Assigns a new value to a cookie after the
|java.net.HttpCookie.setVersion(int)|Sets the version of the cookie protocol th
|java.net.HttpCookie.toString()|Constructs a cookie header string representatio

*java.net.HttpCookie_Description*

An HttpCookie object represents an HTTP cookie, which carries state information 
between server and user agent. Cookie is widely adopted to create stateful 
sessions. 

There are 3 HTTP cookie specifications: 

Netscape draft RFC 2109 - http://www.ietf.org/rfc/rfc2109.txt RFC 2965 - 
http://www.ietf.org/rfc/rfc2965.txt 

HttpCookie class can accept all these 3 forms of syntax. 



*java.net.HttpCookie(String,String)*

public HttpCookie(
  java.lang.String name,
  java.lang.String value)

Constructs a cookie with a specified name and value. 

The name must conform to RFC 2965. That means it can contain only ASCII 
alphanumeric characters and cannot contain commas, semicolons, or white space 
or begin with a $ character. The cookie's name cannot be changed after 
creation. 

The value can be anything the server chooses to send. Its value is probably of 
interest only to the server. The cookie's value can be changed after creation 
with thesetValuemethod. 

By default, cookies are created according to the RFC 2965 cookie specification. 
The version can be changed with thesetVersionmethod. 

    name - a {@code String} specifying the name of the cookie 
    value - a {@code String} specifying the value of the cookie 

*java.net.HttpCookie.clone()*

public |java.lang.Object| clone()

Create and return a copy of this object. 



    Returns: a clone of this HTTP cookie 

*java.net.HttpCookie.domainMatches(String,String)*

public static boolean domainMatches(
  java.lang.String domain,
  java.lang.String host)

The utility method to check whether a host name is in a domain or not. 

This concept is described in the cookie specification. To understand the 
concept, some terminologies need to be defined first: 

effective host name = hostname if host name contains dot 

or = hostname.local if not 

Host A's name domain-matches host B's if: 

their host name strings string-compare equal; or A is a HDN string and has the 
form NB, where N is a non-empty name string, B has the form .B', and B' is a 
HDN string. (So, x.y.com domain-matches .Y.com but not Y.com.) 

A host isn't in a domain (RFC 2965 sec. 3.3.2) if: 

The value for the Domain attribute contains no embedded dots, and the value is 
not .local. The effective host name that derives from the request-host does not 
domain-match the Domain attribute. The request-host is a HDN (not IP address) 
and has the form HD, where D is the value of the Domain attribute, and H is a 
string that contains one or more dots. 

Examples: 

A Set-Cookie2 from request-host y.x.foo.com for Domain=.foo.com would be 
rejected, because H is y.x and contains a dot. A Set-Cookie2 from request-host 
x.foo.com for Domain=.foo.com would be accepted. A Set-Cookie2 with Domain=.com 
or Domain=.com., will always be rejected, because there is no embedded dot. A 
Set-Cookie2 from request-host example for Domain=.local will be accepted, 
because the effective host name for the request- host is example.local, and 
example.local domain-matches .local. 


    domain - the domain name to check host name with 
    host - the host name in question 

    Returns: {@code true} if they domain-matches; {@code false} if not 

*java.net.HttpCookie.equals(Object)*

public boolean equals(java.lang.Object obj)

Test the equality of two HTTP cookies. 

The result istrueonly if two cookies come from same domain (case-insensitive), 
have same name (case-insensitive), and have same path (case-sensitive). 



    Returns: {@code true} if two HTTP cookies equal to each other; otherwise, {@code false} 

*java.net.HttpCookie.getComment()*

public |java.lang.String| getComment()

Returns the comment describing the purpose of this cookie, ornullif the cookie 
has no comment. 



    Returns: a {@code String} containing the comment, or {@code null} if none 

*java.net.HttpCookie.getCommentURL()*

public |java.lang.String| getCommentURL()

Returns the comment URL describing the purpose of this cookie, ornullif the 
cookie has no comment URL. 



    Returns: a {@code String} containing the comment URL, or {@code null} if none 

*java.net.HttpCookie.getDiscard()*

public boolean getDiscard()

Returns the discard attribute of the cookie 



    Returns: a {@code boolean} to represent this cookie's discard attribute 

*java.net.HttpCookie.getDomain()*

public |java.lang.String| getDomain()

Returns the domain name set for this cookie. The form of the domain name is set 
by RFC 2965. 



    Returns: a {@code String} containing the domain name 

*java.net.HttpCookie.getMaxAge()*

public long getMaxAge()

Returns the maximum age of the cookie, specified in seconds. By 
default,-1indicating the cookie will persist until browser shutdown. 



    Returns: an integer specifying the maximum age of the cookie in seconds 

*java.net.HttpCookie.getName()*

public |java.lang.String| getName()

Returns the name of the cookie. The name cannot be changed after creation. 



    Returns: a {@code String} specifying the cookie's name 

*java.net.HttpCookie.getPath()*

public |java.lang.String| getPath()

Returns the path on the server to which the browser returns this cookie. The 
cookie is visible to all subpaths on the server. 



    Returns: a {@code String} specifying a path that contains a servlet name, for example, 
             /catalog 

*java.net.HttpCookie.getPortlist()*

public |java.lang.String| getPortlist()

Returns the port list attribute of the cookie 



    Returns: a {@code String} contains the port list or {@code null} if none 

*java.net.HttpCookie.getSecure()*

public boolean getSecure()

Returnstrueif sending this cookie should be restricted to a secure protocol, 
orfalseif the it can be sent using any protocol. 



    Returns: {@code false} if the cookie can be sent over any standard protocol; otherwise, 
             {@code true} 

*java.net.HttpCookie.getValue()*

public |java.lang.String| getValue()

Returns the value of the cookie. 



    Returns: a {@code String} containing the cookie's present value 

*java.net.HttpCookie.getVersion()*

public int getVersion()

Returns the version of the protocol this cookie complies with. Version 1 
complies with RFC 2965/2109, and version 0 complies with the original cookie 
specification drafted by Netscape. Cookies provided by a browser use and 
identify the browser's cookie version. 



    Returns: 0 if the cookie complies with the original Netscape specification; 1 if the 
             cookie complies with RFC 2965/2109 

*java.net.HttpCookie.hasExpired()*

public boolean hasExpired()

Reports whether this HTTP cookie has expired or not. 



    Returns: {@code true} to indicate this HTTP cookie has expired; otherwise, {@code false} 

*java.net.HttpCookie.hashCode()*

public int hashCode()

Returns the hash code of this HTTP cookie. The result is the sum of hash code 
value of three significant components of this cookie: name, domain, and path. 
That is, the hash code is the value of the expression: 

getName().toLowerCase().hashCode() + getDomain().toLowerCase().hashCode() + 
getPath().hashCode() 



    Returns: this HTTP cookie's hash code 

*java.net.HttpCookie.isHttpOnly()*

public boolean isHttpOnly()

Returnstrueif this cookie contains the HttpOnly attribute. This means that the 
cookie should not be accessible to scripting engines, like javascript. 



    Returns: {@code true} if this cookie should be considered HTTPOnly 

*java.net.HttpCookie.parse(String)*

public static |java.util.List|<HttpCookie> parse(java.lang.String header)

Constructs cookies from set-cookie or set-cookie2 header string. RFC 2965 
section 3.2.2 set-cookie2 syntax indicates that one header line may contain 
more than one cookie definitions, so this is a static utility method instead of 
another constructor. 


    header - a {@code String} specifying the set-cookie header. The header should start with 
       "set-cookie", or "set-cookie2" token; or it should have no leading token 
       at all. 

    Returns: a List of cookie parsed from header line string 

*java.net.HttpCookie.setComment(String)*

public void setComment(java.lang.String purpose)

Specifies a comment that describes a cookie's purpose. The comment is useful if 
the browser presents the cookie to the user. Comments are not supported by 
Netscape Version 0 cookies. 


    purpose - a {@code String} specifying the comment to display to the user 

*java.net.HttpCookie.setCommentURL(String)*

public void setCommentURL(java.lang.String purpose)

Specifies a comment URL that describes a cookie's purpose. The comment URL is 
useful if the browser presents the cookie to the user. Comment URL is RFC 2965 
only. 


    purpose - a {@code String} specifying the comment URL to display to the user 

*java.net.HttpCookie.setDiscard(boolean)*

public void setDiscard(boolean discard)

Specify whether user agent should discard the cookie unconditionally. This is 
RFC 2965 only attribute. 


    discard - {@code true} indicates to discard cookie unconditionally 

*java.net.HttpCookie.setDomain(String)*

public void setDomain(java.lang.String pattern)

Specifies the domain within which this cookie should be presented. 

The form of the domain name is specified by RFC 2965. A domain name begins with 
a dot (.foo.com) and means that the cookie is visible to servers in a specified 
Domain Name System (DNS) zone (for example,www.foo.com, but nota.b.foo.com). By 
default, cookies are only returned to the server that sent them. 


    pattern - a {@code String} containing the domain name within which this cookie is 
       visible; form is according to RFC 2965 

*java.net.HttpCookie.setHttpOnly(boolean)*

public void setHttpOnly(boolean httpOnly)

Indicates whether the cookie should be considered HTTP Only. If set totrueit 
means the cookie should not be accessible to scripting engines like javascript. 


    httpOnly - if {@code true} make the cookie HTTP only, i.e. only visible as part of an HTTP 
       request. 

*java.net.HttpCookie.setMaxAge(long)*

public void setMaxAge(long expiry)

Sets the maximum age of the cookie in seconds. 

A positive value indicates that the cookie will expire after that many seconds 
have passed. Note that the value is the maximum age when the cookie will 
expire, not the cookie's current age. 

A negative value means that the cookie is not stored persistently and will be 
deleted when the Web browser exits. A zero value causes the cookie to be 
deleted. 


    expiry - an integer specifying the maximum age of the cookie in seconds; if zero, the 
       cookie should be discarded immediately; otherwise, the cookie's max age 
       is unspecified. 

*java.net.HttpCookie.setPath(String)*

public void setPath(java.lang.String uri)

Specifies a path for the cookie to which the client should return the cookie. 

The cookie is visible to all the pages in the directory you specify, and all 
the pages in that directory's subdirectories. A cookie's path must include the 
servlet that set the cookie, for example, /catalog, which makes the cookie 
visible to all directories on the server under /catalog. 

Consult RFC 2965 (available on the Internet) for more information on setting 
path names for cookies. 


    uri - a {@code String} specifying a path 

*java.net.HttpCookie.setPortlist(String)*

public void setPortlist(java.lang.String ports)

Specify the portlist of the cookie, which restricts the port(s) to which a 
cookie may be sent back in a Cookie header. 


    ports - a {@code String} specify the port list, which is comma separated series of 
       digits 

*java.net.HttpCookie.setSecure(boolean)*

public void setSecure(boolean flag)

Indicates whether the cookie should only be sent using a secure protocol, such 
as HTTPS or SSL. 

The default value isfalse. 


    flag - If {@code true}, the cookie can only be sent over a secure protocol like HTTPS. 
       If {@code false}, it can be sent over any protocol. 

*java.net.HttpCookie.setValue(String)*

public void setValue(java.lang.String newValue)

Assigns a new value to a cookie after the cookie is created. If you use a 
binary value, you may want to use BASE64 encoding. 

With Version 0 cookies, values should not contain white space, brackets, 
parentheses, equals signs, commas, double quotes, slashes, question marks, at 
signs, colons, and semicolons. Empty values may not behave the same way on all 
browsers. 


    newValue - a {@code String} specifying the new value 

*java.net.HttpCookie.setVersion(int)*

public void setVersion(int v)

Sets the version of the cookie protocol this cookie complies with. Version 0 
complies with the original Netscape cookie specification. Version 1 complies 
with RFC 2965/2109. 


    v - 0 if the cookie should comply with the original Netscape specification; 1 if 
       the cookie should comply with RFC 2965/2109 

*java.net.HttpCookie.toString()*

public |java.lang.String| toString()

Constructs a cookie header string representation of this cookie, which is in 
the format defined by corresponding cookie specification, but without the 
leading "Cookie:" token. 



    Returns: a string form of the cookie. The string has the defined format 


