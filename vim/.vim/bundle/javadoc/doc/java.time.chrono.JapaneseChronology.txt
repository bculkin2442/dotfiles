*java.time.chrono.JapaneseChronology* *JapaneseChronology* The Japanese Imperial

public final class JapaneseChronology
  extends    |java.time.chrono.AbstractChronology|
  implements |java.io.Serializable|

|java.time.chrono.JapaneseChronology_Description|
|java.time.chrono.JapaneseChronology_Fields|
|java.time.chrono.JapaneseChronology_Constructors|
|java.time.chrono.JapaneseChronology_Methods|

================================================================================

*java.time.chrono.JapaneseChronology_Fields*
|java.time.chrono.JapaneseChronology_java.time.chrono.JapaneseChronology.INSTANCE|

*java.time.chrono.JapaneseChronology_Methods*
|java.time.chrono.JapaneseChronology.date(Era,int,int,int)|Obtains a local date
|java.time.chrono.JapaneseChronology.date(int,int,int)|Obtains a local date in 
|java.time.chrono.JapaneseChronology.date(TemporalAccessor)|
|java.time.chrono.JapaneseChronology.dateEpochDay(long)|Obtains a local date in
|java.time.chrono.JapaneseChronology.dateNow()|
|java.time.chrono.JapaneseChronology.dateNow(Clock)|
|java.time.chrono.JapaneseChronology.dateNow(ZoneId)|
|java.time.chrono.JapaneseChronology.dateYearDay(Era,int,int)|Obtains a local d
|java.time.chrono.JapaneseChronology.dateYearDay(int,int)|Obtains a local date 
|java.time.chrono.JapaneseChronology.eraOf(int)|Returns the calendar system era
|java.time.chrono.JapaneseChronology.eras()|
|java.time.chrono.JapaneseChronology.getCalendarType()|Gets the calendar type o
|java.time.chrono.JapaneseChronology.getId()|Gets the ID of the chronology - 'J
|java.time.chrono.JapaneseChronology.isLeapYear(long)|Checks if the specified y
|java.time.chrono.JapaneseChronology.localDateTime(TemporalAccessor)|
|java.time.chrono.JapaneseChronology.prolepticYear(Era,int)|
|java.time.chrono.JapaneseChronology.range(ChronoField)|
|java.time.chrono.JapaneseChronology.resolveDate(Map<TemporalField,Long>,ResolverStyle)|
|java.time.chrono.JapaneseChronology.zonedDateTime(Instant,ZoneId)|
|java.time.chrono.JapaneseChronology.zonedDateTime(TemporalAccessor)|

*java.time.chrono.JapaneseChronology_Description*

The Japanese Imperial calendar system. 

This chronology defines the rules of the Japanese Imperial calendar system. 
This calendar system is primarily used in Japan. The Japanese Imperial calendar 
system is the same as the ISO calendar system apart from the era-based year 
numbering. 

Japan introduced the Gregorian calendar starting with Meiji 6. Only Meiji and 
later eras are supported; dates before Meiji 6, January 1 are not supported. 

The supportedChronoFieldinstances are: 

DAY_OF_WEEKDAY_OF_MONTHDAY_OF_YEAREPOCH_DAYMONTH_OF_YEARPROLEPTIC_MONTHYEAR_OF_ERAYEARERA




*java.time.chrono.JapaneseChronology_java.time.chrono.JapaneseChronology.INSTANCE*

Singleton instance for Japanese chronology. 



*java.time.chrono.JapaneseChronology.date(Era,int,int,int)*

public |java.time.chrono.JapaneseDate| date(
  java.time.chrono.Era era,
  int yearOfEra,
  int month,
  int dayOfMonth)

Obtains a local date in Japanese calendar system from the era, year-of-era, 
month-of-year and day-of-month fields. 

The Japanese month and day-of-month are the same as those in the ISO calendar 
system. They are not reset when the era changes. For example: 

6th Jan Showa 64 = ISO 1989-01-06 7th Jan Showa 64 = ISO 1989-01-07 8th Jan 
Heisei 1 = ISO 1989-01-08 9th Jan Heisei 1 = ISO 1989-01-09 


    era - the Japanese era, not null 
    yearOfEra - the year-of-era 
    month - the month-of-year 
    dayOfMonth - the day-of-month 

    Returns: the Japanese local date, not null 

*java.time.chrono.JapaneseChronology.date(int,int,int)*

public |java.time.chrono.JapaneseDate| date(
  int prolepticYear,
  int month,
  int dayOfMonth)

Obtains a local date in Japanese calendar system from the proleptic-year, 
month-of-year and day-of-month fields. 

The Japanese proleptic year, month and day-of-month are the same as those in 
the ISO calendar system. They are not reset when the era changes. 


    prolepticYear - the proleptic-year 
    month - the month-of-year 
    dayOfMonth - the day-of-month 

    Returns: the Japanese local date, not null 

*java.time.chrono.JapaneseChronology.date(TemporalAccessor)*

public |java.time.chrono.JapaneseDate| date(java.time.temporal.TemporalAccessor temporal)





*java.time.chrono.JapaneseChronology.dateEpochDay(long)*

public |java.time.chrono.JapaneseDate| dateEpochDay(long epochDay)

Obtains a local date in the Japanese calendar system from the epoch-day. 


    epochDay - the epoch day 

    Returns: the Japanese local date, not null 

*java.time.chrono.JapaneseChronology.dateNow()*

public |java.time.chrono.JapaneseDate| dateNow()





*java.time.chrono.JapaneseChronology.dateNow(Clock)*

public |java.time.chrono.JapaneseDate| dateNow(java.time.Clock clock)





*java.time.chrono.JapaneseChronology.dateNow(ZoneId)*

public |java.time.chrono.JapaneseDate| dateNow(java.time.ZoneId zone)





*java.time.chrono.JapaneseChronology.dateYearDay(Era,int,int)*

public |java.time.chrono.JapaneseDate| dateYearDay(
  java.time.chrono.Era era,
  int yearOfEra,
  int dayOfYear)

Obtains a local date in Japanese calendar system from the era, year-of-era and 
day-of-year fields. 

The day-of-year in this factory is expressed relative to the start of the 
year-of-era. This definition changes the normal meaning of day-of-year only in 
those years where the year-of-era is reset to one due to a change in the era. 
For example: 

6th Jan Showa 64 = day-of-year 6 7th Jan Showa 64 = day-of-year 7 8th Jan 
Heisei 1 = day-of-year 1 9th Jan Heisei 1 = day-of-year 2 


    era - the Japanese era, not null 
    yearOfEra - the year-of-era 
    dayOfYear - the day-of-year 

    Returns: the Japanese local date, not null 

*java.time.chrono.JapaneseChronology.dateYearDay(int,int)*

public |java.time.chrono.JapaneseDate| dateYearDay(
  int prolepticYear,
  int dayOfYear)

Obtains a local date in Japanese calendar system from the proleptic-year and 
day-of-year fields. 

The day-of-year in this factory is expressed relative to the start of the 
proleptic year. The Japanese proleptic year and day-of-year are the same as 
those in the ISO calendar system. They are not reset when the era changes. 


    prolepticYear - the proleptic-year 
    dayOfYear - the day-of-year 

    Returns: the Japanese local date, not null 

*java.time.chrono.JapaneseChronology.eraOf(int)*

public |java.time.chrono.JapaneseEra| eraOf(int eraValue)

Returns the calendar system era object from the given numeric value. 

See the description of each Era for the numeric values of: 
(|java.time.chrono.JapaneseEra|) , (|java.time.chrono.JapaneseEra|) , 
(|java.time.chrono.JapaneseEra|) , (|java.time.chrono.JapaneseEra|) ), only 
Meiji and later eras are supported. 


    eraValue - the era value 

    Returns: the Japanese {@code Era} for the given numeric era value 

*java.time.chrono.JapaneseChronology.eras()*

public |java.util.List|<Era> eras()





*java.time.chrono.JapaneseChronology.getCalendarType()*

public |java.lang.String| getCalendarType()

Gets the calendar type of the underlying calendar system - 'japanese'. 

The calendar type is an identifier defined by the Unicode Locale Data Markup 
Language (LDML) specification. It can be used to lookup theChronologyusing 
(|java.time.chrono.JapaneseChronology|) . It can also be used as part of a 
locale, accessible via (|java.util.Locale|) with the key 'ca'. 



    Returns: the calendar system type - 'japanese' 

*java.time.chrono.JapaneseChronology.getId()*

public |java.lang.String| getId()

Gets the ID of the chronology - 'Japanese'. 

The ID uniquely identifies theChronology. It can be used to lookup 
theChronologyusing (|java.time.chrono.JapaneseChronology|) . 



    Returns: the chronology ID - 'Japanese' 

*java.time.chrono.JapaneseChronology.isLeapYear(long)*

public boolean isLeapYear(long prolepticYear)

Checks if the specified year is a leap year. 

Japanese calendar leap years occur exactly in line with ISO leap years. This 
method does not validate the year passed in, and only has a well-defined result 
for years in the supported range. 


    prolepticYear - the proleptic-year to check, not validated for range 

    Returns: true if the year is a leap year 

*java.time.chrono.JapaneseChronology.localDateTime(TemporalAccessor)*

public |java.time.chrono.ChronoLocalDateTime|<JapaneseDate> localDateTime(java.time.temporal.TemporalAccessor temporal)





*java.time.chrono.JapaneseChronology.prolepticYear(Era,int)*

public int prolepticYear(
  java.time.chrono.Era era,
  int yearOfEra)





*java.time.chrono.JapaneseChronology.range(ChronoField)*

public |java.time.temporal.ValueRange| range(java.time.temporal.ChronoField field)





*java.time.chrono.JapaneseChronology.resolveDate(Map<TemporalField,Long>,ResolverStyle)*

public |java.time.chrono.JapaneseDate| resolveDate(
  java.util.Map<java.time.temporal.TemporalField, java.lang.Long> fieldValues,
  java.time.format.ResolverStyle resolverStyle)





*java.time.chrono.JapaneseChronology.zonedDateTime(Instant,ZoneId)*

public |java.time.chrono.ChronoZonedDateTime|<JapaneseDate> zonedDateTime(
  java.time.Instant instant,
  java.time.ZoneId zone)





*java.time.chrono.JapaneseChronology.zonedDateTime(TemporalAccessor)*

public |java.time.chrono.ChronoZonedDateTime|<JapaneseDate> zonedDateTime(java.time.temporal.TemporalAccessor temporal)






