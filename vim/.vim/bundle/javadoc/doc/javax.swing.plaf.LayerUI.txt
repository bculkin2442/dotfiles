*javax.swing.plaf.LayerUI* *LayerUI* The base class for alljavax.swing.JLayer's 

public class LayerUI<V extends java.awt.Component>
  extends    |javax.swing.plaf.ComponentUI|
  implements |java.io.Serializable|

|javax.swing.plaf.LayerUI_Description|
|javax.swing.plaf.LayerUI_Fields|
|javax.swing.plaf.LayerUI_Constructors|
|javax.swing.plaf.LayerUI_Methods|

================================================================================

*javax.swing.plaf.LayerUI_Constructors*
|javax.swing.plaf.LayerUI()|

*javax.swing.plaf.LayerUI_Methods*
|javax.swing.plaf.LayerUI.addPropertyChangeListener(PropertyChangeListener)|Add
|javax.swing.plaf.LayerUI.addPropertyChangeListener(String,PropertyChangeListener)|
|javax.swing.plaf.LayerUI.applyPropertyChange(PropertyChangeEvent,JLayer<?extendsV>)|
|javax.swing.plaf.LayerUI.doLayout(JLayer<?extendsV>)|Causes the passed instanc
|javax.swing.plaf.LayerUI.eventDispatched(AWTEvent,JLayer<?extendsV>)|Processes
|javax.swing.plaf.LayerUI.firePropertyChange(String,Object,Object)|Support for 
|javax.swing.plaf.LayerUI.getBaseline(JComponent,int,int)|If theJLayer's view c
|javax.swing.plaf.LayerUI.getBaselineResizeBehavior(JComponent)|If theJLayer's 
|javax.swing.plaf.LayerUI.getMaximumSize(JComponent)|If theJLayer's view compon
|javax.swing.plaf.LayerUI.getMinimumSize(JComponent)|If theJLayer's view compon
|javax.swing.plaf.LayerUI.getPreferredSize(JComponent)|If theJLayer's view comp
|javax.swing.plaf.LayerUI.getPropertyChangeListeners()|Returns an array of all 
|javax.swing.plaf.LayerUI.getPropertyChangeListeners(String)|Returns an array o
|javax.swing.plaf.LayerUI.installUI(JComponent)|Configures theJLayerthisLayerUI
|javax.swing.plaf.LayerUI.paint(Graphics,JComponent)|Paints the specified compo
|javax.swing.plaf.LayerUI.paintImmediately(int,int,int,int,JLayer<?extendsV>)|P
|javax.swing.plaf.LayerUI.processComponentEvent(ComponentEvent,JLayer<?extendsV>)|
|javax.swing.plaf.LayerUI.processFocusEvent(FocusEvent,JLayer<?extendsV>)|Proce
|javax.swing.plaf.LayerUI.processHierarchyBoundsEvent(HierarchyEvent,JLayer<?extendsV>)|
|javax.swing.plaf.LayerUI.processHierarchyEvent(HierarchyEvent,JLayer<?extendsV>)|
|javax.swing.plaf.LayerUI.processInputMethodEvent(InputMethodEvent,JLayer<?extendsV>)|
|javax.swing.plaf.LayerUI.processKeyEvent(KeyEvent,JLayer<?extendsV>)|Processes
|javax.swing.plaf.LayerUI.processMouseEvent(MouseEvent,JLayer<?extendsV>)|Proce
|javax.swing.plaf.LayerUI.processMouseMotionEvent(MouseEvent,JLayer<?extendsV>)|
|javax.swing.plaf.LayerUI.processMouseWheelEvent(MouseWheelEvent,JLayer<?extendsV>)|
|javax.swing.plaf.LayerUI.removePropertyChangeListener(PropertyChangeListener)|
|javax.swing.plaf.LayerUI.removePropertyChangeListener(String,PropertyChangeListener)|
|javax.swing.plaf.LayerUI.uninstallUI(JComponent)|Reverses the configuration wh
|javax.swing.plaf.LayerUI.updateUI(JLayer<?extendsV>)|Invoked whenjavax.swing.J

*javax.swing.plaf.LayerUI_Description*

The base class for all (|javax.swing.JLayer|) 's UI delegates. 
(|javax.swing.plaf.LayerUI|) method performs the painting of theJLayerand 
(|javax.swing.plaf.LayerUI|) method is notified about anyAWTEvents which have 
been generated by aJLayeror any of its subcomponents. 

TheLayerUIdiffers from the UI delegates of the other components, because it is 
LookAndFeel independent and is not updated by default when the system 
LookAndFeel is changed. 

The subclasses ofLayerUIcan either be stateless and shareable by 
multipleJLayers or not shareable. 



*javax.swing.plaf.LayerUI()*

public LayerUI()




*javax.swing.plaf.LayerUI.addPropertyChangeListener(PropertyChangeListener)*

public void addPropertyChangeListener(java.beans.PropertyChangeListener listener)

Adds a PropertyChangeListener to the listener list. The listener is registered 
for all bound properties of this class. 

Iflistenerisnull, no exception is thrown and no action is performed. 


    listener - the property change listener to be added 

*javax.swing.plaf.LayerUI.addPropertyChangeListener(String,PropertyChangeListener)*

public void addPropertyChangeListener(
  java.lang.String propertyName,
  java.beans.PropertyChangeListener listener)

Adds a PropertyChangeListener to the listener list for a specific property. 

IfpropertyNameorlistenerisnull, no exception is thrown and no action is taken. 


    propertyName - one of the property names listed above 
    listener - the property change listener to be added 

*javax.swing.plaf.LayerUI.applyPropertyChange(PropertyChangeEvent,JLayer<?extendsV>)*

public void applyPropertyChange(
  java.beans.PropertyChangeEvent evt,
  javax.swing.JLayer<? extends V> l)

Notifies theLayerUIwhen any of its property are changed and enables updating 
everyJLayerthisLayerUIinstance is set to. 


    evt - the PropertyChangeEvent generated by this {@code LayerUI} 
    l - the {@code JLayer} this LayerUI is set to 

*javax.swing.plaf.LayerUI.doLayout(JLayer<?extendsV>)*

public void doLayout(javax.swing.JLayer<? extends V> l)

Causes the passed instance ofJLayerto lay out its components. 


    l - the {@code JLayer} component where this UI delegate is being installed 

*javax.swing.plaf.LayerUI.eventDispatched(AWTEvent,JLayer<?extendsV>)*

public void eventDispatched(
  java.awt.AWTEvent e,
  javax.swing.JLayer<? extends V> l)

ProcessesAWTEvents forJLayerand all its descendants to thisLayerUIinstance. 

To enable theAWTEvents of a particular type, you call (|javax.swing.JLayer|) in 
(|javax.swing.plaf.LayerUI|) and set the layer event mask to0in 
(|javax.swing.plaf.LayerUI|) after that. By default this method calls the 
appropriateprocess<eventtype>Eventmethod for the given class of event. 

Note: Events are processed only for displayableJLayers. 


    e - the event to be dispatched 
    l - the layer this LayerUI is set to 

*javax.swing.plaf.LayerUI.firePropertyChange(String,Object,Object)*

protected void firePropertyChange(
  java.lang.String propertyName,
  java.lang.Object oldValue,
  java.lang.Object newValue)

Support for reporting bound property changes for Object properties. This method 
can be called when a bound property has changed and it will send the 
appropriate PropertyChangeEvent to any registered PropertyChangeListeners. 


    propertyName - the property whose value has changed 
    oldValue - the property's previous value 
    newValue - the property's new value 

*javax.swing.plaf.LayerUI.getBaseline(JComponent,int,int)*

public int getBaseline(
  javax.swing.JComponent c,
  int width,
  int height)

If theJLayer's view component is notnull, this calls the 
view'sgetBaseline()method. Otherwise, the default implementation is called. 


    c - {@code JLayer} to return baseline resize behavior for 
    width - the width to get the baseline for 
    height - the height to get the baseline for 

    Returns: baseline or a value < 0 indicating there is no reasonable baseline 

*javax.swing.plaf.LayerUI.getBaselineResizeBehavior(JComponent)*

public |java.awt.Component.BaselineResizeBehavior| getBaselineResizeBehavior(javax.swing.JComponent c)

If theJLayer's view component is notnull, this returns the result of the 
view'sgetBaselineResizeBehavior()method. Otherwise, the default implementation 
is called. 


    c - {@code JLayer} to return baseline resize behavior for 

    Returns: an enum indicating how the baseline changes as the component size changes 

*javax.swing.plaf.LayerUI.getMaximumSize(JComponent)*

public |java.awt.Dimension| getMaximumSize(javax.swing.JComponent c)

If theJLayer's view component is notnull, this returns the result of the 
view'sgetMaximumSize()method. Otherwise, the default implementation is used. 


    c - {@code JLayer} to return preferred size for 

    Returns: maximum size for the passed {@code JLayer} 

*javax.swing.plaf.LayerUI.getMinimumSize(JComponent)*

public |java.awt.Dimension| getMinimumSize(javax.swing.JComponent c)

If theJLayer's view component is notnull, this returns the result of the 
view'sgetMinimalSize()method. Otherwise, the default implementation is used. 


    c - {@code JLayer} to return preferred size for 

    Returns: minimal size for the passed {@code JLayer} 

*javax.swing.plaf.LayerUI.getPreferredSize(JComponent)*

public |java.awt.Dimension| getPreferredSize(javax.swing.JComponent c)

If theJLayer's view component is notnull, this returns the result of the 
view'sgetPreferredSize()method. Otherwise, the default implementation is used. 


    c - {@code JLayer} to return preferred size for 

    Returns: preferred size for the passed {@code JLayer} 

*javax.swing.plaf.LayerUI.getPropertyChangeListeners()*

public |java.beans.PropertyChangeListener|[] getPropertyChangeListeners()

Returns an array of all the property change listeners registered on this 
component. 



    Returns: all of this ui's {@code PropertyChangeListener}s or an empty array if no 
             property change listeners are currently registered 

*javax.swing.plaf.LayerUI.getPropertyChangeListeners(String)*

public |java.beans.PropertyChangeListener|[] getPropertyChangeListeners(java.lang.String propertyName)

Returns an array of all the listeners which have been associated with the named 
property. 


    propertyName - The name of the property being listened to 

    Returns: all of the {@code PropertyChangeListener}s associated with the named property; 
             if no such listeners have been added or if {@code propertyName} is 
             {@code null}, an empty array is returned 

*javax.swing.plaf.LayerUI.installUI(JComponent)*

public void installUI(javax.swing.JComponent c)

Configures theJLayerthisLayerUIis set to. The default implementation registers 
the passedJLayercomponent as aPropertyChangeListenerfor the property changes of 
thisLayerUI. 


    c - the {@code JLayer} component where this UI delegate is being installed 

*javax.swing.plaf.LayerUI.paint(Graphics,JComponent)*

public void paint(
  java.awt.Graphics g,
  javax.swing.JComponent c)

Paints the specified component. Subclasses should override this method and use 
the specifiedGraphicsobject to render the content of the component. 

The default implementation paints the passed component as is. 


    g - the {@code Graphics} context in which to paint 
    c - the component being painted 

*javax.swing.plaf.LayerUI.paintImmediately(int,int,int,int,JLayer<?extendsV>)*

public void paintImmediately(
  int x,
  int y,
  int width,
  int height,
  javax.swing.JLayer<? extends V> l)

Paints the specified region in theJLayerthisLayerUIis set to, immediately. 

This method is to be overridden when the dirty region needs to be changed. The 
default implementation delegates its functionality to 
(|javax.swing.JComponent|) . 


    x - the x value of the region to be painted 
    y - the y value of the region to be painted 
    width - the width of the region to be painted 
    height - the height of the region to be painted 

*javax.swing.plaf.LayerUI.processComponentEvent(ComponentEvent,JLayer<?extendsV>)*

protected void processComponentEvent(
  java.awt.event.ComponentEvent e,
  javax.swing.JLayer<? extends V> l)

Processes component events occurring on the (|javax.swing.JLayer|) or any of 
its subcomponents. 

This method is not called unless component events are enabled for 
theJLayerobjects, thisLayerUIis set to. Component events are enabled in the 
overridden (|javax.swing.plaf.LayerUI|) method and should be disabled in the 
(|javax.swing.plaf.LayerUI|) method after that. 

public void installUI(JComponent c) { super.installUI(c); JLayer l = (JLayer) 
c; l.setLayerEventMask(AWTEvent.COMPONENT_EVENT_MASK); } 

public void uninstallUI(JComponent c) { super.uninstallUI(c); JLayer l = 
(JLayer) c; l.setLayerEventMask(0); } 


    e - the {@code ComponentEvent} to be processed 
    l - the layer this {@code LayerUI} instance is set to 

*javax.swing.plaf.LayerUI.processFocusEvent(FocusEvent,JLayer<?extendsV>)*

protected void processFocusEvent(
  java.awt.event.FocusEvent e,
  javax.swing.JLayer<? extends V> l)

Processes focus events occurring on the (|javax.swing.JLayer|) or any of its 
subcomponents. 

This method is not called unless focus events are enabled for theJLayerobjects, 
thisLayerUIis set to. Focus events are enabled in the overridden 
(|javax.swing.plaf.LayerUI|) method and should be disabled in the 
(|javax.swing.plaf.LayerUI|) method after that. 

public void installUI(JComponent c) { super.installUI(c); JLayer l = (JLayer) 
c; l.setLayerEventMask(AWTEvent.FOCUS_EVENT_MASK); } 

public void uninstallUI(JComponent c) { super.uninstallUI(c); JLayer l = 
(JLayer) c; l.setLayerEventMask(0); } 


    e - the {@code FocusEvent} to be processed 
    l - the layer this {@code LayerUI} instance is set to 

*javax.swing.plaf.LayerUI.processHierarchyBoundsEvent(HierarchyEvent,JLayer<?extendsV>)*

protected void processHierarchyBoundsEvent(
  java.awt.event.HierarchyEvent e,
  javax.swing.JLayer<? extends V> l)

Processes hierarchy bounds event occurring on the (|javax.swing.JLayer|) or any 
of its subcomponents. 

This method is not called unless hierarchy bounds events are enabled for 
theJLayerobjects, thisLayerUIis set to. Hierarchy bounds events are enabled in 
the overridden (|javax.swing.plaf.LayerUI|) method and should be disabled in 
the (|javax.swing.plaf.LayerUI|) method after that. 

public void installUI(JComponent c) { super.installUI(c); JLayer l = (JLayer) 
c; l.setLayerEventMask(AWTEvent.HIERARCHY_BOUNDS_EVENT_MASK); } 

public void uninstallUI(JComponent c) { super.uninstallUI(c); JLayer l = 
(JLayer) c; l.setLayerEventMask(0); } 


    e - the {@code HierarchyEvent} to be processed 
    l - the layer this {@code LayerUI} instance is set to 

*javax.swing.plaf.LayerUI.processHierarchyEvent(HierarchyEvent,JLayer<?extendsV>)*

protected void processHierarchyEvent(
  java.awt.event.HierarchyEvent e,
  javax.swing.JLayer<? extends V> l)

Processes hierarchy event occurring on the (|javax.swing.JLayer|) or any of its 
subcomponents. 

This method is not called unless hierarchy events are enabled for 
theJLayerobjects, thisLayerUIis set to. Hierarchy events are enabled in the 
overridden (|javax.swing.plaf.LayerUI|) method and should be disabled in the 
(|javax.swing.plaf.LayerUI|) method after that. 

public void installUI(JComponent c) { super.installUI(c); JLayer l = (JLayer) 
c; l.setLayerEventMask(AWTEvent.HIERARCHY_EVENT_MASK); } 

public void uninstallUI(JComponent c) { super.uninstallUI(c); JLayer l = 
(JLayer) c; l.setLayerEventMask(0); } 


    e - the {@code HierarchyEvent} to be processed 
    l - the layer this {@code LayerUI} instance is set to 

*javax.swing.plaf.LayerUI.processInputMethodEvent(InputMethodEvent,JLayer<?extendsV>)*

protected void processInputMethodEvent(
  java.awt.event.InputMethodEvent e,
  javax.swing.JLayer<? extends V> l)

Processes input event occurring on the (|javax.swing.JLayer|) or any of its 
subcomponents. 

This method is not called unless input events are enabled for theJLayerobjects, 
thisLayerUIis set to. Input events are enabled in the overridden 
(|javax.swing.plaf.LayerUI|) method and should be disabled in the 
(|javax.swing.plaf.LayerUI|) method after that. 

public void installUI(JComponent c) { super.installUI(c); JLayer l = (JLayer) 
c; l.setLayerEventMask(AWTEvent.INPUT_METHOD_EVENT_MASK); } 

public void uninstallUI(JComponent c) { super.uninstallUI(c); JLayer l = 
(JLayer) c; l.setLayerEventMask(0); } 


    e - the {@code InputMethodEvent} to be processed 
    l - the layer this {@code LayerUI} instance is set to 

*javax.swing.plaf.LayerUI.processKeyEvent(KeyEvent,JLayer<?extendsV>)*

protected void processKeyEvent(
  java.awt.event.KeyEvent e,
  javax.swing.JLayer<? extends V> l)

Processes key events occurring on the (|javax.swing.JLayer|) or any of its 
subcomponents. 

This method is not called unless key events are enabled for theJLayerobjects, 
thisLayerUIis set to. Key events are enabled in the overridden 
(|javax.swing.plaf.LayerUI|) method and should be disabled in the 
(|javax.swing.plaf.LayerUI|) method after that. 

public void installUI(JComponent c) { super.installUI(c); JLayer l = (JLayer) 
c; l.setLayerEventMask(AWTEvent.KEY_EVENT_MASK); } 

public void uninstallUI(JComponent c) { super.uninstallUI(c); JLayer l = 
(JLayer) c; l.setLayerEventMask(0); } 


    e - the {@code KeyEvent} to be processed 
    l - the layer this {@code LayerUI} instance is set to 

*javax.swing.plaf.LayerUI.processMouseEvent(MouseEvent,JLayer<?extendsV>)*

protected void processMouseEvent(
  java.awt.event.MouseEvent e,
  javax.swing.JLayer<? extends V> l)

Processes mouse events occurring on the (|javax.swing.JLayer|) or any of its 
subcomponents. 

This method is not called unless mouse events are enabled for theJLayerobjects, 
thisLayerUIis set to. Mouse events are enabled in the overridden 
(|javax.swing.plaf.LayerUI|) method and should be disabled in the 
(|javax.swing.plaf.LayerUI|) method after that. 

public void installUI(JComponent c) { super.installUI(c); JLayer l = (JLayer) 
c; l.setLayerEventMask(AWTEvent.MOUSE_EVENT_MASK); } 

public void uninstallUI(JComponent c) { super.uninstallUI(c); JLayer l = 
(JLayer) c; l.setLayerEventMask(0); } 


    e - the {@code MouseEvent} to be processed 
    l - the layer this {@code LayerUI} instance is set to 

*javax.swing.plaf.LayerUI.processMouseMotionEvent(MouseEvent,JLayer<?extendsV>)*

protected void processMouseMotionEvent(
  java.awt.event.MouseEvent e,
  javax.swing.JLayer<? extends V> l)

Processes mouse motion event occurring on the (|javax.swing.JLayer|) or any of 
its subcomponents. 

This method is not called unless mouse motion events are enabled for 
theJLayerobjects, thisLayerUIis set to. Mouse motion events are enabled in the 
overridden (|javax.swing.plaf.LayerUI|) method and should be disabled in the 
(|javax.swing.plaf.LayerUI|) method after that. 

public void installUI(JComponent c) { super.installUI(c); JLayer l = (JLayer) 
c; l.setLayerEventMask(AWTEvent.MOUSE_MOTION_EVENT_MASK); } 

public void uninstallUI(JComponent c) { super.uninstallUI(c); JLayer l = 
(JLayer) c; l.setLayerEventMask(0); } 


    e - the {@code MouseEvent} to be processed 
    l - the layer this {@code LayerUI} instance is set to 

*javax.swing.plaf.LayerUI.processMouseWheelEvent(MouseWheelEvent,JLayer<?extendsV>)*

protected void processMouseWheelEvent(
  java.awt.event.MouseWheelEvent e,
  javax.swing.JLayer<? extends V> l)

Processes mouse wheel event occurring on the (|javax.swing.JLayer|) or any of 
its subcomponents. 

This method is not called unless mouse wheel events are enabled for 
theJLayerobjects, thisLayerUIis set to. Mouse wheel events are enabled in the 
overridden (|javax.swing.plaf.LayerUI|) method and should be disabled in the 
(|javax.swing.plaf.LayerUI|) method after that. 

public void installUI(JComponent c) { super.installUI(c); JLayer l = (JLayer) 
c; l.setLayerEventMask(AWTEvent.MOUSE_WHEEL_EVENT_MASK); } 

public void uninstallUI(JComponent c) { super.uninstallUI(c); JLayer l = 
(JLayer) c; l.setLayerEventMask(0); } 


    e - the {@code MouseEvent} to be processed 
    l - the layer this {@code LayerUI} instance is set to 

*javax.swing.plaf.LayerUI.removePropertyChangeListener(PropertyChangeListener)*

public void removePropertyChangeListener(java.beans.PropertyChangeListener listener)

Removes a PropertyChangeListener from the listener list. This method should be 
used to remove PropertyChangeListeners that were registered for all bound 
properties of this class. 

Iflistenerisnull, no exception is thrown and no action is performed. 


    listener - the PropertyChangeListener to be removed 

*javax.swing.plaf.LayerUI.removePropertyChangeListener(String,PropertyChangeListener)*

public void removePropertyChangeListener(
  java.lang.String propertyName,
  java.beans.PropertyChangeListener listener)

Removes aPropertyChangeListenerfrom the listener list for a specific property. 
This method should be used to removePropertyChangeListeners that were 
registered for a specific bound property. 

IfpropertyNameorlistenerisnull, no exception is thrown and no action is taken. 


    propertyName - a valid property name 
    listener - the PropertyChangeListener to be removed 

*javax.swing.plaf.LayerUI.uninstallUI(JComponent)*

public void uninstallUI(javax.swing.JComponent c)

Reverses the configuration which was previously set in the 
(|javax.swing.plaf.LayerUI|) method. The default implementation unregisters the 
passedJLayercomponent as aPropertyChangeListenerfor the property changes of 
thisLayerUI. 


    c - the component from which this UI delegate is being removed. 

*javax.swing.plaf.LayerUI.updateUI(JLayer<?extendsV>)*

public void updateUI(javax.swing.JLayer<? extends V> l)

Invoked when (|javax.swing.JLayer|) is called by theJLayerthisLayerUIis set to. 


    l - the {@code JLayer} which UI is updated 


