*java.security.cert.CertStore* *CertStore* A class for retrievingCertificates an

public class CertStore
  extends    |java.lang.Object|

|java.security.cert.CertStore_Description|
|java.security.cert.CertStore_Fields|
|java.security.cert.CertStore_Constructors|
|java.security.cert.CertStore_Methods|

================================================================================

*java.security.cert.CertStore_Constructors*
|java.security.cert.CertStore(CertStoreSpi,Provider,String,CertStoreParameters)|

*java.security.cert.CertStore_Methods*
|java.security.cert.CertStore.getCertificates(CertSelector)|Returns aCollection
|java.security.cert.CertStore.getCertStoreParameters()|Returns the parameters u
|java.security.cert.CertStore.getCRLs(CRLSelector)|Returns aCollectionofCRLs th
|java.security.cert.CertStore.getDefaultType()|Returns the defaultCertStoretype
|java.security.cert.CertStore.getInstance(String,CertStoreParameters)|Returns a
|java.security.cert.CertStore.getInstance(String,CertStoreParameters,Provider)|
|java.security.cert.CertStore.getInstance(String,CertStoreParameters,String)|Re
|java.security.cert.CertStore.getProvider()|Returns the provider of thisCertSto
|java.security.cert.CertStore.getType()|Returns the type of thisCertStore.

*java.security.cert.CertStore_Description*

A class for retrievingCertificates andCRLs from a repository. 

This class uses a provider-based architecture. To create aCertStore, call one 
of the staticgetInstancemethods, passing in the type ofCertStoredesired, any 
applicable initialization parameters and optionally the name of the provider 
desired. 

Once theCertStorehas been created, it can be used to retrieveCertificates 
andCRLs by calling its getCertificates(|java.security.cert.CertStore|) and 
getCRLs(|java.security.cert.CertStore|) methods. 

Unlike a KeyStore(|java.security.KeyStore|) , which provides access to a cache 
of private keys and trusted certificates, aCertStoreis designed to provide 
access to a potentially vast repository of untrusted certificates and CRLs. For 
example, an LDAP implementation ofCertStoreprovides access to certificates and 
CRLs stored in one or more directories using the LDAP protocol and the schema 
as defined in the RFC service attribute. 

Every implementation of the Java platform is required to support the following 
standardCertStoretype: 

Collection 

This type is described in the <a href= 
"/../technotes/guides/security/StandardNames.html#CertStore"> CertStore section 
of the Java Cryptography Architecture Standard Algorithm Name Documentation. 
Consult the release documentation for your implementation to see if any other 
types are supported. 

Concurrent Access 

All public methods ofCertStoreobjects must be thread-safe. That is, multiple 
threads may concurrently invoke these methods on a singleCertStoreobject (or 
more than one) with no ill effects. This allows aCertPathBuilderto search for a 
CRL while simultaneously searching for further certificates, for instance. 

The static methods of this class are also guaranteed to be thread-safe. 
Multiple threads may concurrently invoke the static methods defined in this 
class with no ill effects. 



*java.security.cert.CertStore(CertStoreSpi,Provider,String,CertStoreParameters)*

protected CertStore(
  java.security.cert.CertStoreSpi storeSpi,
  java.security.Provider provider,
  java.lang.String type,
  java.security.cert.CertStoreParameters params)

Creates aCertStoreobject of the given type, and encapsulates the given provider 
implementation (SPI object) in it. 

    storeSpi - the provider implementation 
    provider - the provider 
    type - the type 
    params - the initialization parameters (may be {@code null}) 

*java.security.cert.CertStore.getCertificates(CertSelector)*

public final |java.util.Collection|<? extends java.security.cert.Certificate> getCertificates(java.security.cert.CertSelector selector)
  throws |java.security.cert.CertStoreException|
         
Returns aCollectionofCertificates that match the specified selector. If 
noCertificates match the selector, an emptyCollectionwill be returned. 

For someCertStoretypes, the resultingCollectionmay not contain all of 
theCertificates that match the selector. For instance, an LDAPCertStoremay not 
search all entries in the directory. Instead, it may just search entries that 
are likely to contain theCertificates it is looking for. 

SomeCertStoreimplementations (especially LDAPCertStores) may throw 
aCertStoreExceptionunless a non-nullCertSelectoris provided that includes 
specific criteria that can be used to find the certificates. Issuer and/or 
subject names are especially useful criteria. 


    selector - A {@code CertSelector} used to select which {@code Certificate}s should be 
       returned. Specify {@code null} to return all {@code Certificate}s (if 
       supported). 

    Returns: A {@code Collection} of {@code Certificate}s that match the specified selector 
             (never {@code null}) 

*java.security.cert.CertStore.getCertStoreParameters()*

public final |java.security.cert.CertStoreParameters| getCertStoreParameters()

Returns the parameters used to initialize thisCertStore. Note that 
theCertStoreParametersobject is cloned before it is returned. 



    Returns: the parameters used to initialize this {@code CertStore} (may be {@code null}) 

*java.security.cert.CertStore.getCRLs(CRLSelector)*

public final |java.util.Collection|<? extends java.security.cert.CRL> getCRLs(java.security.cert.CRLSelector selector)
  throws |java.security.cert.CertStoreException|
         
Returns aCollectionofCRLs that match the specified selector. If noCRLs match 
the selector, an emptyCollectionwill be returned. 

For someCertStoretypes, the resultingCollectionmay not contain all of theCRLs 
that match the selector. For instance, an LDAPCertStoremay not search all 
entries in the directory. Instead, it may just search entries that are likely 
to contain theCRLs it is looking for. 

SomeCertStoreimplementations (especially LDAPCertStores) may throw 
aCertStoreExceptionunless a non-nullCRLSelectoris provided that includes 
specific criteria that can be used to find the CRLs. Issuer names and/or the 
certificate to be checked are especially useful. 


    selector - A {@code CRLSelector} used to select which {@code CRL}s should be returned. 
       Specify {@code null} to return all {@code CRL}s (if supported). 

    Returns: A {@code Collection} of {@code CRL}s that match the specified selector (never 
             {@code null}) 

*java.security.cert.CertStore.getDefaultType()*

public static final |java.lang.String| getDefaultType()

Returns the defaultCertStoretype as specified by thecertstore.typesecurity 
property, or the string"LDAP"if no such property exists. 

The defaultCertStoretype can be used by applications that do not want to use a 
hard-coded type when calling one of thegetInstancemethods, and want to provide 
a defaultCertStoretype in case a user does not specify its own. 

The defaultCertStoretype can be changed by setting the value of 
thecertstore.typesecurity property to the desired type. 



    Returns: the default {@code CertStore} type as specified by the {@code certstore.type} 
             security property, or the string {@literal "LDAP"} if no such 
             property exists. 

*java.security.cert.CertStore.getInstance(String,CertStoreParameters)*

public static |java.security.cert.CertStore| getInstance(
  java.lang.String type,
  java.security.cert.CertStoreParameters params)
  throws |java.security.InvalidAlgorithmParameterException|
         |java.security.NoSuchAlgorithmException|
         
Returns aCertStoreobject that implements the specifiedCertStoretype and is 
initialized with the specified parameters. 

This method traverses the list of registered security Providers, starting with 
the most preferred Provider. A new CertStore object encapsulating the 
CertStoreSpi implementation from the first Provider that supports the specified 
type is returned. 

Note that the list of registered providers may be retrieved via the 
Security.getProviders()(|java.security.Security|) method. 

TheCertStorethat is returned is initialized with the 
specifiedCertStoreParameters. The type of parameters needed may vary between 
different types ofCertStores. Note that the specifiedCertStoreParametersobject 
is cloned. 


    type - the name of the requested {@code CertStore} type. See the CertStore section in 
       the Java Cryptography Architecture Standard Algorithm Name Documentation 
       for information about standard types. 
    params - the initialization parameters (may be {@code null}). 

    Returns: a {@code CertStore} object that implements the specified {@code CertStore} 
             type. 

*java.security.cert.CertStore.getInstance(String,CertStoreParameters,Provider)*

public static |java.security.cert.CertStore| getInstance(
  java.lang.String type,
  java.security.cert.CertStoreParameters params,
  java.security.Provider provider)
  throws |java.security.InvalidAlgorithmParameterException|
         |java.security.NoSuchAlgorithmException|
         
Returns aCertStoreobject that implements the specifiedCertStoretype. 

A new CertStore object encapsulating the CertStoreSpi implementation from the 
specified Provider object is returned. Note that the specified Provider object 
does not have to be registered in the provider list. 

TheCertStorethat is returned is initialized with the 
specifiedCertStoreParameters. The type of parameters needed may vary between 
different types ofCertStores. Note that the specifiedCertStoreParametersobject 
is cloned. 


    type - the requested {@code CertStore} type. See the CertStore section in the Java 
       Cryptography Architecture Standard Algorithm Name Documentation for 
       information about standard types. 
    params - the initialization parameters (may be {@code null}). 
    provider - the provider. 

    Returns: a {@code CertStore} object that implements the specified type. 

*java.security.cert.CertStore.getInstance(String,CertStoreParameters,String)*

public static |java.security.cert.CertStore| getInstance(
  java.lang.String type,
  java.security.cert.CertStoreParameters params,
  java.lang.String provider)
  throws |java.security.InvalidAlgorithmParameterException|
         |java.security.NoSuchAlgorithmException|
         |java.security.NoSuchProviderException|
         
Returns aCertStoreobject that implements the specifiedCertStoretype. 

A new CertStore object encapsulating the CertStoreSpi implementation from the 
specified provider is returned. The specified provider must be registered in 
the security provider list. 

Note that the list of registered providers may be retrieved via the 
Security.getProviders()(|java.security.Security|) method. 

TheCertStorethat is returned is initialized with the 
specifiedCertStoreParameters. The type of parameters needed may vary between 
different types ofCertStores. Note that the specifiedCertStoreParametersobject 
is cloned. 


    type - the requested {@code CertStore} type. See the CertStore section in the Java 
       Cryptography Architecture Standard Algorithm Name Documentation for 
       information about standard types. 
    params - the initialization parameters (may be {@code null}). 
    provider - the name of the provider. 

    Returns: a {@code CertStore} object that implements the specified type. 

*java.security.cert.CertStore.getProvider()*

public final |java.security.Provider| getProvider()

Returns the provider of thisCertStore. 



    Returns: the provider of this {@code CertStore} 

*java.security.cert.CertStore.getType()*

public final |java.lang.String| getType()

Returns the type of thisCertStore. 



    Returns: the type of this {@code CertStore} 


