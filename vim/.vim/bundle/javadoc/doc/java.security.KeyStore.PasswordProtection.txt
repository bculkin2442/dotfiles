*java.security.KeyStore.PasswordProtection* *KeyStore.PasswordProtection* A pass

public static class KeyStore.PasswordProtection
  extends    |java.lang.Object|
  implements |java.security.KeyStore.ProtectionParameter|
             |javax.security.auth.Destroyable|

|java.security.KeyStore.PasswordProtection_Description|
|java.security.KeyStore.PasswordProtection_Fields|
|java.security.KeyStore.PasswordProtection_Constructors|
|java.security.KeyStore.PasswordProtection_Methods|

================================================================================

*java.security.KeyStore.PasswordProtection_Constructors*
|java.security.KeyStore.PasswordProtection(char[])|Creates a password parameter
|java.security.KeyStore.PasswordProtection(char[],String,AlgorithmParameterSpec)|

*java.security.KeyStore.PasswordProtection_Methods*
|java.security.KeyStore.PasswordProtection.destroy()|Clears the password.
|java.security.KeyStore.PasswordProtection.getPassword()|Gets the password.
|java.security.KeyStore.PasswordProtection.getProtectionAlgorithm()|Gets the na
|java.security.KeyStore.PasswordProtection.getProtectionParameters()|Gets the p
|java.security.KeyStore.PasswordProtection.isDestroyed()|Determines if password

*java.security.KeyStore.PasswordProtection_Description*

A password-based implementation ofProtectionParameter. 



*java.security.KeyStore.PasswordProtection(char[])*

public PasswordProtection(char[] password)

Creates a password parameter. 

The specifiedpasswordis cloned before it is stored in the 
newPasswordProtectionobject. 

    password - the password, which may be {@code null} 

*java.security.KeyStore.PasswordProtection(char[],String,AlgorithmParameterSpec)*

public PasswordProtection(
  char[] password,
  java.lang.String protectionAlgorithm,
  java.security.spec.AlgorithmParameterSpec protectionParameters)

Creates a password parameter and specifies the protection algorithm and 
associated parameters to use when encrypting a keystore entry. 

The specifiedpasswordis cloned before it is stored in the 
newPasswordProtectionobject. 

    password - the password, which may be {@code null} 
    protectionAlgorithm - the encryption algorithm name, for example, {@code 
       PBEWithHmacSHA256AndAES_256}. See the Cipher section in the Java 
       Cryptography Architecture Standard Algorithm Name Documentation for 
       information about standard encryption algorithm names. 
    protectionParameters - the encryption algorithm parameter specification, which may be {@code null} 

*java.security.KeyStore.PasswordProtection.destroy()*

public synchronized void destroy()
  throws |javax.security.auth.DestroyFailedException|
         
Clears the password. 



*java.security.KeyStore.PasswordProtection.getPassword()*

public synchronized char[] getPassword()

Gets the password. 

Note that this method returns a reference to the password. If a clone of the 
array is created it is the caller's responsibility to zero out the password 
information after it is no longer needed. 



    Returns: the password, which may be {@code null} 

*java.security.KeyStore.PasswordProtection.getProtectionAlgorithm()*

public |java.lang.String| getProtectionAlgorithm()

Gets the name of the protection algorithm. If none was set then the keystore 
provider will use its default protection algorithm. The name of the default 
protection algorithm for a given keystore type is set using 
the'keystore..keyProtectionAlgorithm'security property. For example, 
thekeystore.PKCS12.keyProtectionAlgorithmproperty stores the name of the 
default key protection algorithm used for PKCS12 keystores. If the security 
property is not set, an implementation-specific algorithm will be used. 



    Returns: the algorithm name, or {@code null} if none was set 

*java.security.KeyStore.PasswordProtection.getProtectionParameters()*

public |java.security.spec.AlgorithmParameterSpec| getProtectionParameters()

Gets the parameters supplied for the protection algorithm. 



    Returns: the algorithm parameter specification, or {@code null}, if none was set 

*java.security.KeyStore.PasswordProtection.isDestroyed()*

public synchronized boolean isDestroyed()

Determines if password has been cleared. 



    Returns: true if the password has been cleared, false otherwise 


