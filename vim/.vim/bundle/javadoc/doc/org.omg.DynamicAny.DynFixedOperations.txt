*org.omg.DynamicAny.DynFixedOperations* *DynFixedOperations* DynFixed objects su

public interface interface DynFixedOperations

  implements |org.omg.DynamicAny.DynAnyOperations|

|org.omg.DynamicAny.DynFixedOperations_Description|
|org.omg.DynamicAny.DynFixedOperations_Fields|
|org.omg.DynamicAny.DynFixedOperations_Constructors|
|org.omg.DynamicAny.DynFixedOperations_Methods|

================================================================================

*org.omg.DynamicAny.DynFixedOperations_Methods*
|org.omg.DynamicAny.DynFixedOperations.get_value()|Returns the value of a DynFi
|org.omg.DynamicAny.DynFixedOperations.set_value(String)|Sets the value of the 

*org.omg.DynamicAny.DynFixedOperations_Description*

DynFixed objects support the manipulation of IDL fixed values. Because IDL does 
not have a generic type that can represent fixed types with arbitrary number of 
digits and arbitrary scale, the operations use the IDL string type. 



*org.omg.DynamicAny.DynFixedOperations.get_value()*

public |java.lang.String| get_value()

Returns the value of a DynFixed. 



*org.omg.DynamicAny.DynFixedOperations.set_value(String)*

public boolean set_value(java.lang.String val)
  throws |org.omg.DynamicAny.DynAnyPackage.InvalidValue|
         |org.omg.DynamicAny.DynAnyPackage.TypeMismatch|
         
Sets the value of the DynFixed. The val string must contain a fixed string 
constant in the same format as used for IDL fixed-point literals. However, the 
trailing d or D is optional. The return value is true if val can be represented 
as the DynFixed without loss of precision. If val has more fractional digits 
than can be represented in the DynFixed, fractional digits are truncated and 
the return value is false. 




