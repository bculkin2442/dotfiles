*javax.swing.plaf.synth.SynthTextPaneUI* *SynthTextPaneUI* Provides the look and

public class SynthTextPaneUI
  extends    |javax.swing.plaf.synth.SynthEditorPaneUI|

|javax.swing.plaf.synth.SynthTextPaneUI_Description|
|javax.swing.plaf.synth.SynthTextPaneUI_Fields|
|javax.swing.plaf.synth.SynthTextPaneUI_Constructors|
|javax.swing.plaf.synth.SynthTextPaneUI_Methods|

================================================================================

*javax.swing.plaf.synth.SynthTextPaneUI_Constructors*
|javax.swing.plaf.synth.SynthTextPaneUI()|

*javax.swing.plaf.synth.SynthTextPaneUI_Methods*
|javax.swing.plaf.synth.SynthTextPaneUI.createUI(JComponent)|Creates a UI for t
|javax.swing.plaf.synth.SynthTextPaneUI.getPropertyPrefix()|Fetches the name us
|javax.swing.plaf.synth.SynthTextPaneUI.installUI(JComponent)|Installs the UI f
|javax.swing.plaf.synth.SynthTextPaneUI.paintBorder(SynthContext,Graphics,int,int,int,int)|
|javax.swing.plaf.synth.SynthTextPaneUI.propertyChange(PropertyChangeEvent)|Thi

*javax.swing.plaf.synth.SynthTextPaneUI_Description*

Provides the look and feel for a styled text editor in the Synth look and feel. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeans has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 



*javax.swing.plaf.synth.SynthTextPaneUI()*

public SynthTextPaneUI()




*javax.swing.plaf.synth.SynthTextPaneUI.createUI(JComponent)*

public static |javax.swing.plaf.ComponentUI| createUI(javax.swing.JComponent c)

Creates a UI for the JTextPane. 


    c - the JTextPane object 

    Returns: the UI object 

*javax.swing.plaf.synth.SynthTextPaneUI.getPropertyPrefix()*

protected |java.lang.String| getPropertyPrefix()

Fetches the name used as a key to lookup properties through the UIManager. This 
is used as a prefix to all the standard text properties. 



    Returns: the name ("TextPane") 

*javax.swing.plaf.synth.SynthTextPaneUI.installUI(JComponent)*

public void installUI(javax.swing.JComponent c)

Installs the UI for a component. This does the following things. 

Sets opaqueness of the associated component according to its style, if the 
opaque property has not already been set by the client program. 

Installs the default caret and highlighter into the associated component. These 
properties are only set if their current value is eithernullor an instance of 
(|javax.swing.plaf.UIResource|) . 

Attaches to the editor and model. If there is no model, a default one is 
created. 

Creates the view factory and the view hierarchy used to represent the model. 


    c - the editor component 

*javax.swing.plaf.synth.SynthTextPaneUI.paintBorder(SynthContext,Graphics,int,int,int,int)*

public void paintBorder(
  javax.swing.plaf.synth.SynthContext context,
  java.awt.Graphics g,
  int x,
  int y,
  int w,
  int h)





*javax.swing.plaf.synth.SynthTextPaneUI.propertyChange(PropertyChangeEvent)*

protected void propertyChange(java.beans.PropertyChangeEvent evt)

This method gets called when a bound property is changed on the associated 
JTextComponent. This is a hook which UI implementations may change to reflect 
how the UI displays bound properties of JTextComponent subclasses. If the font, 
foreground or document has changed, the the appropriate property is set in the 
default style of the document. 


    evt - the property change event 


