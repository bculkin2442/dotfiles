*java.time.LocalTime* *LocalTime* A time without time-zone in the ISO-8601 calen

public final class LocalTime
  extends    |java.lang.Object|
  implements |java.time.temporal.Temporal|
             |java.time.temporal.TemporalAdjuster|
             |java.lang.Comparable|
             |java.io.Serializable|

|java.time.LocalTime_Description|
|java.time.LocalTime_Fields|
|java.time.LocalTime_Constructors|
|java.time.LocalTime_Methods|

================================================================================

*java.time.LocalTime_Fields*
|java.time.LocalTime_java.time.LocalTime.MAX|
|java.time.LocalTime_java.time.LocalTime.MIDNIGHT|
|java.time.LocalTime_java.time.LocalTime.MIN|
|java.time.LocalTime_java.time.LocalTime.NOON|

*java.time.LocalTime_Methods*
|java.time.LocalTime.adjustInto(Temporal)|Adjusts the specified temporal object
|java.time.LocalTime.atDate(LocalDate)|Combines this time with a date to create
|java.time.LocalTime.atOffset(ZoneOffset)|Combines this time with an offset to 
|java.time.LocalTime.compareTo(LocalTime)|Compares thisLocalTimeto another time
|java.time.LocalTime.equals(Object)|Checks if this time is equal to another tim
|java.time.LocalTime.format(DateTimeFormatter)|Formats this time using the spec
|java.time.LocalTime.from(TemporalAccessor)|Obtains an instance ofLocalTimefrom
|java.time.LocalTime.get(TemporalField)|Gets the value of the specified field f
|java.time.LocalTime.getHour()|Gets the hour-of-day field.
|java.time.LocalTime.getLong(TemporalField)|Gets the value of the specified fie
|java.time.LocalTime.getMinute()|Gets the minute-of-hour field.
|java.time.LocalTime.getNano()|Gets the nano-of-second field.
|java.time.LocalTime.getSecond()|Gets the second-of-minute field.
|java.time.LocalTime.hashCode()|A hash code for this time.
|java.time.LocalTime.isAfter(LocalTime)|Checks if thisLocalTimeis after the spe
|java.time.LocalTime.isBefore(LocalTime)|Checks if thisLocalTimeis before the s
|java.time.LocalTime.isSupported(TemporalField)|Checks if the specified field i
|java.time.LocalTime.isSupported(TemporalUnit)|Checks if the specified unit is 
|java.time.LocalTime.minus(long,TemporalUnit)|Returns a copy of this time with 
|java.time.LocalTime.minus(TemporalAmount)|Returns a copy of this time with the
|java.time.LocalTime.minusHours(long)|Returns a copy of thisLocalTimewith the s
|java.time.LocalTime.minusMinutes(long)|Returns a copy of thisLocalTimewith the
|java.time.LocalTime.minusNanos(long)|Returns a copy of thisLocalTimewith the s
|java.time.LocalTime.minusSeconds(long)|Returns a copy of thisLocalTimewith the
|java.time.LocalTime.now()|Obtains the current time from the system clock in th
|java.time.LocalTime.now(Clock)|Obtains the current time from the specified clo
|java.time.LocalTime.now(ZoneId)|Obtains the current time from the system clock
|java.time.LocalTime.of(int,int)|Obtains an instance ofLocalTimefrom an hour an
|java.time.LocalTime.of(int,int,int)|Obtains an instance ofLocalTimefrom an hou
|java.time.LocalTime.of(int,int,int,int)|Obtains an instance ofLocalTimefrom an
|java.time.LocalTime.ofNanoOfDay(long)|Obtains an instance ofLocalTimefrom a na
|java.time.LocalTime.ofSecondOfDay(long)|Obtains an instance ofLocalTimefrom a 
|java.time.LocalTime.parse(CharSequence)|Obtains an instance ofLocalTimefrom a 
|java.time.LocalTime.parse(CharSequence,DateTimeFormatter)|Obtains an instance 
|java.time.LocalTime.plus(long,TemporalUnit)|Returns a copy of this time with t
|java.time.LocalTime.plus(TemporalAmount)|Returns a copy of this time with the 
|java.time.LocalTime.plusHours(long)|Returns a copy of thisLocalTimewith the sp
|java.time.LocalTime.plusMinutes(long)|Returns a copy of thisLocalTimewith the 
|java.time.LocalTime.plusNanos(long)|Returns a copy of thisLocalTimewith the sp
|java.time.LocalTime.plusSeconds(long)|Returns a copy of thisLocalTimewith the 
|java.time.LocalTime.query(TemporalQuery<R>)|Queries this time using the specif
|java.time.LocalTime.range(TemporalField)|Gets the range of valid values for th
|java.time.LocalTime.toNanoOfDay()|Extracts the time as nanos of day,  from0to2
|java.time.LocalTime.toSecondOfDay()|Extracts the time as seconds of day,  from
|java.time.LocalTime.toString()|Outputs this time as aString, such as10:15.
|java.time.LocalTime.truncatedTo(TemporalUnit)|Returns a copy of thisLocalTimew
|java.time.LocalTime.until(Temporal,TemporalUnit)|Calculates the amount of time
|java.time.LocalTime.with(TemporalAdjuster)|Returns an adjusted copy of this ti
|java.time.LocalTime.with(TemporalField,long)|Returns a copy of this time with 
|java.time.LocalTime.withHour(int)|Returns a copy of thisLocalTimewith the hour
|java.time.LocalTime.withMinute(int)|Returns a copy of thisLocalTimewith the mi
|java.time.LocalTime.withNano(int)|Returns a copy of thisLocalTimewith the nano
|java.time.LocalTime.withSecond(int)|Returns a copy of thisLocalTimewith the se

*java.time.LocalTime_Description*

A time without time-zone in the ISO-8601 calendar system, such as10:15:30. 
LocalTimeis an immutable date-time object that represents a time, often viewed 
as hour-minute-second. Time is represented to nanosecond precision. For 
example, the value "13:45.30.123456789" can be stored in aLocalTime. 

It does not store or represent a date or time-zone. Instead, it is a 
description of the local time as seen on a wall clock. It cannot represent an 
instant on the time-line without additional information such as an offset or 
time-zone. 

The ISO-8601 calendar system is the modern civil calendar system used today in 
most of the world. This API assumes that all calendar systems use the same 
representation, this class, for time-of-day. 

This is a <a href="/java/lang/doc-files/ValueBased.html">value-based class; use 
of identity-sensitive operations (including reference equality (==), identity 
hash code, or synchronization) on instances ofLocalTimemay have unpredictable 
results and should be avoided. Theequalsmethod should be used for comparisons. 



*java.time.LocalTime_java.time.LocalTime.MAX*

The maximum supportedLocalTime, '23:59:59.999999999'. This is the time just 
before midnight at the end of the day. 


*java.time.LocalTime_java.time.LocalTime.MIDNIGHT*

The time of midnight at the start of the day, '00:00'. 


*java.time.LocalTime_java.time.LocalTime.MIN*

The minimum supportedLocalTime, '00:00'. This is the time of midnight at the 
start of the day. 


*java.time.LocalTime_java.time.LocalTime.NOON*

The time of noon in the middle of the day, '12:00'. 



*java.time.LocalTime.adjustInto(Temporal)*

public |java.time.temporal.Temporal| adjustInto(java.time.temporal.Temporal temporal)

Adjusts the specified temporal object to have the same time as this object. 

This returns a temporal object of the same observable type as the input with 
the time changed to be the same as this. 

The adjustment is equivalent to using (|java.time.temporal.Temporal|) passing 
(|java.time.temporal.ChronoField|) as the field. 

In most cases, it is clearer to reverse the calling pattern by using 
(|java.time.temporal.Temporal|) : 

// these two lines are equivalent, but the second approach is recommended 
temporal = thisLocalTime.adjustInto(temporal); temporal = 
temporal.with(thisLocalTime); 

This instance is immutable and unaffected by this method call. 


    temporal - the target object to be adjusted, not null 

    Returns: the adjusted object, not null 

*java.time.LocalTime.atDate(LocalDate)*

public |java.time.LocalDateTime| atDate(java.time.LocalDate date)

Combines this time with a date to create aLocalDateTime. 

This returns aLocalDateTimeformed from this time at the specified date. All 
possible combinations of date and time are valid. 


    date - the date to combine with, not null 

    Returns: the local date-time formed from this time and the specified date, not null 

*java.time.LocalTime.atOffset(ZoneOffset)*

public |java.time.OffsetTime| atOffset(java.time.ZoneOffset offset)

Combines this time with an offset to create anOffsetTime. 

This returns anOffsetTimeformed from this time at the specified offset. All 
possible combinations of time and offset are valid. 


    offset - the offset to combine with, not null 

    Returns: the offset time formed from this time and the specified offset, not null 

*java.time.LocalTime.compareTo(LocalTime)*

public int compareTo(java.time.LocalTime other)

Compares thisLocalTimeto another time. 

The comparison is based on the time-line position of the local times within a 
day. It is "consistent with equals", as defined by (|java.lang.Comparable|) . 


    other - the other time to compare to, not null 

    Returns: the comparator value, negative if less, positive if greater 

*java.time.LocalTime.equals(Object)*

public boolean equals(java.lang.Object obj)

Checks if this time is equal to another time. 

The comparison is based on the time-line position of the time within a day. 

Only objects of typeLocalTimeare compared, other types return false. To compare 
the date of twoTemporalAccessorinstances, use 
(|java.time.temporal.ChronoField|) as a comparator. 


    obj - the object to check, null returns false 

    Returns: true if this is equal to the other time 

*java.time.LocalTime.format(DateTimeFormatter)*

public |java.lang.String| format(java.time.format.DateTimeFormatter formatter)

Formats this time using the specified formatter. 

This time will be passed to the formatter to produce a string. 


    formatter - the formatter to use, not null 

    Returns: the formatted time string, not null 

*java.time.LocalTime.from(TemporalAccessor)*

public static |java.time.LocalTime| from(java.time.temporal.TemporalAccessor temporal)

Obtains an instance ofLocalTimefrom a temporal object. 

This obtains a local time based on the specified temporal. 
ATemporalAccessorrepresents an arbitrary set of date and time information, 
which this factory converts to an instance ofLocalTime. 

The conversion uses the (|java.time.temporal.TemporalQueries|) query, which 
relies on extracting the NANO_OF_DAY(|java.time.temporal.ChronoField|) field. 

This method matches the signature of the functional interface 
(|java.time.temporal.TemporalQuery|) allowing it to be used in queries via 
method reference,LocalTime::from. 


    temporal - the temporal object to convert, not null 

    Returns: the local time, not null 

*java.time.LocalTime.get(TemporalField)*

public int get(java.time.temporal.TemporalField field)

Gets the value of the specified field from this time as anint. 

This queries this time for the value for the specified field. The returned 
value will always be within the valid range of values for the field. If it is 
not possible to return the value, because the field is not supported or for 
some other reason, an exception is thrown. 

If the field is a (|java.time.temporal.ChronoField|) then the query is 
implemented here. The supported fields(|java.time.LocalTime|) will return valid 
values based on this time, exceptNANO_OF_DAYandMICRO_OF_DAYwhich are too large 
to fit in anintand throw aDateTimeException. All otherChronoFieldinstances will 
throw anUnsupportedTemporalTypeException. 

If the field is not aChronoField, then the result of this method is obtained by 
invokingTemporalField.getFrom(TemporalAccessor)passingthisas the argument. 
Whether the value can be obtained, and what the value represents, is determined 
by the field. 


    field - the field to get, not null 

    Returns: the value for the field 

*java.time.LocalTime.getHour()*

public int getHour()

Gets the hour-of-day field. 



    Returns: the hour-of-day, from 0 to 23 

*java.time.LocalTime.getLong(TemporalField)*

public long getLong(java.time.temporal.TemporalField field)

Gets the value of the specified field from this time as along. 

This queries this time for the value for the specified field. If it is not 
possible to return the value, because the field is not supported or for some 
other reason, an exception is thrown. 

If the field is a (|java.time.temporal.ChronoField|) then the query is 
implemented here. The supported fields(|java.time.LocalTime|) will return valid 
values based on this time. All otherChronoFieldinstances will throw 
anUnsupportedTemporalTypeException. 

If the field is not aChronoField, then the result of this method is obtained by 
invokingTemporalField.getFrom(TemporalAccessor)passingthisas the argument. 
Whether the value can be obtained, and what the value represents, is determined 
by the field. 


    field - the field to get, not null 

    Returns: the value for the field 

*java.time.LocalTime.getMinute()*

public int getMinute()

Gets the minute-of-hour field. 



    Returns: the minute-of-hour, from 0 to 59 

*java.time.LocalTime.getNano()*

public int getNano()

Gets the nano-of-second field. 



    Returns: the nano-of-second, from 0 to 999,999,999 

*java.time.LocalTime.getSecond()*

public int getSecond()

Gets the second-of-minute field. 



    Returns: the second-of-minute, from 0 to 59 

*java.time.LocalTime.hashCode()*

public int hashCode()

A hash code for this time. 



    Returns: a suitable hash code 

*java.time.LocalTime.isAfter(LocalTime)*

public boolean isAfter(java.time.LocalTime other)

Checks if thisLocalTimeis after the specified time. 

The comparison is based on the time-line position of the time within a day. 


    other - the other time to compare to, not null 

    Returns: true if this is after the specified time 

*java.time.LocalTime.isBefore(LocalTime)*

public boolean isBefore(java.time.LocalTime other)

Checks if thisLocalTimeis before the specified time. 

The comparison is based on the time-line position of the time within a day. 


    other - the other time to compare to, not null 

    Returns: true if this point is before the specified time 

*java.time.LocalTime.isSupported(TemporalField)*

public boolean isSupported(java.time.temporal.TemporalField field)

Checks if the specified field is supported. 

This checks if this time can be queried for the specified field. If false, then 
calling the range(|java.time.LocalTime|) , get(|java.time.LocalTime|) and 
(|java.time.LocalTime|) methods will throw an exception. 

If the field is a (|java.time.temporal.ChronoField|) then the query is 
implemented here. The supported fields are: 

NANO_OF_SECONDNANO_OF_DAYMICRO_OF_SECONDMICRO_OF_DAYMILLI_OF_SECONDMILLI_OF_DAYSECOND_OF_MINUTESECOND_OF_DAYMINUTE_OF_HOURMINUTE_OF_DAYHOUR_OF_AMPMCLOCK_HOUR_OF_AMPMHOUR_OF_DAYCLOCK_HOUR_OF_DAYAMPM_OF_DAY
All otherChronoFieldinstances will return false. 

If the field is not aChronoField, then the result of this method is obtained by 
invokingTemporalField.isSupportedBy(TemporalAccessor)passingthisas the 
argument. Whether the field is supported is determined by the field. 


    field - the field to check, null returns false 

    Returns: true if the field is supported on this time, false if not 

*java.time.LocalTime.isSupported(TemporalUnit)*

public boolean isSupported(java.time.temporal.TemporalUnit unit)

Checks if the specified unit is supported. 

This checks if the specified unit can be added to, or subtracted from, this 
date-time. If false, then calling the (|java.time.LocalTime|) and 
minus(|java.time.LocalTime|) methods will throw an exception. 

If the unit is a (|java.time.temporal.ChronoUnit|) then the query is 
implemented here. The supported units are: 

NANOSMICROSMILLISSECONDSMINUTESHOURSHALF_DAYS All otherChronoUnitinstances will 
return false. 

If the unit is not aChronoUnit, then the result of this method is obtained by 
invokingTemporalUnit.isSupportedBy(Temporal)passingthisas the argument. Whether 
the unit is supported is determined by the unit. 


    unit - the unit to check, null returns false 

    Returns: true if the unit can be added/subtracted, false if not 

*java.time.LocalTime.minus(long,TemporalUnit)*

public |java.time.LocalTime| minus(
  long amountToSubtract,
  java.time.temporal.TemporalUnit unit)

Returns a copy of this time with the specified amount subtracted. 

This returns aLocalTime, based on this one, with the amount in terms of the 
unit subtracted. If it is not possible to subtract the amount, because the unit 
is not supported or for some other reason, an exception is thrown. 

This method is equivalent to (|java.time.LocalTime|) with the amount negated. 
See that method for a full description of how addition, and thus subtraction, 
works. 

This instance is immutable and unaffected by this method call. 


    amountToSubtract - the amount of the unit to subtract from the result, may be negative 
    unit - the unit of the amount to subtract, not null 

    Returns: a {@code LocalTime} based on this time with the specified amount subtracted, 
             not null 

*java.time.LocalTime.minus(TemporalAmount)*

public |java.time.LocalTime| minus(java.time.temporal.TemporalAmount amountToSubtract)

Returns a copy of this time with the specified amount subtracted. 

This returns aLocalTime, based on this one, with the specified amount 
subtracted. The amount is typically (|java.time.Duration|) but may be any other 
type implementing the (|java.time.temporal.TemporalAmount|) interface. 

The calculation is delegated to the amount object by calling 
(|java.time.temporal.TemporalAmount|) . The amount implementation is free to 
implement the subtraction in any way it wishes, however it typically calls back 
to (|java.time.LocalTime|) . Consult the documentation of the amount 
implementation to determine if it can be successfully subtracted. 

This instance is immutable and unaffected by this method call. 


    amountToSubtract - the amount to subtract, not null 

    Returns: a {@code LocalTime} based on this time with the subtraction made, not null 

*java.time.LocalTime.minusHours(long)*

public |java.time.LocalTime| minusHours(long hoursToSubtract)

Returns a copy of thisLocalTimewith the specified period in hours subtracted. 

This subtracts the specified number of hours from this time, returning a new 
time. The calculation wraps around midnight. 

This instance is immutable and unaffected by this method call. 


    hoursToSubtract - the hours to subtract, may be negative 

    Returns: a {@code LocalTime} based on this time with the hours subtracted, not null 

*java.time.LocalTime.minusMinutes(long)*

public |java.time.LocalTime| minusMinutes(long minutesToSubtract)

Returns a copy of thisLocalTimewith the specified period in minutes subtracted. 

This subtracts the specified number of minutes from this time, returning a new 
time. The calculation wraps around midnight. 

This instance is immutable and unaffected by this method call. 


    minutesToSubtract - the minutes to subtract, may be negative 

    Returns: a {@code LocalTime} based on this time with the minutes subtracted, not null 

*java.time.LocalTime.minusNanos(long)*

public |java.time.LocalTime| minusNanos(long nanosToSubtract)

Returns a copy of thisLocalTimewith the specified period in nanoseconds 
subtracted. 

This subtracts the specified number of nanoseconds from this time, returning a 
new time. The calculation wraps around midnight. 

This instance is immutable and unaffected by this method call. 


    nanosToSubtract - the nanos to subtract, may be negative 

    Returns: a {@code LocalTime} based on this time with the nanoseconds subtracted, not 
             null 

*java.time.LocalTime.minusSeconds(long)*

public |java.time.LocalTime| minusSeconds(long secondsToSubtract)

Returns a copy of thisLocalTimewith the specified period in seconds subtracted. 

This subtracts the specified number of seconds from this time, returning a new 
time. The calculation wraps around midnight. 

This instance is immutable and unaffected by this method call. 


    secondsToSubtract - the seconds to subtract, may be negative 

    Returns: a {@code LocalTime} based on this time with the seconds subtracted, not null 

*java.time.LocalTime.now()*

public static |java.time.LocalTime| now()

Obtains the current time from the system clock in the default time-zone. 

This will query the system clock(|java.time.Clock|) in the default time-zone to 
obtain the current time. 

Using this method will prevent the ability to use an alternate clock for 
testing because the clock is hard-coded. 



    Returns: the current time using the system clock and default time-zone, not null 

*java.time.LocalTime.now(Clock)*

public static |java.time.LocalTime| now(java.time.Clock clock)

Obtains the current time from the specified clock. 

This will query the specified clock to obtain the current time. Using this 
method allows the use of an alternate clock for testing. The alternate clock 
may be introduced using dependency injection(|java.time.Clock|) . 


    clock - the clock to use, not null 

    Returns: the current time, not null 

*java.time.LocalTime.now(ZoneId)*

public static |java.time.LocalTime| now(java.time.ZoneId zone)

Obtains the current time from the system clock in the specified time-zone. 

This will query the system clock(|java.time.Clock|) to obtain the current time. 
Specifying the time-zone avoids dependence on the default time-zone. 

Using this method will prevent the ability to use an alternate clock for 
testing because the clock is hard-coded. 


    zone - the zone ID to use, not null 

    Returns: the current time using the system clock, not null 

*java.time.LocalTime.of(int,int)*

public static |java.time.LocalTime| of(
  int hour,
  int minute)

Obtains an instance ofLocalTimefrom an hour and minute. 

This returns aLocalTimewith the specified hour and minute. The second and 
nanosecond fields will be set to zero. 


    hour - the hour-of-day to represent, from 0 to 23 
    minute - the minute-of-hour to represent, from 0 to 59 

    Returns: the local time, not null 

*java.time.LocalTime.of(int,int,int)*

public static |java.time.LocalTime| of(
  int hour,
  int minute,
  int second)

Obtains an instance ofLocalTimefrom an hour, minute and second. 

This returns aLocalTimewith the specified hour, minute and second. The 
nanosecond field will be set to zero. 


    hour - the hour-of-day to represent, from 0 to 23 
    minute - the minute-of-hour to represent, from 0 to 59 
    second - the second-of-minute to represent, from 0 to 59 

    Returns: the local time, not null 

*java.time.LocalTime.of(int,int,int,int)*

public static |java.time.LocalTime| of(
  int hour,
  int minute,
  int second,
  int nanoOfSecond)

Obtains an instance ofLocalTimefrom an hour, minute, second and nanosecond. 

This returns aLocalTimewith the specified hour, minute, second and nanosecond. 


    hour - the hour-of-day to represent, from 0 to 23 
    minute - the minute-of-hour to represent, from 0 to 59 
    second - the second-of-minute to represent, from 0 to 59 
    nanoOfSecond - the nano-of-second to represent, from 0 to 999,999,999 

    Returns: the local time, not null 

*java.time.LocalTime.ofNanoOfDay(long)*

public static |java.time.LocalTime| ofNanoOfDay(long nanoOfDay)

Obtains an instance ofLocalTimefrom a nanos-of-day value. 

This returns aLocalTimewith the specified nanosecond-of-day. 


    nanoOfDay - the nano of day, from {@code 0} to {@code 24 * 60 * 60 * 1,000,000,000 - 1} 

    Returns: the local time, not null 

*java.time.LocalTime.ofSecondOfDay(long)*

public static |java.time.LocalTime| ofSecondOfDay(long secondOfDay)

Obtains an instance ofLocalTimefrom a second-of-day value. 

This returns aLocalTimewith the specified second-of-day. The nanosecond field 
will be set to zero. 


    secondOfDay - the second-of-day, from {@code 0} to {@code 24 * 60 * 60 - 1} 

    Returns: the local time, not null 

*java.time.LocalTime.parse(CharSequence)*

public static |java.time.LocalTime| parse(java.lang.CharSequence text)

Obtains an instance ofLocalTimefrom a text string such as10:15. 

The string must represent a valid time and is parsed using 
(|java.time.format.DateTimeFormatter|) . 


    text - the text to parse such as "10:15:30", not null 

    Returns: the parsed local time, not null 

*java.time.LocalTime.parse(CharSequence,DateTimeFormatter)*

public static |java.time.LocalTime| parse(
  java.lang.CharSequence text,
  java.time.format.DateTimeFormatter formatter)

Obtains an instance ofLocalTimefrom a text string using a specific formatter. 

The text is parsed using the formatter, returning a time. 


    text - the text to parse, not null 
    formatter - the formatter to use, not null 

    Returns: the parsed local time, not null 

*java.time.LocalTime.plus(long,TemporalUnit)*

public |java.time.LocalTime| plus(
  long amountToAdd,
  java.time.temporal.TemporalUnit unit)

Returns a copy of this time with the specified amount added. 

This returns aLocalTime, based on this one, with the amount in terms of the 
unit added. If it is not possible to add the amount, because the unit is not 
supported or for some other reason, an exception is thrown. 

If the field is a (|java.time.temporal.ChronoUnit|) then the addition is 
implemented here. The supported fields behave as follows: 

NANOS- Returns aLocalTimewith the specified number of nanoseconds added. This 
is equivalent to (|java.time.LocalTime|) . MICROS- Returns aLocalTimewith the 
specified number of microseconds added. This is equivalent to 
(|java.time.LocalTime|) with the amount multiplied by 1,000. MILLIS- Returns 
aLocalTimewith the specified number of milliseconds added. This is equivalent 
to (|java.time.LocalTime|) with the amount multiplied by 1,000,000. SECONDS- 
Returns aLocalTimewith the specified number of seconds added. This is 
equivalent to (|java.time.LocalTime|) . MINUTES- Returns aLocalTimewith the 
specified number of minutes added. This is equivalent to 
(|java.time.LocalTime|) . HOURS- Returns aLocalTimewith the specified number of 
hours added. This is equivalent to (|java.time.LocalTime|) . HALF_DAYS- Returns 
aLocalTimewith the specified number of half-days added. This is equivalent to 
(|java.time.LocalTime|) with the amount multiplied by 12. 

All otherChronoUnitinstances will throw anUnsupportedTemporalTypeException. 

If the field is not aChronoUnit, then the result of this method is obtained by 
invokingTemporalUnit.addTo(Temporal, long)passingthisas the argument. In this 
case, the unit determines whether and how to perform the addition. 

This instance is immutable and unaffected by this method call. 


    amountToAdd - the amount of the unit to add to the result, may be negative 
    unit - the unit of the amount to add, not null 

    Returns: a {@code LocalTime} based on this time with the specified amount added, not 
             null 

*java.time.LocalTime.plus(TemporalAmount)*

public |java.time.LocalTime| plus(java.time.temporal.TemporalAmount amountToAdd)

Returns a copy of this time with the specified amount added. 

This returns aLocalTime, based on this one, with the specified amount added. 
The amount is typically (|java.time.Duration|) but may be any other type 
implementing the (|java.time.temporal.TemporalAmount|) interface. 

The calculation is delegated to the amount object by calling 
(|java.time.temporal.TemporalAmount|) . The amount implementation is free to 
implement the addition in any way it wishes, however it typically calls back to 
(|java.time.LocalTime|) . Consult the documentation of the amount 
implementation to determine if it can be successfully added. 

This instance is immutable and unaffected by this method call. 


    amountToAdd - the amount to add, not null 

    Returns: a {@code LocalTime} based on this time with the addition made, not null 

*java.time.LocalTime.plusHours(long)*

public |java.time.LocalTime| plusHours(long hoursToAdd)

Returns a copy of thisLocalTimewith the specified period in hours added. 

This adds the specified number of hours to this time, returning a new time. The 
calculation wraps around midnight. 

This instance is immutable and unaffected by this method call. 


    hoursToAdd - the hours to add, may be negative 

    Returns: a {@code LocalTime} based on this time with the hours added, not null 

*java.time.LocalTime.plusMinutes(long)*

public |java.time.LocalTime| plusMinutes(long minutesToAdd)

Returns a copy of thisLocalTimewith the specified period in minutes added. 

This adds the specified number of minutes to this time, returning a new time. 
The calculation wraps around midnight. 

This instance is immutable and unaffected by this method call. 


    minutesToAdd - the minutes to add, may be negative 

    Returns: a {@code LocalTime} based on this time with the minutes added, not null 

*java.time.LocalTime.plusNanos(long)*

public |java.time.LocalTime| plusNanos(long nanosToAdd)

Returns a copy of thisLocalTimewith the specified period in nanoseconds added. 

This adds the specified number of nanoseconds to this time, returning a new 
time. The calculation wraps around midnight. 

This instance is immutable and unaffected by this method call. 


    nanosToAdd - the nanos to add, may be negative 

    Returns: a {@code LocalTime} based on this time with the nanoseconds added, not null 

*java.time.LocalTime.plusSeconds(long)*

public |java.time.LocalTime| plusSeconds(long secondstoAdd)

Returns a copy of thisLocalTimewith the specified period in seconds added. 

This adds the specified number of seconds to this time, returning a new time. 
The calculation wraps around midnight. 

This instance is immutable and unaffected by this method call. 


    secondstoAdd - the seconds to add, may be negative 

    Returns: a {@code LocalTime} based on this time with the seconds added, not null 

*java.time.LocalTime.query(TemporalQuery<R>)*

public |R| query(java.time.temporal.TemporalQuery<R> query)

Queries this time using the specified query. 

This queries this time using the specified query strategy object. 
TheTemporalQueryobject defines the logic to be used to obtain the result. Read 
the documentation of the query to understand what the result of this method 
will be. 

The result of this method is obtained by invoking the 
(|java.time.temporal.TemporalQuery|) method on the specified query 
passingthisas the argument. 


    query - the query to invoke, not null 

    Returns: the query result, null may be returned (defined by the query) 

*java.time.LocalTime.range(TemporalField)*

public |java.time.temporal.ValueRange| range(java.time.temporal.TemporalField field)

Gets the range of valid values for the specified field. 

The range object expresses the minimum and maximum valid values for a field. 
This time is used to enhance the accuracy of the returned range. If it is not 
possible to return the range, because the field is not supported or for some 
other reason, an exception is thrown. 

If the field is a (|java.time.temporal.ChronoField|) then the query is 
implemented here. The supported fields(|java.time.LocalTime|) will return 
appropriate range instances. All otherChronoFieldinstances will throw 
anUnsupportedTemporalTypeException. 

If the field is not aChronoField, then the result of this method is obtained by 
invokingTemporalField.rangeRefinedBy(TemporalAccessor)passingthisas the 
argument. Whether the range can be obtained is determined by the field. 


    field - the field to query the range for, not null 

    Returns: the range of valid values for the field, not null 

*java.time.LocalTime.toNanoOfDay()*

public long toNanoOfDay()

Extracts the time as nanos of day, from0to24 * 60 * 60 * 1,000,000,000 - 1. 



    Returns: the nano of day equivalent to this time 

*java.time.LocalTime.toSecondOfDay()*

public int toSecondOfDay()

Extracts the time as seconds of day, from0to24 * 60 * 60 - 1. 



    Returns: the second-of-day equivalent to this time 

*java.time.LocalTime.toString()*

public |java.lang.String| toString()

Outputs this time as aString, such as10:15. 

The output will be one of the following ISO-8601 formats: 

HH:mm HH:mm:ss HH:mm:ss.SSS HH:mm:ss.SSSSSS HH:mm:ss.SSSSSSSSS 

The format used will be the shortest that outputs the full value of the time 
where the omitted parts are implied to be zero. 



    Returns: a string representation of this time, not null 

*java.time.LocalTime.truncatedTo(TemporalUnit)*

public |java.time.LocalTime| truncatedTo(java.time.temporal.TemporalUnit unit)

Returns a copy of thisLocalTimewith the time truncated. 

Truncating the time returns a copy of the original time with fields smaller 
than the specified unit set to zero. For example, truncating with the 
minutes(|java.time.temporal.ChronoUnit|) unit will set the second-of-minute and 
nano-of-second field to zero. 

The unit must have a duration(|java.time.temporal.TemporalUnit|) that divides 
into the length of a standard day without remainder. This includes all supplied 
time units on (|java.time.temporal.ChronoUnit|) and 
DAYS(|java.time.temporal.ChronoUnit|) . Other units throw an exception. 

This instance is immutable and unaffected by this method call. 


    unit - the unit to truncate to, not null 

    Returns: a {@code LocalTime} based on this time with the time truncated, not null 

*java.time.LocalTime.until(Temporal,TemporalUnit)*

public long until(
  java.time.temporal.Temporal endExclusive,
  java.time.temporal.TemporalUnit unit)

Calculates the amount of time until another time in terms of the specified 
unit. 

This calculates the amount of time between twoLocalTimeobjects in terms of a 
singleTemporalUnit. The start and end points arethisand the specified time. The 
result will be negative if the end is before the start. TheTemporalpassed to 
this method is converted to aLocalTimeusing (|java.time.LocalTime|) . For 
example, the amount in hours between two times can be calculated 
usingstartTime.until(endTime, HOURS). 

The calculation returns a whole number, representing the number of complete 
units between the two times. For example, the amount in hours between 11:30 and 
13:29 will only be one hour as it is one minute short of two hours. 

There are two equivalent ways of using this method. The first is to invoke this 
method. The second is to use (|java.time.temporal.TemporalUnit|) : 

// these two lines are equivalent amount = start.until(end, MINUTES); amount = 
MINUTES.between(start, end); 

The choice should be made based on which makes the code more readable. 

The calculation is implemented in this method for 
(|java.time.temporal.ChronoUnit|) . The 
unitsNANOS,MICROS,MILLIS,SECONDS,MINUTES,HOURSandHALF_DAYSare supported. 
OtherChronoUnitvalues will throw an exception. 

If the unit is not aChronoUnit, then the result of this method is obtained by 
invokingTemporalUnit.between(Temporal, Temporal)passingthisas the first 
argument and the converted input temporal as the second argument. 

This instance is immutable and unaffected by this method call. 


    endExclusive - the end time, exclusive, which is converted to a {@code LocalTime}, not null 
    unit - the unit to measure the amount in, not null 

    Returns: the amount of time between this time and the end time 

*java.time.LocalTime.with(TemporalAdjuster)*

public |java.time.LocalTime| with(java.time.temporal.TemporalAdjuster adjuster)

Returns an adjusted copy of this time. 

This returns aLocalTime, based on this one, with the time adjusted. The 
adjustment takes place using the specified adjuster strategy object. Read the 
documentation of the adjuster to understand what adjustment will be made. 

A simple adjuster might simply set the one of the fields, such as the hour 
field. A more complex adjuster might set the time to the last hour of the day. 

The result of this method is obtained by invoking the 
(|java.time.temporal.TemporalAdjuster|) method on the specified adjuster 
passingthisas the argument. 

This instance is immutable and unaffected by this method call. 


    adjuster - the adjuster to use, not null 

    Returns: a {@code LocalTime} based on {@code this} with the adjustment made, not null 

*java.time.LocalTime.with(TemporalField,long)*

public |java.time.LocalTime| with(
  java.time.temporal.TemporalField field,
  long newValue)

Returns a copy of this time with the specified field set to a new value. 

This returns aLocalTime, based on this one, with the value for the specified 
field changed. This can be used to change any supported field, such as the 
hour, minute or second. If it is not possible to set the value, because the 
field is not supported or for some other reason, an exception is thrown. 

If the field is a (|java.time.temporal.ChronoField|) then the adjustment is 
implemented here. The supported fields behave as follows: 

NANO_OF_SECOND- Returns aLocalTimewith the specified nano-of-second. The hour, 
minute and second will be unchanged. NANO_OF_DAY- Returns aLocalTimewith the 
specified nano-of-day. This completely replaces the time and is equivalent to 
(|java.time.LocalTime|) . MICRO_OF_SECOND- Returns aLocalTimewith the 
nano-of-second replaced by the specified micro-of-second multiplied by 1,000. 
The hour, minute and second will be unchanged. MICRO_OF_DAY- Returns 
aLocalTimewith the specified micro-of-day. This completely replaces the time 
and is equivalent to using (|java.time.LocalTime|) with the micro-of-day 
multiplied by 1,000. MILLI_OF_SECOND- Returns aLocalTimewith the nano-of-second 
replaced by the specified milli-of-second multiplied by 1,000,000. The hour, 
minute and second will be unchanged. MILLI_OF_DAY- Returns aLocalTimewith the 
specified milli-of-day. This completely replaces the time and is equivalent to 
using (|java.time.LocalTime|) with the milli-of-day multiplied by 1,000,000. 
SECOND_OF_MINUTE- Returns aLocalTimewith the specified second-of-minute. The 
hour, minute and nano-of-second will be unchanged. SECOND_OF_DAY- Returns 
aLocalTimewith the specified second-of-day. The nano-of-second will be 
unchanged. MINUTE_OF_HOUR- Returns aLocalTimewith the specified minute-of-hour. 
The hour, second-of-minute and nano-of-second will be unchanged. MINUTE_OF_DAY- 
Returns aLocalTimewith the specified minute-of-day. The second-of-minute and 
nano-of-second will be unchanged. HOUR_OF_AMPM- Returns aLocalTimewith the 
specified hour-of-am-pm. The AM/PM, minute-of-hour, second-of-minute and 
nano-of-second will be unchanged. CLOCK_HOUR_OF_AMPM- Returns aLocalTimewith 
the specified clock-hour-of-am-pm. The AM/PM, minute-of-hour, second-of-minute 
and nano-of-second will be unchanged. HOUR_OF_DAY- Returns aLocalTimewith the 
specified hour-of-day. The minute-of-hour, second-of-minute and nano-of-second 
will be unchanged. CLOCK_HOUR_OF_DAY- Returns aLocalTimewith the specified 
clock-hour-of-day. The minute-of-hour, second-of-minute and nano-of-second will 
be unchanged. AMPM_OF_DAY- Returns aLocalTimewith the specified AM/PM. The 
hour-of-am-pm, minute-of-hour, second-of-minute and nano-of-second will be 
unchanged. 

In all cases, if the new value is outside the valid range of values for the 
field then aDateTimeExceptionwill be thrown. 

All otherChronoFieldinstances will throw anUnsupportedTemporalTypeException. 

If the field is not aChronoField, then the result of this method is obtained by 
invokingTemporalField.adjustInto(Temporal, long)passingthisas the argument. In 
this case, the field determines whether and how to adjust the instant. 

This instance is immutable and unaffected by this method call. 


    field - the field to set in the result, not null 
    newValue - the new value of the field in the result 

    Returns: a {@code LocalTime} based on {@code this} with the specified field set, not 
             null 

*java.time.LocalTime.withHour(int)*

public |java.time.LocalTime| withHour(int hour)

Returns a copy of thisLocalTimewith the hour-of-day value altered. 

This instance is immutable and unaffected by this method call. 


    hour - the hour-of-day to set in the result, from 0 to 23 

    Returns: a {@code LocalTime} based on this time with the requested hour, not null 

*java.time.LocalTime.withMinute(int)*

public |java.time.LocalTime| withMinute(int minute)

Returns a copy of thisLocalTimewith the minute-of-hour value altered. 

This instance is immutable and unaffected by this method call. 


    minute - the minute-of-hour to set in the result, from 0 to 59 

    Returns: a {@code LocalTime} based on this time with the requested minute, not null 

*java.time.LocalTime.withNano(int)*

public |java.time.LocalTime| withNano(int nanoOfSecond)

Returns a copy of thisLocalTimewith the nano-of-second value altered. 

This instance is immutable and unaffected by this method call. 


    nanoOfSecond - the nano-of-second to set in the result, from 0 to 999,999,999 

    Returns: a {@code LocalTime} based on this time with the requested nanosecond, not null 

*java.time.LocalTime.withSecond(int)*

public |java.time.LocalTime| withSecond(int second)

Returns a copy of thisLocalTimewith the second-of-minute value altered. 

This instance is immutable and unaffected by this method call. 


    second - the second-of-minute to set in the result, from 0 to 59 

    Returns: a {@code LocalTime} based on this time with the requested second, not null 


