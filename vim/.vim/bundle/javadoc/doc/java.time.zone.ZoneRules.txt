*java.time.zone.ZoneRules* *ZoneRules* The rules defining how the zone offset va

public final class ZoneRules
  extends    |java.lang.Object|
  implements |java.io.Serializable|

|java.time.zone.ZoneRules_Description|
|java.time.zone.ZoneRules_Fields|
|java.time.zone.ZoneRules_Constructors|
|java.time.zone.ZoneRules_Methods|

================================================================================

*java.time.zone.ZoneRules_Methods*
|java.time.zone.ZoneRules.equals(Object)|Checks if this set of rules equals ano
|java.time.zone.ZoneRules.getDaylightSavings(Instant)|Gets the amount of daylig
|java.time.zone.ZoneRules.getOffset(Instant)|Gets the offset applicable at the 
|java.time.zone.ZoneRules.getOffset(LocalDateTime)|Gets a suitable offset for t
|java.time.zone.ZoneRules.getStandardOffset(Instant)|Gets the standard offset f
|java.time.zone.ZoneRules.getTransition(LocalDateTime)|Gets the offset transiti
|java.time.zone.ZoneRules.getTransitionRules()|Gets the list of transition rule
|java.time.zone.ZoneRules.getTransitions()|Gets the complete list of fully defi
|java.time.zone.ZoneRules.getValidOffsets(LocalDateTime)|Gets the offset applic
|java.time.zone.ZoneRules.hashCode()|Returns a suitable hash code given the def
|java.time.zone.ZoneRules.isDaylightSavings(Instant)|Checks if the specified in
|java.time.zone.ZoneRules.isFixedOffset()|Checks of the zone rules are fixed, s
|java.time.zone.ZoneRules.isValidOffset(LocalDateTime,ZoneOffset)|Checks if the
|java.time.zone.ZoneRules.nextTransition(Instant)|Gets the next transition afte
|java.time.zone.ZoneRules.of(ZoneOffset)|Obtains an instance of ZoneRules that 
|java.time.zone.ZoneRules.of(ZoneOffset,ZoneOffset,List<ZoneOffsetTransition>,List<ZoneOffsetTransition>,List<ZoneOffsetTransitionRule>)|
|java.time.zone.ZoneRules.previousTransition(Instant)|Gets the previous transit
|java.time.zone.ZoneRules.toString()|Returns a string describing this object.

*java.time.zone.ZoneRules_Description*

The rules defining how the zone offset varies for a single time-zone. 

The rules model all the historic and future transitions for a time-zone. 
(|java.time.zone.ZoneOffsetTransition|) is used for known transitions, 
typically historic. (|java.time.zone.ZoneOffsetTransitionRule|) is used for 
future transitions that are based on the result of an algorithm. 

The rules are loaded via (|java.time.zone.ZoneRulesProvider|) using a 
(|java.time.ZoneId|) . The same rules may be shared internally between multiple 
zone IDs. 

Serializing an instance ofZoneRuleswill store the entire set of rules. It does 
not store the zone ID as it is not part of the state of this object. 

A rule implementation may or may not store full information about historic and 
future transitions, and the information stored is only as accurate as that 
supplied to the implementation by the rules provider. Applications should treat 
the data provided as representing the best information available to the 
implementation of this rule. 



*java.time.zone.ZoneRules.equals(Object)*

public boolean equals(java.lang.Object otherRules)

Checks if this set of rules equals another. 

Two rule sets are equal if they will always result in the same output for any 
given input instant or local date-time. Rules from two different groups may 
return false even if they are in fact the same. 

This definition should result in implementations comparing their entire state. 


    otherRules - the other rules, null returns false 

    Returns: true if this rules is the same as that specified 

*java.time.zone.ZoneRules.getDaylightSavings(Instant)*

public |java.time.Duration| getDaylightSavings(java.time.Instant instant)

Gets the amount of daylight savings in use for the specified instant in this 
zone. 

This provides access to historic information on how the amount of daylight 
savings has changed over time. This is the difference between the standard 
offset and the actual offset. Typically the amount is zero during winter and 
one hour during summer. Time-zones are second-based, so the nanosecond part of 
the duration will be zero. 

This default implementation calculates the duration from the 
actual(|java.time.zone.ZoneRules|) and standard(|java.time.zone.ZoneRules|) 
offsets. 


    instant - the instant to find the daylight savings for, not null, but null may be ignored 
       if the rules have a single offset for all instants 

    Returns: the difference between the standard and actual offset, not null 

*java.time.zone.ZoneRules.getOffset(Instant)*

public |java.time.ZoneOffset| getOffset(java.time.Instant instant)

Gets the offset applicable at the specified instant in these rules. 

The mapping from an instant to an offset is simple, there is only one valid 
offset for each instant. This method returns that offset. 


    instant - the instant to find the offset for, not null, but null may be ignored if the 
       rules have a single offset for all instants 

    Returns: the offset, not null 

*java.time.zone.ZoneRules.getOffset(LocalDateTime)*

public |java.time.ZoneOffset| getOffset(java.time.LocalDateTime localDateTime)

Gets a suitable offset for the specified local date-time in these rules. 

The mapping from a local date-time to an offset is not straightforward. There 
are three cases: 

Normal, with one valid offset. For the vast majority of the year, the normal 
case applies, where there is a single valid offset for the local date-time. 
Gap, with zero valid offsets. This is when clocks jump forward typically due to 
the spring daylight savings change from "winter" to "summer". In a gap there 
are local date-time values with no valid offset. Overlap, with two valid 
offsets. This is when clocks are set back typically due to the autumn daylight 
savings change from "summer" to "winter". In an overlap there are local 
date-time values with two valid offsets. 

Thus, for any given local date-time there can be zero, one or two valid 
offsets. This method returns the single offset in the Normal case, and in the 
Gap or Overlap case it returns the offset before the transition. 

Since, in the case of Gap and Overlap, the offset returned is a "best" value, 
rather than the "correct" value, it should be treated with care. Applications 
that care about the correct offset should use a combination of this method, 
(|java.time.zone.ZoneRules|) and (|java.time.zone.ZoneRules|) . 


    localDateTime - the local date-time to query, not null, but null may be ignored if the rules 
       have a single offset for all instants 

    Returns: the best available offset for the local date-time, not null 

*java.time.zone.ZoneRules.getStandardOffset(Instant)*

public |java.time.ZoneOffset| getStandardOffset(java.time.Instant instant)

Gets the standard offset for the specified instant in this zone. 

This provides access to historic information on how the standard offset has 
changed over time. The standard offset is the offset before any daylight saving 
time is applied. This is typically the offset applicable during winter. 


    instant - the instant to find the offset information for, not null, but null may be 
       ignored if the rules have a single offset for all instants 

    Returns: the standard offset, not null 

*java.time.zone.ZoneRules.getTransition(LocalDateTime)*

public |java.time.zone.ZoneOffsetTransition| getTransition(java.time.LocalDateTime localDateTime)

Gets the offset transition applicable at the specified local date-time in these 
rules. 

The mapping from a local date-time to an offset is not straightforward. There 
are three cases: 

Normal, with one valid offset. For the vast majority of the year, the normal 
case applies, where there is a single valid offset for the local date-time. 
Gap, with zero valid offsets. This is when clocks jump forward typically due to 
the spring daylight savings change from "winter" to "summer". In a gap there 
are local date-time values with no valid offset. Overlap, with two valid 
offsets. This is when clocks are set back typically due to the autumn daylight 
savings change from "summer" to "winter". In an overlap there are local 
date-time values with two valid offsets. 

A transition is used to model the cases of a Gap or Overlap. The Normal case 
will return null. 

There are various ways to handle the conversion from aLocalDateTime. One 
technique, using this method, would be: 

ZoneOffsetTransition trans = rules.getTransition(localDT); if (trans == null) { 
// Gap or Overlap: determine what to do from transition } else { // Normal 
case: only one valid offset zoneOffset = rule.getOffset(localDT); } 


    localDateTime - the local date-time to query for offset transition, not null, but null may be 
       ignored if the rules have a single offset for all instants 

    Returns: the offset transition, null if the local date-time is not in transition 

*java.time.zone.ZoneRules.getTransitionRules()*

public |java.util.List|<ZoneOffsetTransitionRule> getTransitionRules()

Gets the list of transition rules for years beyond those defined in the 
transition list. 

The complete set of transitions for this rules instance is defined by this 
method and (|java.time.zone.ZoneRules|) . This method returns instances of 
(|java.time.zone.ZoneOffsetTransitionRule|) that define an algorithm for when 
transitions will occur. 

For any givenZoneRules, this list contains the transition rules for years 
beyond those years that have been fully defined. These rules typically refer to 
future daylight saving time rule changes. 

If the zone defines daylight savings into the future, then the list will 
normally be of size two and hold information about entering and exiting 
daylight savings. If the zone does not have daylight savings, or information 
about future changes is uncertain, then the list will be empty. 

The list will be empty for fixed offset rules and for any time-zone where there 
is no daylight saving time. The list will also be empty if the transition rules 
are unknown. 



    Returns: an immutable list of transition rules, not null 

*java.time.zone.ZoneRules.getTransitions()*

public |java.util.List|<ZoneOffsetTransition> getTransitions()

Gets the complete list of fully defined transitions. 

The complete set of transitions for this rules instance is defined by this 
method and (|java.time.zone.ZoneRules|) . This method returns those transitions 
that have been fully defined. These are typically historical, but may be in the 
future. 

The list will be empty for fixed offset rules and for any time-zone where there 
has only ever been a single offset. The list will also be empty if the 
transition rules are unknown. 



    Returns: an immutable list of fully defined transitions, not null 

*java.time.zone.ZoneRules.getValidOffsets(LocalDateTime)*

public |java.util.List|<ZoneOffset> getValidOffsets(java.time.LocalDateTime localDateTime)

Gets the offset applicable at the specified local date-time in these rules. 

The mapping from a local date-time to an offset is not straightforward. There 
are three cases: 

Normal, with one valid offset. For the vast majority of the year, the normal 
case applies, where there is a single valid offset for the local date-time. 
Gap, with zero valid offsets. This is when clocks jump forward typically due to 
the spring daylight savings change from "winter" to "summer". In a gap there 
are local date-time values with no valid offset. Overlap, with two valid 
offsets. This is when clocks are set back typically due to the autumn daylight 
savings change from "summer" to "winter". In an overlap there are local 
date-time values with two valid offsets. 

Thus, for any given local date-time there can be zero, one or two valid 
offsets. This method returns that list of valid offsets, which is a list of 
size 0, 1 or 2. In the case where there are two offsets, the earlier offset is 
returned at index 0 and the later offset at index 1. 

There are various ways to handle the conversion from aLocalDateTime. One 
technique, using this method, would be: 

List<ZoneOffset> validOffsets = rules.getOffset(localDT); if 
(validOffsets.size() == 1) { // Normal case: only one valid offset zoneOffset = 
validOffsets.get(0); } else { // Gap or Overlap: determine what to do from 
transition (which will be non-null) ZoneOffsetTransition trans = 
rules.getTransition(localDT); } 

In theory, it is possible for there to be more than two valid offsets. This 
would happen if clocks to be put back more than once in quick succession. This 
has never happened in the history of time-zones and thus has no special 
handling. However, if it were to happen, then the list would return more than 2 
entries. 


    localDateTime - the local date-time to query for valid offsets, not null, but null may be 
       ignored if the rules have a single offset for all instants 

    Returns: the list of valid offsets, may be immutable, not null 

*java.time.zone.ZoneRules.hashCode()*

public int hashCode()

Returns a suitable hash code given the definition of#equals. 



    Returns: the hash code 

*java.time.zone.ZoneRules.isDaylightSavings(Instant)*

public boolean isDaylightSavings(java.time.Instant instant)

Checks if the specified instant is in daylight savings. 

This checks if the standard offset and the actual offset are the same for the 
specified instant. If they are not, it is assumed that daylight savings is in 
operation. 

This default implementation compares the actual(|java.time.zone.ZoneRules|) and 
standard(|java.time.zone.ZoneRules|) offsets. 


    instant - the instant to find the offset information for, not null, but null may be 
       ignored if the rules have a single offset for all instants 

    Returns: the standard offset, not null 

*java.time.zone.ZoneRules.isFixedOffset()*

public boolean isFixedOffset()

Checks of the zone rules are fixed, such that the offset never varies. 



    Returns: true if the time-zone is fixed and the offset never changes 

*java.time.zone.ZoneRules.isValidOffset(LocalDateTime,ZoneOffset)*

public boolean isValidOffset(
  java.time.LocalDateTime localDateTime,
  java.time.ZoneOffset offset)

Checks if the offset date-time is valid for these rules. 

To be valid, the local date-time must not be in a gap and the offset must match 
one of the valid offsets. 

This default implementation checks if (|java.time.zone.ZoneRules|) contains the 
specified offset. 


    localDateTime - the date-time to check, not null, but null may be ignored if the rules have a 
       single offset for all instants 
    offset - the offset to check, null returns false 

    Returns: true if the offset date-time is valid for these rules 

*java.time.zone.ZoneRules.nextTransition(Instant)*

public |java.time.zone.ZoneOffsetTransition| nextTransition(java.time.Instant instant)

Gets the next transition after the specified instant. 

This returns details of the next transition after the specified instant. For 
example, if the instant represents a point where "Summer" daylight savings time 
applies, then the method will return the transition to the next "Winter" time. 


    instant - the instant to get the next transition after, not null, but null may be ignored 
       if the rules have a single offset for all instants 

    Returns: the next transition after the specified instant, null if this is after the last 
             transition 

*java.time.zone.ZoneRules.of(ZoneOffset)*

public static |java.time.zone.ZoneRules| of(java.time.ZoneOffset offset)

Obtains an instance of ZoneRules that has fixed zone rules. 


    offset - the offset this fixed zone rules is based on, not null 

    Returns: the zone rules, not null 

*java.time.zone.ZoneRules.of(ZoneOffset,ZoneOffset,List<ZoneOffsetTransition>,List<ZoneOffsetTransition>,List<ZoneOffsetTransitionRule>)*

public static |java.time.zone.ZoneRules| of(
  java.time.ZoneOffset baseStandardOffset,
  java.time.ZoneOffset baseWallOffset,
  java.util.List<java.time.zone.ZoneOffsetTransition> standardOffsetTransitionList,
  java.util.List<java.time.zone.ZoneOffsetTransition> transitionList,
  java.util.List<java.time.zone.ZoneOffsetTransitionRule> lastRules)

Obtains an instance of a ZoneRules. 


    baseStandardOffset - the standard offset to use before legal rules were set, not null 
    baseWallOffset - the wall offset to use before legal rules were set, not null 
    standardOffsetTransitionList - the list of changes to the standard offset, not null 
    transitionList - the list of transitions, not null 
    lastRules - the recurring last rules, size 16 or less, not null 

    Returns: the zone rules, not null 

*java.time.zone.ZoneRules.previousTransition(Instant)*

public |java.time.zone.ZoneOffsetTransition| previousTransition(java.time.Instant instant)

Gets the previous transition before the specified instant. 

This returns details of the previous transition after the specified instant. 
For example, if the instant represents a point where "summer" daylight saving 
time applies, then the method will return the transition from the previous 
"winter" time. 


    instant - the instant to get the previous transition after, not null, but null may be 
       ignored if the rules have a single offset for all instants 

    Returns: the previous transition after the specified instant, null if this is before the 
             first transition 

*java.time.zone.ZoneRules.toString()*

public |java.lang.String| toString()

Returns a string describing this object. 



    Returns: a string for debugging, not null 


