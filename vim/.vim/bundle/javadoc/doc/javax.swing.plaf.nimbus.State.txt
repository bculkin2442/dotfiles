*javax.swing.plaf.nimbus.State* *State* Represents a built in, or custom, state 

public abstract class State<T extends javax.swing.JComponent>
  extends    |java.lang.Object|

|javax.swing.plaf.nimbus.State_Description|
|javax.swing.plaf.nimbus.State_Fields|
|javax.swing.plaf.nimbus.State_Constructors|
|javax.swing.plaf.nimbus.State_Methods|

================================================================================

*javax.swing.plaf.nimbus.State_Constructors*
|javax.swing.plaf.nimbus.State(String)|Create a new custom State.

*javax.swing.plaf.nimbus.State_Methods*
|javax.swing.plaf.nimbus.State.isInState(T)|Gets whether the specified JCompone
|javax.swing.plaf.nimbus.State.toString()|

*javax.swing.plaf.nimbus.State_Description*

Represents a built in, or custom, state in Nimbus. 

Synth provides several built in states, which are: 

Enabled Mouse Over Pressed Disabled Focused Selected Default 

However, there are many more states that could be described in a LookAndFeel, 
and it would be nice to style components differently based on these different 
states. For example, a progress bar could be "indeterminate". It would be very 
convenient to allow this to be defined as a "state". 

This class, State, is intended to be used for such situations. Simply implement 
the abstract #isInState method. It returns true if the given JComponent is "in 
this state", false otherwise. This method will be called many times in 
performance sensitive loops. It must execute very quickly. 

For example, the following might be an implementation of a custom 
"Indeterminate" state for JProgressBars: 



public final class IndeterminateState extends State<JProgressBar> { public 
IndeterminateState() { super("Indeterminate"); } 

Override protected boolean isInState(JProgressBar c) { return 
c.isIndeterminate(); } } 



*javax.swing.plaf.nimbus.State(String)*

protected State(java.lang.String name)

Create a new custom State. Specify the name for the state. The name should be 
unique within the states set for any one particular component. The name of the 
state should coincide with the name used in UIDefaults. 

For example, the following would be correct: 

defaults.put("Button.States", "Enabled, Foo, Disabled"); 
defaults.put("Button.Foo", new FooState("Foo")); 

    name - a simple user friendly name for the state, such as "Indeterminate" or 
       "EmbeddedPanel" or "Blurred". It is customary to use camel case, with 
       the first letter capitalized. 

*javax.swing.plaf.nimbus.State.isInState(T)*

protected abstract boolean isInState(T extends javax.swing.JComponent c)

Gets whether the specified JComponent is in the custom state represented by 
this class. This is an extremely performance sensitive loop. Please take proper 
precautions to ensure that it executes quickly. 

Nimbus uses this method to help determine what state a JComponent is in. For 
example, a custom State could exist for JProgressBar such that it would return 
true when the progress bar is indeterminate. Such an implementation of this 
method would simply be: 

return c.isIndeterminate(); 


    c - the JComponent to test. This will never be null. 

    Returns: true if c is in the custom state represented by this State instance 

*javax.swing.plaf.nimbus.State.toString()*

public |java.lang.String| toString()






