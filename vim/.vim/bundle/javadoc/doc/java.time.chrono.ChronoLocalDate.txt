*java.time.chrono.ChronoLocalDate* *ChronoLocalDate* A date without time-of-day 

public interface interface ChronoLocalDate

  implements |java.time.temporal.Temporal|
             |java.time.temporal.TemporalAdjuster|
             |java.lang.Comparable|

|java.time.chrono.ChronoLocalDate_Description|
|java.time.chrono.ChronoLocalDate_Fields|
|java.time.chrono.ChronoLocalDate_Constructors|
|java.time.chrono.ChronoLocalDate_Methods|

================================================================================

*java.time.chrono.ChronoLocalDate_Methods*
|java.time.chrono.ChronoLocalDate.adjustInto(Temporal)|Adjusts the specified te
|java.time.chrono.ChronoLocalDate.atTime(LocalTime)|Combines this date with a t
|java.time.chrono.ChronoLocalDate.compareTo(ChronoLocalDate)|Compares this date
|java.time.chrono.ChronoLocalDate.equals(Object)|Checks if this date is equal t
|java.time.chrono.ChronoLocalDate.format(DateTimeFormatter)|Formats this date u
|java.time.chrono.ChronoLocalDate.from(TemporalAccessor)|Obtains an instance of
|java.time.chrono.ChronoLocalDate.getChronology()|Gets the chronology of this d
|java.time.chrono.ChronoLocalDate.getEra()|Gets the era, as defined by the chro
|java.time.chrono.ChronoLocalDate.hashCode()|A hash code for this date.
|java.time.chrono.ChronoLocalDate.isAfter(ChronoLocalDate)|Checks if this date 
|java.time.chrono.ChronoLocalDate.isBefore(ChronoLocalDate)|Checks if this date
|java.time.chrono.ChronoLocalDate.isEqual(ChronoLocalDate)|Checks if this date 
|java.time.chrono.ChronoLocalDate.isLeapYear()|Checks if the year is a leap yea
|java.time.chrono.ChronoLocalDate.isSupported(TemporalField)|Checks if the spec
|java.time.chrono.ChronoLocalDate.isSupported(TemporalUnit)|Checks if the speci
|java.time.chrono.ChronoLocalDate.lengthOfMonth()|Returns the length of the mon
|java.time.chrono.ChronoLocalDate.lengthOfYear()|Returns the length of the year
|java.time.chrono.ChronoLocalDate.minus(long,TemporalUnit)|
|java.time.chrono.ChronoLocalDate.minus(TemporalAmount)|
|java.time.chrono.ChronoLocalDate.plus(long,TemporalUnit)|
|java.time.chrono.ChronoLocalDate.plus(TemporalAmount)|
|java.time.chrono.ChronoLocalDate.query(TemporalQuery<R>)|Queries this date usi
|java.time.chrono.ChronoLocalDate.timeLineOrder()|Gets a comparator that compar
|java.time.chrono.ChronoLocalDate.toEpochDay()|Converts this date to the Epoch 
|java.time.chrono.ChronoLocalDate.toString()|Outputs this date as aString.
|java.time.chrono.ChronoLocalDate.until(ChronoLocalDate)|Calculates the period 
|java.time.chrono.ChronoLocalDate.until(Temporal,TemporalUnit)|Calculates the a
|java.time.chrono.ChronoLocalDate.with(TemporalAdjuster)|
|java.time.chrono.ChronoLocalDate.with(TemporalField,long)|

*java.time.chrono.ChronoLocalDate_Description*

A date without time-of-day or time-zone in an arbitrary chronology, intended 
for advanced globalization use cases. 

Most applications should declare method signatures, fields and variables as 
(|java.time.LocalDate|) , not this interface. 

AChronoLocalDateis the abstract representation of a date where theChronology 
chronology, or calendar system, is pluggable. The date is defined in terms of 
fields expressed by (|java.time.temporal.TemporalField|) , where most common 
implementations are defined in (|java.time.temporal.ChronoField|) . The 
chronology defines how the calendar system operates and the meaning of the 
standard fields. 

When to use this interface The design of the API encourages the use 
ofLocalDaterather than this interface, even in the case where the application 
needs to deal with multiple calendar systems. The rationale for this is 
explored in the following documentation. 

The primary use case where this interface should be used is where the generic 
type parameteris fully defined as a specific chronology. In that case, the 
assumptions of that chronology are known at development time and specified in 
the code. 

When the chronology is defined in the generic type parameter as ? or otherwise 
unknown at development time, the rest of the discussion below applies. 

To emphasize the point, declaring a method signature, field or variable as this 
interface type can initially seem like the sensible way to globalize an 
application, however it is usually the wrong approach. As such, it should be 
considered an application-wide architectural decision to choose to use this 
interface as opposed toLocalDate. 

Architectural issues to consider These are some of the points that must be 
considered before using this interface throughout an application. 

1) Applications using this interface, as opposed to using justLocalDate, face a 
significantly higher probability of bugs. This is because the calendar system 
in use is not known at development time. A key cause of bugs is where the 
developer applies assumptions from their day-to-day knowledge of the ISO 
calendar system to code that is intended to deal with any arbitrary calendar 
system. The section below outlines how those assumptions can cause problems The 
primary mechanism for reducing this increased risk of bugs is a strong code 
review process. This should also be considered a extra cost in maintenance for 
the lifetime of the code. 

2) This interface does not enforce immutability of implementations. While the 
implementation notes indicate that all implementations must be immutable there 
is nothing in the code or type system to enforce this. Any method declared to 
accept aChronoLocalDatecould therefore be passed a poorly or maliciously 
written mutable implementation. 

3) Applications using this interface must consider the impact of 
eras.LocalDateshields users from the concept of eras, by ensuring 
thatgetYear()returns the proleptic year. That decision ensures that developers 
can think ofLocalDateinstances as consisting of three fields - year, 
month-of-year and day-of-month. By contrast, users of this interface must think 
of dates as consisting of four fields - era, year-of-era, month-of-year and 
day-of-month. The extra era field is frequently forgotten, yet it is of vital 
importance to dates in an arbitrary calendar system. For example, in the 
Japanese calendar system, the era represents the reign of an Emperor. Whenever 
one reign ends and another starts, the year-of-era is reset to one. 

4) The only agreed international standard for passing a date between two 
systems is the ISO-8601 standard which requires the ISO calendar system. Using 
this interface throughout the application will inevitably lead to the 
requirement to pass the date across a network or component boundary, requiring 
an application specific protocol or format. 

5) Long term persistence, such as a database, will almost always only accept 
dates in the ISO-8601 calendar system (or the related Julian-Gregorian). 
Passing around dates in other calendar systems increases the complications of 
interacting with persistence. 

6) Most of the time, passing aChronoLocalDatethroughout an application is 
unnecessary, as discussed in the last section below. 

False assumptions causing bugs in multi-calendar system code As indicated 
above, there are many issues to consider when try to use and manipulate a date 
in an arbitrary calendar system. These are some of the key issues. 

Code that queries the day-of-month and assumes that the value will never be 
more than 31 is invalid. Some calendar systems have more than 31 days in some 
months. 

Code that adds 12 months to a date and assumes that a year has been added is 
invalid. Some calendar systems have a different number of months, such as 13 in 
the Coptic or Ethiopic. 

Code that adds one month to a date and assumes that the month-of-year value 
will increase by one or wrap to the next year is invalid. Some calendar systems 
have a variable number of months in a year, such as the Hebrew. 

Code that adds one month, then adds a second one month and assumes that the 
day-of-month will remain close to its original value is invalid. Some calendar 
systems have a large difference between the length of the longest month and the 
length of the shortest month. For example, the Coptic or Ethiopic have 12 
months of 30 days and 1 month of 5 days. 

Code that adds seven days and assumes that a week has been added is invalid. 
Some calendar systems have weeks of other than seven days, such as the French 
Revolutionary. 

Code that assumes that because the year ofdate1is greater than the year 
ofdate2thendate1is afterdate2is invalid. This is invalid for all calendar 
systems when referring to the year-of-era, and especially untrue of the 
Japanese calendar system where the year-of-era restarts with the reign of every 
new Emperor. 

Code that treats month-of-year one and day-of-month one as the start of the 
year is invalid. Not all calendar systems start the year when the month value 
is one. 

In general, manipulating a date, and even querying a date, is wide open to bugs 
when the calendar system is unknown at development time. This is why it is 
essential that code using this interface is subjected to additional code 
reviews. It is also why an architectural decision to avoid this interface type 
is usually the correct one. 

Using LocalDate instead The primary alternative to using this interface 
throughout your application is as follows. 

Declare all method signatures referring to dates in terms ofLocalDate. Either 
store the chronology (calendar system) in the user profile or lookup the 
chronology from the user locale Convert the ISOLocalDateto and from the user's 
preferred calendar system during printing and parsing 

This approach treats the problem of globalized calendar systems as a 
localization issue and confines it to the UI layer. This approach is in keeping 
with other localization issues in the java platform. 

As discussed above, performing calculations on a date where the rules of the 
calendar system are pluggable requires skill and is not recommended. 
Fortunately, the need to perform calculations on a date in an arbitrary 
calendar system is extremely rare. For example, it is highly unlikely that the 
business rules of a library book rental scheme will allow rentals to be for one 
month, where meaning of the month is dependent on the user's preferred calendar 
system. 

A key use case for calculations on a date in an arbitrary calendar system is 
producing a month-by-month calendar for display and user interaction. Again, 
this is a UI issue, and use of this interface solely within a few methods of 
the UI layer may be justified. 

In any other part of the system, where a date must be manipulated in a calendar 
system other than ISO, the use case will generally specify the calendar system 
to use. For example, an application may need to calculate the next Islamic or 
Hebrew holiday which may require manipulating the date. This kind of use case 
can be handled as follows: 

start from the ISOLocalDatebeing passed to the method convert the date to the 
alternate calendar system, which for this use case is known rather than 
arbitrary perform the calculation convert back toLocalDate Developers writing 
low-level frameworks or libraries should also avoid this interface. Instead, 
one of the two general purpose access interfaces should be used. Use 
(|java.time.temporal.TemporalAccessor|) if read-only access is required, or use 
(|java.time.temporal.Temporal|) if read-write access is required. 



*java.time.chrono.ChronoLocalDate.adjustInto(Temporal)*

public |java.time.temporal.Temporal| adjustInto(java.time.temporal.Temporal temporal)

Adjusts the specified temporal object to have the same date as this object. 

This returns a temporal object of the same observable type as the input with 
the date changed to be the same as this. 

The adjustment is equivalent to using (|java.time.temporal.Temporal|) passing 
(|java.time.temporal.ChronoField|) as the field. 

In most cases, it is clearer to reverse the calling pattern by using 
(|java.time.temporal.Temporal|) : 

// these two lines are equivalent, but the second approach is recommended 
temporal = thisLocalDate.adjustInto(temporal); temporal = 
temporal.with(thisLocalDate); 

This instance is immutable and unaffected by this method call. 


    temporal - the target object to be adjusted, not null 

    Returns: the adjusted object, not null 

*java.time.chrono.ChronoLocalDate.atTime(LocalTime)*

public |java.time.chrono.ChronoLocalDateTime|<?> atTime(java.time.LocalTime localTime)

Combines this date with a time to create aChronoLocalDateTime. 

This returns aChronoLocalDateTimeformed from this date at the specified time. 
All possible combinations of date and time are valid. 


    localTime - the local time to use, not null 

    Returns: the local date-time formed from this date and the specified time, not null 

*java.time.chrono.ChronoLocalDate.compareTo(ChronoLocalDate)*

public int compareTo(java.time.chrono.ChronoLocalDate other)

Compares this date to another date, including the chronology. 

The comparison is based first on the underlying time-line date, then on the 
chronology. It is "consistent with equals", as defined by 
(|java.lang.Comparable|) . 

For example, the following is the comparator order: 

2012-12-03 (ISO) 2012-12-04 (ISO) 2555-12-04 (ThaiBuddhist) 2012-12-05 (ISO) 

Values #2 and #3 represent the same date on the time-line. When two values 
represent the same date, the chronology ID is compared to distinguish them. 
This step is needed to make the ordering "consistent with equals". 

If all the date objects being compared are in the same chronology, then the 
additional chronology stage is not required and only the local date is used. To 
compare the dates of twoTemporalAccessorinstances, including dates in two 
different chronologies, use (|java.time.temporal.ChronoField|) as a comparator. 

This default implementation performs the comparison defined above. 


    other - the other date to compare to, not null 

    Returns: the comparator value, negative if less, positive if greater 

*java.time.chrono.ChronoLocalDate.equals(Object)*

public boolean equals(java.lang.Object obj)

Checks if this date is equal to another date, including the chronology. 

Compares this date with another ensuring that the date and chronology are the 
same. 

To compare the dates of twoTemporalAccessorinstances, including dates in two 
different chronologies, use (|java.time.temporal.ChronoField|) as a comparator. 


    obj - the object to check, null returns false 

    Returns: true if this is equal to the other date 

*java.time.chrono.ChronoLocalDate.format(DateTimeFormatter)*

public |java.lang.String| format(java.time.format.DateTimeFormatter formatter)

Formats this date using the specified formatter. 

This date will be passed to the formatter to produce a string. 

The default implementation must behave as follows: 

return formatter.format(this); 


    formatter - the formatter to use, not null 

    Returns: the formatted date string, not null 

*java.time.chrono.ChronoLocalDate.from(TemporalAccessor)*

public static |java.time.chrono.ChronoLocalDate| from(java.time.temporal.TemporalAccessor temporal)

Obtains an instance ofChronoLocalDatefrom a temporal object. 

This obtains a local date based on the specified temporal. 
ATemporalAccessorrepresents an arbitrary set of date and time information, 
which this factory converts to an instance ofChronoLocalDate. 

The conversion extracts and combines the chronology and the date from the 
temporal object. The behavior is equivalent to using 
(|java.time.chrono.Chronology|) with the extracted chronology. Implementations 
are permitted to perform optimizations such as accessing those fields that are 
equivalent to the relevant objects. 

This method matches the signature of the functional interface 
(|java.time.temporal.TemporalQuery|) allowing it to be used as a query via 
method reference,ChronoLocalDate::from. 


    temporal - the temporal object to convert, not null 

    Returns: the date, not null 

*java.time.chrono.ChronoLocalDate.getChronology()*

public |java.time.chrono.Chronology| getChronology()

Gets the chronology of this date. 

TheChronologyrepresents the calendar system in use. The era and other fields in 
(|java.time.temporal.ChronoField|) are defined by the chronology. 



    Returns: the chronology, not null 

*java.time.chrono.ChronoLocalDate.getEra()*

public |java.time.chrono.Era| getEra()

Gets the era, as defined by the chronology. 

The era is, conceptually, the largest division of the time-line. Most calendar 
systems have a single epoch dividing the time-line into two eras. However, some 
have multiple eras, such as one for the reign of each leader. The exact meaning 
is determined by theChronology. 

All correctly implementedEraclasses are singletons, thus it is valid code to 
writedate.getEra() == SomeChrono.ERA_NAME). 

This default implementation uses (|java.time.chrono.Chronology|) . 



    Returns: the chronology specific era constant applicable at this date, not null 

*java.time.chrono.ChronoLocalDate.hashCode()*

public int hashCode()

A hash code for this date. 



    Returns: a suitable hash code 

*java.time.chrono.ChronoLocalDate.isAfter(ChronoLocalDate)*

public boolean isAfter(java.time.chrono.ChronoLocalDate other)

Checks if this date is after the specified date ignoring the chronology. 

This method differs from the comparison in (|java.time.chrono.ChronoLocalDate|) 
in that it only compares the underlying date and not the chronology. This 
allows dates in different calendar systems to be compared based on the 
time-line position. This is equivalent to usingdate1.toEpochDay() > 
date2.toEpochDay(). 

This default implementation performs the comparison based on the epoch-day. 


    other - the other date to compare to, not null 

    Returns: true if this is after the specified date 

*java.time.chrono.ChronoLocalDate.isBefore(ChronoLocalDate)*

public boolean isBefore(java.time.chrono.ChronoLocalDate other)

Checks if this date is before the specified date ignoring the chronology. 

This method differs from the comparison in (|java.time.chrono.ChronoLocalDate|) 
in that it only compares the underlying date and not the chronology. This 
allows dates in different calendar systems to be compared based on the 
time-line position. This is equivalent to usingdate1.toEpochDay() < 
date2.toEpochDay(). 

This default implementation performs the comparison based on the epoch-day. 


    other - the other date to compare to, not null 

    Returns: true if this is before the specified date 

*java.time.chrono.ChronoLocalDate.isEqual(ChronoLocalDate)*

public boolean isEqual(java.time.chrono.ChronoLocalDate other)

Checks if this date is equal to the specified date ignoring the chronology. 

This method differs from the comparison in (|java.time.chrono.ChronoLocalDate|) 
in that it only compares the underlying date and not the chronology. This 
allows dates in different calendar systems to be compared based on the 
time-line position. This is equivalent to usingdate1.toEpochDay() == 
date2.toEpochDay(). 

This default implementation performs the comparison based on the epoch-day. 


    other - the other date to compare to, not null 

    Returns: true if the underlying date is equal to the specified date 

*java.time.chrono.ChronoLocalDate.isLeapYear()*

public boolean isLeapYear()

Checks if the year is a leap year, as defined by the calendar system. 

A leap-year is a year of a longer length than normal. The exact meaning is 
determined by the chronology with the constraint that a leap-year must imply a 
year-length longer than a non leap-year. 

This default implementation uses (|java.time.chrono.Chronology|) . 



    Returns: true if this date is in a leap year, false otherwise 

*java.time.chrono.ChronoLocalDate.isSupported(TemporalField)*

public boolean isSupported(java.time.temporal.TemporalField field)

Checks if the specified field is supported. 

This checks if the specified field can be queried on this date. If false, then 
calling the range(|java.time.chrono.ChronoLocalDate|) , 
get(|java.time.chrono.ChronoLocalDate|) and 
(|java.time.chrono.ChronoLocalDate|) methods will throw an exception. 

The set of supported fields is defined by the chronology and normally includes 
allChronoFielddate fields. 

If the field is not aChronoField, then the result of this method is obtained by 
invokingTemporalField.isSupportedBy(TemporalAccessor)passingthisas the 
argument. Whether the field is supported is determined by the field. 


    field - the field to check, null returns false 

    Returns: true if the field can be queried, false if not 

*java.time.chrono.ChronoLocalDate.isSupported(TemporalUnit)*

public boolean isSupported(java.time.temporal.TemporalUnit unit)

Checks if the specified unit is supported. 

This checks if the specified unit can be added to or subtracted from this date. 
If false, then calling the (|java.time.chrono.ChronoLocalDate|) and 
minus(|java.time.chrono.ChronoLocalDate|) methods will throw an exception. 

The set of supported units is defined by the chronology and normally includes 
allChronoUnitdate units exceptFOREVER. 

If the unit is not aChronoUnit, then the result of this method is obtained by 
invokingTemporalUnit.isSupportedBy(Temporal)passingthisas the argument. Whether 
the unit is supported is determined by the unit. 


    unit - the unit to check, null returns false 

    Returns: true if the unit can be added/subtracted, false if not 

*java.time.chrono.ChronoLocalDate.lengthOfMonth()*

public int lengthOfMonth()

Returns the length of the month represented by this date, as defined by the 
calendar system. 

This returns the length of the month in days. 



    Returns: the length of the month in days 

*java.time.chrono.ChronoLocalDate.lengthOfYear()*

public int lengthOfYear()

Returns the length of the year represented by this date, as defined by the 
calendar system. 

This returns the length of the year in days. 

The default implementation uses (|java.time.chrono.ChronoLocalDate|) and 
returns 365 or 366. 



    Returns: the length of the year in days 

*java.time.chrono.ChronoLocalDate.minus(long,TemporalUnit)*

public |java.time.chrono.ChronoLocalDate| minus(
  long amountToSubtract,
  java.time.temporal.TemporalUnit unit)





*java.time.chrono.ChronoLocalDate.minus(TemporalAmount)*

public |java.time.chrono.ChronoLocalDate| minus(java.time.temporal.TemporalAmount amount)





*java.time.chrono.ChronoLocalDate.plus(long,TemporalUnit)*

public |java.time.chrono.ChronoLocalDate| plus(
  long amountToAdd,
  java.time.temporal.TemporalUnit unit)





*java.time.chrono.ChronoLocalDate.plus(TemporalAmount)*

public |java.time.chrono.ChronoLocalDate| plus(java.time.temporal.TemporalAmount amount)





*java.time.chrono.ChronoLocalDate.query(TemporalQuery<R>)*

public |R| query(java.time.temporal.TemporalQuery<R> query)

Queries this date using the specified query. 

This queries this date using the specified query strategy object. 
TheTemporalQueryobject defines the logic to be used to obtain the result. Read 
the documentation of the query to understand what the result of this method 
will be. 

The result of this method is obtained by invoking the 
(|java.time.temporal.TemporalQuery|) method on the specified query 
passingthisas the argument. 


    query - the query to invoke, not null 

    Returns: the query result, null may be returned (defined by the query) 

*java.time.chrono.ChronoLocalDate.timeLineOrder()*

public static |java.util.Comparator|<ChronoLocalDate> timeLineOrder()

Gets a comparator that comparesChronoLocalDatein time-line order ignoring the 
chronology. 

This comparator differs from the comparison in 
(|java.time.chrono.ChronoLocalDate|) in that it only compares the underlying 
date and not the chronology. This allows dates in different calendar systems to 
be compared based on the position of the date on the local time-line. The 
underlying comparison is equivalent to comparing the epoch-day. 



    Returns: a comparator that compares in time-line order ignoring the chronology 

*java.time.chrono.ChronoLocalDate.toEpochDay()*

public long toEpochDay()

Converts this date to the Epoch Day. 

The Epoch Day count(|java.time.temporal.ChronoField|) is a simple incrementing 
count of days where day 0 is 1970-01-01 (ISO). This definition is the same for 
all chronologies, enabling conversion. 

This default implementation queries theEPOCH_DAYfield. 



    Returns: the Epoch Day equivalent to this date 

*java.time.chrono.ChronoLocalDate.toString()*

public |java.lang.String| toString()

Outputs this date as aString. 

The output will include the full local date. 



    Returns: the formatted date, not null 

*java.time.chrono.ChronoLocalDate.until(ChronoLocalDate)*

public |java.time.chrono.ChronoPeriod| until(java.time.chrono.ChronoLocalDate endDateExclusive)

Calculates the period between this date and another date as aChronoPeriod. 

This calculates the period between two dates. All supplied chronologies 
calculate the period using years, months and days, however theChronoPeriodAPI 
allows the period to be represented using other units. 

The start and end points arethisand the specified date. The result will be 
negative if the end is before the start. The negative sign will be the same in 
each of year, month and day. 

The calculation is performed using the chronology of this date. If necessary, 
the input date will be converted to match. 

This instance is immutable and unaffected by this method call. 


    endDateExclusive - the end date, exclusive, which may be in any chronology, not null 

    Returns: the period between this date and the end date, not null 

*java.time.chrono.ChronoLocalDate.until(Temporal,TemporalUnit)*

public long until(
  java.time.temporal.Temporal endExclusive,
  java.time.temporal.TemporalUnit unit)

Calculates the amount of time until another date in terms of the specified 
unit. 

This calculates the amount of time between twoChronoLocalDateobjects in terms 
of a singleTemporalUnit. The start and end points arethisand the specified 
date. The result will be negative if the end is before the start. 
TheTemporalpassed to this method is converted to aChronoLocalDateusing 
(|java.time.chrono.Chronology|) . The calculation returns a whole number, 
representing the number of complete units between the two dates. For example, 
the amount in days between two dates can be calculated 
usingstartDate.until(endDate, DAYS). 

There are two equivalent ways of using this method. The first is to invoke this 
method. The second is to use (|java.time.temporal.TemporalUnit|) : 

// these two lines are equivalent amount = start.until(end, MONTHS); amount = 
MONTHS.between(start, end); 

The choice should be made based on which makes the code more readable. 

The calculation is implemented in this method for 
(|java.time.temporal.ChronoUnit|) . The 
unitsDAYS,WEEKS,MONTHS,YEARS,DECADES,CENTURIES,MILLENNIAandERASshould be 
supported by all implementations. OtherChronoUnitvalues will throw an 
exception. 

If the unit is not aChronoUnit, then the result of this method is obtained by 
invokingTemporalUnit.between(Temporal, Temporal)passingthisas the first 
argument and the converted input temporal as the second argument. 

This instance is immutable and unaffected by this method call. 


    endExclusive - the end date, exclusive, which is converted to a {@code ChronoLocalDate} in the 
       same chronology, not null 
    unit - the unit to measure the amount in, not null 

    Returns: the amount of time between this date and the end date 

*java.time.chrono.ChronoLocalDate.with(TemporalAdjuster)*

public |java.time.chrono.ChronoLocalDate| with(java.time.temporal.TemporalAdjuster adjuster)





*java.time.chrono.ChronoLocalDate.with(TemporalField,long)*

public |java.time.chrono.ChronoLocalDate| with(
  java.time.temporal.TemporalField field,
  long newValue)






