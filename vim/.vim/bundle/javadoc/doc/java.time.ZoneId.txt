*java.time.ZoneId* *ZoneId* A time-zone ID, such asEurope/Paris.

public abstract class ZoneId
  extends    |java.lang.Object|
  implements |java.io.Serializable|

|java.time.ZoneId_Description|
|java.time.ZoneId_Fields|
|java.time.ZoneId_Constructors|
|java.time.ZoneId_Methods|

================================================================================

*java.time.ZoneId_Fields*
|java.util.Map<java.lang.String, java.lang.String>_java.time.ZoneId.SHORT_IDS|

*java.time.ZoneId_Methods*
|java.time.ZoneId.equals(Object)|Checks if this time-zone ID is equal to anothe
|java.time.ZoneId.from(TemporalAccessor)|Obtains an instance ofZoneIdfrom a tem
|java.time.ZoneId.getAvailableZoneIds()|Gets the set of available zone IDs.
|java.time.ZoneId.getDisplayName(TextStyle,Locale)|Gets the textual representat
|java.time.ZoneId.getId()|Gets the unique time-zone ID.
|java.time.ZoneId.getRules()|Gets the time-zone rules for this ID allowing calc
|java.time.ZoneId.hashCode()|A hash code for this time-zone ID.
|java.time.ZoneId.normalized()|Normalizes the time-zone ID, returning aZoneOffs
|java.time.ZoneId.of(String)|Obtains an instance ofZoneIdfrom an ID ensuring th
|java.time.ZoneId.of(String,Map<String,String>)|Obtains an instance ofZoneIdusi
|java.time.ZoneId.ofOffset(String,ZoneOffset)|Obtains an instance ofZoneIdwrapp
|java.time.ZoneId.systemDefault()|Gets the system default time-zone.
|java.time.ZoneId.toString()|Outputs this zone as aString, using the ID.

*java.time.ZoneId_Description*

A time-zone ID, such asEurope/Paris. 

AZoneIdis used to identify the rules used to convert between an 
(|java.time.Instant|) and a (|java.time.LocalDateTime|) . There are two 
distinct types of ID: 

Fixed offsets - a fully resolved offset from UTC/Greenwich, that uses the same 
offset for all local date-times Geographical regions - an area where a specific 
set of rules for finding the offset from UTC/Greenwich apply 

Most fixed offsets are represented by (|java.time.ZoneOffset|) . Calling 
(|java.time.ZoneId|) on anyZoneIdwill ensure that a fixed offset ID will be 
represented as aZoneOffset. 

The actual rules, describing when and how the offset changes, are defined by 
(|java.time.zone.ZoneRules|) . This class is simply an ID used to obtain the 
underlying rules. This approach is taken because rules are defined by 
governments and change frequently, whereas the ID is stable. 

The distinction has other effects. Serializing theZoneIdwill only send the ID, 
whereas serializing the rules sends the entire data set. Similarly, a 
comparison of two IDs only examines the ID, whereas a comparison of two rules 
examines the entire data set. 

Time-zone IDs The ID is unique within the system. There are three types of ID. 

The simplest type of ID is that fromZoneOffset. This consists of 'Z' and IDs 
starting with '+' or '-'. 

The next type of ID are offset-style IDs with some form of prefix, such as 
'GMT+2' or 'UTC+01:00'. The recognised prefixes are 'UTC', 'GMT' and 'UT'. The 
offset is the suffix and will be normalized during creation. These IDs can be 
normalized to aZoneOffsetusingnormalized(). 

The third type of ID are region-based IDs. A region-based ID must be of two or 
more characters, and not start with 'UTC', 'GMT', 'UT' '+' or '-'. Region-based 
IDs are defined by configuration, see (|java.time.zone.ZoneRulesProvider|) . 
The configuration focuses on providing the lookup from the ID to the 
underlyingZoneRules. 

Time-zone rules are defined by governments and change frequently. There are a 
number of organizations, known here as groups, that monitor time-zone changes 
and collate them. The default group is the IANA Time Zone Database (TZDB). 
Other organizations include IATA (the airline industry body) and Microsoft. 

Each group defines its own format for the region ID it provides. The TZDB group 
defines IDs such as 'Europe/London' or 'America/New_York'. TZDB IDs take 
precedence over other groups. 

It is strongly recommended that the group name is included in all IDs supplied 
by groups other than TZDB to avoid conflicts. For example, IATA airline 
time-zone region IDs are typically the same as the three letter airport code. 
However, the airport of Utrecht has the code 'UTC', which is obviously a 
conflict. The recommended format for region IDs from groups other than TZDB is 
'group~region'. Thus if IATA data were defined, Utrecht airport would be 
'IATA~UTC'. 

Serialization This class can be serialized and stores the string zone ID in the 
external form. TheZoneOffsetsubclass uses a dedicated format that only stores 
the offset from UTC/Greenwich. 

AZoneIdcan be deserialized in a Java Runtime where the ID is unknown. For 
example, if a server-side Java Runtime has been updated with a new zone ID, but 
the client-side Java Runtime has not been updated. In this case, 
theZoneIdobject will exist, and can be queried 
usinggetId,equals,hashCode,toString,getDisplayNameandnormalized. However, any 
call togetRuleswill fail withZoneRulesException. This approach is designed to 
allow a (|java.time.ZonedDateTime|) to be loaded and queried, but not modified, 
on a Java Runtime with incomplete time-zone information. 

This is a <a href="/java/lang/doc-files/ValueBased.html">value-based class; use 
of identity-sensitive operations (including reference equality (==), identity 
hash code, or synchronization) on instances ofZoneIdmay have unpredictable 
results and should be avoided. Theequalsmethod should be used for comparisons. 



*java.util.Map<java.lang.String, java.lang.String>_java.time.ZoneId.SHORT_IDS*

A map of zone overrides to enable the short time-zone names to be used. 

Use of short zone IDs has been deprecated injava.util.TimeZone. This map allows 
the IDs to continue to be used via the (|java.time.ZoneId|) factory method. 

This map contains a mapping of the IDs that is in line with TZDB 2005r and 
later, where 'EST', 'MST' and 'HST' map to IDs which do not include daylight 
savings. 

This maps as follows: 

EST - -05:00 HST - -10:00 MST - -07:00 ACT - Australia/Darwin AET - 
Australia/Sydney AGT - America/Argentina/Buenos_Aires ART - Africa/Cairo AST - 
America/Anchorage BET - America/Sao_Paulo BST - Asia/Dhaka CAT - Africa/Harare 
CNT - America/St_Johns CST - America/Chicago CTT - Asia/Shanghai EAT - 
Africa/Addis_Ababa ECT - Europe/Paris IET - America/Indiana/Indianapolis IST - 
Asia/Kolkata JST - Asia/Tokyo MIT - Pacific/Apia NET - Asia/Yerevan NST - 
Pacific/Auckland PLT - Asia/Karachi PNT - America/Phoenix PRT - 
America/Puerto_Rico PST - America/Los_Angeles SST - Pacific/Guadalcanal VST - 
Asia/Ho_Chi_Minh 

The map is unmodifiable. 



*java.time.ZoneId.equals(Object)*

public boolean equals(java.lang.Object obj)

Checks if this time-zone ID is equal to another time-zone ID. 

The comparison is based on the ID. 


    obj - the object to check, null returns false 

    Returns: true if this is equal to the other time-zone ID 

*java.time.ZoneId.from(TemporalAccessor)*

public static |java.time.ZoneId| from(java.time.temporal.TemporalAccessor temporal)

Obtains an instance ofZoneIdfrom a temporal object. 

This obtains a zone based on the specified temporal. 
ATemporalAccessorrepresents an arbitrary set of date and time information, 
which this factory converts to an instance ofZoneId. 

ATemporalAccessorrepresents some form of date and time information. This 
factory converts the arbitrary temporal object to an instance ofZoneId. 

The conversion will try to obtain the zone in a way that favours region-based 
zones over offset-based zones using (|java.time.temporal.TemporalQueries|) . 

This method matches the signature of the functional interface 
(|java.time.temporal.TemporalQuery|) allowing it to be used in queries via 
method reference,ZoneId::from. 


    temporal - the temporal object to convert, not null 

    Returns: the zone ID, not null 

*java.time.ZoneId.getAvailableZoneIds()*

public static |java.util.Set|<String> getAvailableZoneIds()

Gets the set of available zone IDs. 

This set includes the string form of all available region-based IDs. 
Offset-based zone IDs are not included in the returned set. The ID can be 
passed to (|java.time.ZoneId|) to create aZoneId. 

The set of zone IDs can increase over time, although in a typical application 
the set of IDs is fixed. Each call to this method is thread-safe. 



    Returns: a modifiable copy of the set of zone IDs, not null 

*java.time.ZoneId.getDisplayName(TextStyle,Locale)*

public |java.lang.String| getDisplayName(
  java.time.format.TextStyle style,
  java.util.Locale locale)

Gets the textual representation of the zone, such as 'British Time' or 
'+02:00'. 

This returns the textual name used to identify the time-zone ID, suitable for 
presentation to the user. The parameters control the style of the returned text 
and the locale. 

If no textual mapping is found then the full ID(|java.time.ZoneId|) is 
returned. 


    style - the length of the text required, not null 
    locale - the locale to use, not null 

    Returns: the text value of the zone, not null 

*java.time.ZoneId.getId()*

public abstract |java.lang.String| getId()

Gets the unique time-zone ID. 

This ID uniquely defines this object. The format of an offset based ID is 
defined by (|java.time.ZoneOffset|) . 



    Returns: the time-zone unique ID, not null 

*java.time.ZoneId.getRules()*

public abstract |java.time.zone.ZoneRules| getRules()

Gets the time-zone rules for this ID allowing calculations to be performed. 

The rules provide the functionality associated with a time-zone, such as 
finding the offset for a given instant or local date-time. 

A time-zone can be invalid if it is deserialized in a Java Runtime which does 
not have the same rules loaded as the Java Runtime that stored it. In this 
case, calling this method will throw aZoneRulesException. 

The rules are supplied by (|java.time.zone.ZoneRulesProvider|) . An advanced 
provider may support dynamic updates to the rules without restarting the Java 
Runtime. If so, then the result of this method may change over time. Each 
individual call will be still remain thread-safe. (|java.time.ZoneOffset|) will 
always return a set of rules where the offset never changes. 



    Returns: the rules, not null 

*java.time.ZoneId.hashCode()*

public int hashCode()

A hash code for this time-zone ID. 



    Returns: a suitable hash code 

*java.time.ZoneId.normalized()*

public |java.time.ZoneId| normalized()

Normalizes the time-zone ID, returning aZoneOffsetwhere possible. 

The returns a normalizedZoneIdthat can be used in place of this ID. The result 
will haveZoneRulesequivalent to those returned by this object, however the ID 
returned bygetId()may be different. 

The normalization checks if the rules of thisZoneIdhave a fixed offset. If they 
do, then theZoneOffsetequal to that offset is returned. Otherwisethisis 
returned. 



    Returns: the time-zone unique ID, not null 

*java.time.ZoneId.of(String)*

public static |java.time.ZoneId| of(java.lang.String zoneId)

Obtains an instance ofZoneIdfrom an ID ensuring that the ID is valid and 
available for use. 

This method parses the ID producing aZoneIdorZoneOffset. AZoneOffsetis returned 
if the ID is 'Z', or starts with '+' or '-'. The result will always be a valid 
ID for which (|java.time.zone.ZoneRules|) can be obtained. 

Parsing matches the zone ID step by step as follows. 

If the zone ID equals 'Z', the result isZoneOffset.UTC. If the zone ID consists 
of a single letter, the zone ID is invalid andDateTimeExceptionis thrown. If 
the zone ID starts with '+' or '-', the ID is parsed as aZoneOffsetusing 
(|java.time.ZoneOffset|) . If the zone ID equals 'GMT', 'UTC' or 'UT' then the 
result is aZoneIdwith the same ID and rules equivalent toZoneOffset.UTC. If the 
zone ID starts with 'UTC+', 'UTC-', 'GMT+', 'GMT-', 'UT+' or 'UT-' then the ID 
is a prefixed offset-based ID. The ID is split in two, with a two or three 
letter prefix and a suffix starting with the sign. The suffix is parsed as a 
ZoneOffset(|java.time.ZoneOffset|) . The result will be aZoneIdwith the 
specified UTC/GMT/UT prefix and the normalized offset ID as per 
(|java.time.ZoneOffset|) . The rules of the returnedZoneIdwill be equivalent to 
the parsedZoneOffset. All other IDs are parsed as region-based zone IDs. Region 
IDs must match the regular expression [A-Za-z][A-Za-z0-9~/._+-]+ otherwise 
aDateTimeExceptionis thrown. If the zone ID is not in the configured set of 
IDs,ZoneRulesExceptionis thrown. The detailed format of the region ID depends 
on the group supplying the data. The default set of data is supplied by the 
IANA Time Zone Database (TZDB). This has region IDs of the form 
'{area}/{city}', such as 'Europe/Paris' or 'America/New_York'. This is 
compatible with most IDs from (|java.util.TimeZone|) . 


    zoneId - the time-zone ID, not null 

    Returns: the zone ID, not null 

*java.time.ZoneId.of(String,Map<String,String>)*

public static |java.time.ZoneId| of(
  java.lang.String zoneId,
  java.util.Map<java.lang.String, java.lang.String> aliasMap)

Obtains an instance ofZoneIdusing its ID using a map of aliases to supplement 
the standard zone IDs. 

Many users of time-zones use short abbreviations, such as PST for 'Pacific 
Standard Time' and PDT for 'Pacific Daylight Time'. These abbreviations are not 
unique, and so cannot be used as IDs. This method allows a map of string to 
time-zone to be setup and reused within an application. 


    zoneId - the time-zone ID, not null 
    aliasMap - a map of alias zone IDs (typically abbreviations) to real zone IDs, not null 

    Returns: the zone ID, not null 

*java.time.ZoneId.ofOffset(String,ZoneOffset)*

public static |java.time.ZoneId| ofOffset(
  java.lang.String prefix,
  java.time.ZoneOffset offset)

Obtains an instance ofZoneIdwrapping an offset. 

If the prefix is "GMT", "UTC", or "UT" aZoneIdwith the prefix and the non-zero 
offset is returned. If the prefix is empty""theZoneOffsetis returned. 


    prefix - the time-zone ID, not null 
    offset - the offset, not null 

    Returns: the zone ID, not null 

*java.time.ZoneId.systemDefault()*

public static |java.time.ZoneId| systemDefault()

Gets the system default time-zone. 

This queries (|java.util.TimeZone|) to find the default time-zone and converts 
it to aZoneId. If the system default time-zone is changed, then the result of 
this method will also change. 



    Returns: the zone ID, not null 

*java.time.ZoneId.toString()*

public |java.lang.String| toString()

Outputs this zone as aString, using the ID. 



    Returns: a string representation of this time-zone ID, not null 


