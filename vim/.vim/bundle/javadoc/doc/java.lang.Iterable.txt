*java.lang.Iterable* *Iterable* Implementing this interface allows an object to 

public interface interface Iterable<T>


|java.lang.Iterable_Description|
|java.lang.Iterable_Fields|
|java.lang.Iterable_Constructors|
|java.lang.Iterable_Methods|

================================================================================

*java.lang.Iterable_Methods*
|java.lang.Iterable.forEach(Consumer<?superT>)|Performs the given action for ea
|java.lang.Iterable.iterator()|Returns an iterator over elements of typeT.
|java.lang.Iterable.spliterator()|Creates aSpliteratorover the elements describ

*java.lang.Iterable_Description*

Implementing this interface allows an object to be the target of the "for-each 
loop" statement. See 

<a href="/../technotes/guides/language/foreach.html">For-each Loop 



*java.lang.Iterable.forEach(Consumer<?superT>)*

public void forEach(java.util.function.Consumer<? super T> action)

Performs the given action for each element of theIterableuntil all elements 
have been processed or the action throws an exception. Unless otherwise 
specified by the implementing class, actions are performed in the order of 
iteration (if an iteration order is specified). Exceptions thrown by the action 
are relayed to the caller. 


    action - The action to be performed for each element 

*java.lang.Iterable.iterator()*

public |java.util.Iterator|<T> iterator()

Returns an iterator over elements of typeT. 



    Returns: 

*java.lang.Iterable.spliterator()*

public |java.util.Spliterator|<T> spliterator()

Creates a (|java.util.Spliterator|) over the elements described by 
thisIterable. 



    Returns: a {@code Spliterator} over the elements described by this {@code Iterable}. 


