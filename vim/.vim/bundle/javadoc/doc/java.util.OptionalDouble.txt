*java.util.OptionalDouble* *OptionalDouble* A container object which may or may 

public final class OptionalDouble
  extends    |java.lang.Object|

|java.util.OptionalDouble_Description|
|java.util.OptionalDouble_Fields|
|java.util.OptionalDouble_Constructors|
|java.util.OptionalDouble_Methods|

================================================================================

*java.util.OptionalDouble_Methods*
|java.util.OptionalDouble.empty()|Returns an emptyOptionalDoubleinstance.
|java.util.OptionalDouble.equals(Object)|Indicates whether some other object is
|java.util.OptionalDouble.getAsDouble()|If a value is present in thisOptionalDo
|java.util.OptionalDouble.hashCode()|Returns the hash code value of the present
|java.util.OptionalDouble.ifPresent(DoubleConsumer)|Have the specified consumer
|java.util.OptionalDouble.isPresent()|Returntrueif there is a value present, ot
|java.util.OptionalDouble.of(double)|Return anOptionalDoublewith the specified 
|java.util.OptionalDouble.orElse(double)|Return the value if present, otherwise
|java.util.OptionalDouble.orElseGet(DoubleSupplier)|Return the value if present
|java.util.OptionalDouble.orElseThrow(Supplier<X>)|Return the contained value, 
|java.util.OptionalDouble.toString()|Returns a non-empty string representation 

*java.util.OptionalDouble_Description*

A container object which may or may not contain adoublevalue. If a value is 
present,isPresent()will returntrueandgetAsDouble()will return the value. 

Additional methods that depend on the presence or absence of a contained value 
are provided, such as orElse()(|java.util.OptionalDouble|) (return a default 
value if value not present) and ifPresent()(|java.util.OptionalDouble|) 
(execute a block of code if the value is present). 

This is a value-based class; use of identity-sensitive operations (including 
reference equality (==), identity hash code, or synchronization) on instances 
ofOptionalDoublemay have unpredictable results and should be avoided. 



*java.util.OptionalDouble.empty()*

public static |java.util.OptionalDouble| empty()

Returns an emptyOptionalDoubleinstance. No value is present for this 
OptionalDouble. 



    Returns: an empty {@code OptionalDouble}. 

*java.util.OptionalDouble.equals(Object)*

public boolean equals(java.lang.Object obj)

Indicates whether some other object is "equal to" this OptionalDouble. The 
other object is considered equal if: 

it is also anOptionalDoubleand; both instances have no value present or; the 
present values are "equal to" each other viaDouble.compare() == 0. 


    obj - an object to be tested for equality 

    Returns: {code true} if the other object is "equal to" this object otherwise {@code 
             false} 

*java.util.OptionalDouble.getAsDouble()*

public double getAsDouble()

If a value is present in thisOptionalDouble, returns the value, otherwise 
throwsNoSuchElementException. 



    Returns: the value held by this {@code OptionalDouble} 

*java.util.OptionalDouble.hashCode()*

public int hashCode()

Returns the hash code value of the present value, if any, or 0 (zero) if no 
value is present. 



    Returns: hash code value of the present value or 0 if no value is present 

*java.util.OptionalDouble.ifPresent(DoubleConsumer)*

public void ifPresent(java.util.function.DoubleConsumer consumer)

Have the specified consumer accept the value if a value is present, otherwise 
do nothing. 


    consumer - block to be executed if a value is present 

*java.util.OptionalDouble.isPresent()*

public boolean isPresent()

Returntrueif there is a value present, otherwisefalse. 



    Returns: {@code true} if there is a value present, otherwise {@code false} 

*java.util.OptionalDouble.of(double)*

public static |java.util.OptionalDouble| of(double value)

Return anOptionalDoublewith the specified value present. 


    value - the value to be present 

    Returns: an {@code OptionalDouble} with the value present 

*java.util.OptionalDouble.orElse(double)*

public double orElse(double other)

Return the value if present, otherwise returnother. 


    other - the value to be returned if there is no value present 

    Returns: the value, if present, otherwise {@code other} 

*java.util.OptionalDouble.orElseGet(DoubleSupplier)*

public double orElseGet(java.util.function.DoubleSupplier other)

Return the value if present, otherwise invokeotherand return the result of that 
invocation. 


    other - a {@code DoubleSupplier} whose result is returned if no value is present 

    Returns: the value if present otherwise the result of {@code other.getAsDouble()} 

*java.util.OptionalDouble.orElseThrow(Supplier<X>)*

public double orElseThrow(java.util.function.Supplier<X> exceptionSupplier)
  throws |java.lang.Throwable|
         
Return the contained value, if present, otherwise throw an exception to be 
created by the provided supplier. 


    exceptionSupplier - The supplier which will return the exception to be thrown 

    Returns: the present value 

*java.util.OptionalDouble.toString()*

public |java.lang.String| toString()

Returns a non-empty string representation of this object suitable for 
debugging. The exact presentation format is unspecified and may vary between 
implementations and versions. 



    Returns: the string representation of this instance 


