*java.util.concurrent.atomic.LongAccumulator* *LongAccumulator* One or more vari

public class LongAccumulator
  extends    |java.util.concurrent.atomic.Striped64|
  implements |java.io.Serializable|

|java.util.concurrent.atomic.LongAccumulator_Description|
|java.util.concurrent.atomic.LongAccumulator_Fields|
|java.util.concurrent.atomic.LongAccumulator_Constructors|
|java.util.concurrent.atomic.LongAccumulator_Methods|

================================================================================

*java.util.concurrent.atomic.LongAccumulator_Constructors*
|java.util.concurrent.atomic.LongAccumulator(LongBinaryOperator,long)|Creates a

*java.util.concurrent.atomic.LongAccumulator_Methods*
|java.util.concurrent.atomic.LongAccumulator.accumulate(long)|Updates with the 
|java.util.concurrent.atomic.LongAccumulator.doubleValue()|Returns the#get curr
|java.util.concurrent.atomic.LongAccumulator.floatValue()|Returns the#get curre
|java.util.concurrent.atomic.LongAccumulator.get()|Returns the current value.
|java.util.concurrent.atomic.LongAccumulator.getThenReset()|Equivalent in effec
|java.util.concurrent.atomic.LongAccumulator.intValue()|Returns the#get current
|java.util.concurrent.atomic.LongAccumulator.longValue()|Equivalent to#get.
|java.util.concurrent.atomic.LongAccumulator.reset()|Resets variables maintaini
|java.util.concurrent.atomic.LongAccumulator.toString()|Returns the String repr

*java.util.concurrent.atomic.LongAccumulator_Description*

One or more variables that together maintain a runninglongvalue updated using a 
supplied function. When updates (method 
(|java.util.concurrent.atomic.LongAccumulator|) ) are contended across threads, 
the set of variables may grow dynamically to reduce contention. Method 
(|java.util.concurrent.atomic.LongAccumulator|) (or, equivalently, 
(|java.util.concurrent.atomic.LongAccumulator|) ) returns the current value 
across the variables maintaining updates. 

This class is usually preferable to (|java.util.concurrent.atomic.AtomicLong|) 
when multiple threads update a common value that is used for purposes such as 
collecting statistics, not for fine-grained synchronization control. Under low 
update contention, the two classes have similar characteristics. But under high 
contention, expected throughput of this class is significantly higher, at the 
expense of higher space consumption. 

The order of accumulation within or across threads is not guaranteed and cannot 
be depended upon, so this class is only applicable to functions for which the 
order of accumulation does not matter. The supplied accumulator function should 
be side-effect-free, since it may be re-applied when attempted updates fail due 
to contention among threads. The function is applied with the current value as 
its first argument, and the given update as the second argument. For example, 
to maintain a running maximum value, you could supplyLong::maxalong 
withLong.MIN_VALUEas the identity. 

Class (|java.util.concurrent.atomic.LongAdder|) provides analogs of the 
functionality of this class for the common special case of maintaining counts 
and sums. The callnew LongAdder()is equivalent tonew LongAccumulator((x, y) -> 
x + y, 0L. 

This class extends (|java.lang.Number|) , but does not define methods such 
asequals,hashCodeandcompareTobecause instances are expected to be mutated, and 
so are not useful as collection keys. 



*java.util.concurrent.atomic.LongAccumulator(LongBinaryOperator,long)*

public LongAccumulator(
  java.util.function.LongBinaryOperator accumulatorFunction,
  long identity)

Creates a new instance using the given accumulator function and identity 
element. 

    accumulatorFunction - a side-effect-free function of two arguments 
    identity - identity (initial value) for the accumulator function 

*java.util.concurrent.atomic.LongAccumulator.accumulate(long)*

public void accumulate(long x)

Updates with the given value. 


    x - the value 

*java.util.concurrent.atomic.LongAccumulator.doubleValue()*

public double doubleValue()

Returns the current value(|java.util.concurrent.atomic.LongAccumulator|) as 
adoubleafter a widening primitive conversion. 



*java.util.concurrent.atomic.LongAccumulator.floatValue()*

public float floatValue()

Returns the current value(|java.util.concurrent.atomic.LongAccumulator|) as 
afloatafter a widening primitive conversion. 



*java.util.concurrent.atomic.LongAccumulator.get()*

public long get()

Returns the current value. The returned value is NOT an atomic snapshot; 
invocation in the absence of concurrent updates returns an accurate result, but 
concurrent updates that occur while the value is being calculated might not be 
incorporated. 



    Returns: the current value 

*java.util.concurrent.atomic.LongAccumulator.getThenReset()*

public long getThenReset()

Equivalent in effect to (|java.util.concurrent.atomic.LongAccumulator|) 
followed by (|java.util.concurrent.atomic.LongAccumulator|) . This method may 
apply for example during quiescent points between multithreaded computations. 
If there are updates concurrent with this method, the returned value is not 
guaranteed to be the final value occurring before the reset. 



    Returns: the value before reset 

*java.util.concurrent.atomic.LongAccumulator.intValue()*

public int intValue()

Returns the current value(|java.util.concurrent.atomic.LongAccumulator|) as 
anintafter a narrowing primitive conversion. 



*java.util.concurrent.atomic.LongAccumulator.longValue()*

public long longValue()

Equivalent to (|java.util.concurrent.atomic.LongAccumulator|) . 



    Returns: the current value 

*java.util.concurrent.atomic.LongAccumulator.reset()*

public void reset()

Resets variables maintaining updates to the identity value. This method may be 
a useful alternative to creating a new updater, but is only effective if there 
are no concurrent updates. Because this method is intrinsically racy, it should 
only be used when it is known that no threads are concurrently updating. 



*java.util.concurrent.atomic.LongAccumulator.toString()*

public |java.lang.String| toString()

Returns the String representation of the current value. 



    Returns: the String representation of the current value 


