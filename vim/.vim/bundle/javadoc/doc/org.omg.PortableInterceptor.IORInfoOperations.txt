*org.omg.PortableInterceptor.IORInfoOperations* *IORInfoOperations* Provides the

public interface interface IORInfoOperations


|org.omg.PortableInterceptor.IORInfoOperations_Description|
|org.omg.PortableInterceptor.IORInfoOperations_Fields|
|org.omg.PortableInterceptor.IORInfoOperations_Constructors|
|org.omg.PortableInterceptor.IORInfoOperations_Methods|

================================================================================

*org.omg.PortableInterceptor.IORInfoOperations_Methods*
|org.omg.PortableInterceptor.IORInfoOperations.adapter_template()|Return the ob
|org.omg.PortableInterceptor.IORInfoOperations.add_ior_component_to_profile(TaggedComponent,int)|
|org.omg.PortableInterceptor.IORInfoOperations.add_ior_component(TaggedComponent)|
|org.omg.PortableInterceptor.IORInfoOperations.current_factory()|On read, retur
|org.omg.PortableInterceptor.IORInfoOperations.current_factory(ObjectReferenceFactory)|
|org.omg.PortableInterceptor.IORInfoOperations.get_effective_policy(int)|Allows
|org.omg.PortableInterceptor.IORInfoOperations.manager_id()|Return the adapter 
|org.omg.PortableInterceptor.IORInfoOperations.state()|Return the adapter state

*org.omg.PortableInterceptor.IORInfoOperations_Description*

Provides the server-side ORB service with access to the applicable policies 
during IOR construction and the ability to add components. The ORB passes an 
instance of its implementation of this interface as a parameter to 
IORInterceptor.establish_components. 



*org.omg.PortableInterceptor.IORInfoOperations.adapter_template()*

public |org.omg.PortableInterceptor.ObjectReferenceTemplate| adapter_template()

Return the object reference template of the object adapter that was just 
created and is running IOR interceptors. 



*org.omg.PortableInterceptor.IORInfoOperations.add_ior_component_to_profile(TaggedComponent,int)*

public void add_ior_component_to_profile(
  org.omg.IOP.TaggedComponent tagged_component,
  int profile_id)

A portable ORB service implementation calls add_ior_component_to_profile from 
its implementation of establish_components to add a tagged component to the set 
which will be included when constructing IORs. The components in this set will 
be included in the specified profile. 

Any number of components may exist with the same component ID. 


    tagged_component - The IOP.TaggedComponent to add. 
    profile_id - The profile id of the profile to which this component will be added. 

*org.omg.PortableInterceptor.IORInfoOperations.add_ior_component(TaggedComponent)*

public void add_ior_component(org.omg.IOP.TaggedComponent tagged_component)

A portable ORB service implementation calls add_ior_component from its 
implementation of establish_components to add a tagged component to the set 
which will be included when constructing IORs. The components in this set will 
be included in all profiles. 

Any number of components may exist with the same component ID. 


    tagged_component - The IOP.TaggedComponent to add. 

*org.omg.PortableInterceptor.IORInfoOperations.current_factory()*

public |org.omg.PortableInterceptor.ObjectReferenceFactory| current_factory()

On read, returns the current factory that will be used to create object 
references for the object adapter that was just created and is running IOR 
interceptors. By default, this factory is the same as the value of the 
adapter_template attribute. The current_factory may also be set to another 
object reference template inside an IORInterceptor_3_0. 



*org.omg.PortableInterceptor.IORInfoOperations.current_factory(ObjectReferenceFactory)*

public void current_factory(org.omg.PortableInterceptor.ObjectReferenceFactory newCurrent_factory)

On read, returns the current factory that will be used to create object 
references for the object adapter that was just created and is running IOR 
interceptors. By default, this factory is the same as the value of the 
adapter_template attribute. The current_factory may also be set to another 
object reference template inside an IORInterceptor_3_0. 



*org.omg.PortableInterceptor.IORInfoOperations.get_effective_policy(int)*

public |org.omg.CORBA.Policy| get_effective_policy(int type)

Allows an ORB service implementation to determine what server side policy of a 
particular type is in effect for an IOR being constructed. When the IOR being 
constructed is for an object implemented using a POA, all Policy objects passed 
to the PortableServer.POA.create_POA call that created that POA are accessable 
via get_effective_policy. 

If a policy for the given type is not known to the ORB, then this operation 
will throw INV_POLICY with a standard minor code of 2. 


    type - an int specifying the type of policy to return. 

    Returns: The effective CORBA.Policy object of the requested type. If the given policy 
             type is known, but no policy of that type is in effect, then this 
             operation will return a nil object reference. 

*org.omg.PortableInterceptor.IORInfoOperations.manager_id()*

public int manager_id()

Return the adapter manager id of the object adapter that was just created and 
is running IOR interceptors. 



*org.omg.PortableInterceptor.IORInfoOperations.state()*

public short state()

Return the adapter state of the object adapter that was just created and is 
running IOR interceptors. 




