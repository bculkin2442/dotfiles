*java.time.chrono.ChronoPeriod* *ChronoPeriod* A date-based amount of time, such

public interface interface ChronoPeriod

  implements |java.time.temporal.TemporalAmount|

|java.time.chrono.ChronoPeriod_Description|
|java.time.chrono.ChronoPeriod_Fields|
|java.time.chrono.ChronoPeriod_Constructors|
|java.time.chrono.ChronoPeriod_Methods|

================================================================================

*java.time.chrono.ChronoPeriod_Methods*
|java.time.chrono.ChronoPeriod.addTo(Temporal)|Adds this period to the specifie
|java.time.chrono.ChronoPeriod.between(ChronoLocalDate,ChronoLocalDate)|Obtains
|java.time.chrono.ChronoPeriod.equals(Object)|Checks if this period is equal to
|java.time.chrono.ChronoPeriod.get(TemporalUnit)|Gets the value of the requeste
|java.time.chrono.ChronoPeriod.getChronology()|Gets the chronology that defines
|java.time.chrono.ChronoPeriod.getUnits()|Gets the set of units supported by th
|java.time.chrono.ChronoPeriod.hashCode()|A hash code for this period.
|java.time.chrono.ChronoPeriod.isNegative()|Checks if any of the supported unit
|java.time.chrono.ChronoPeriod.isZero()|Checks if all the supported units of th
|java.time.chrono.ChronoPeriod.minus(TemporalAmount)|Returns a copy of this per
|java.time.chrono.ChronoPeriod.multipliedBy(int)|Returns a new instance with ea
|java.time.chrono.ChronoPeriod.negated()|Returns a new instance with each amoun
|java.time.chrono.ChronoPeriod.normalized()|Returns a copy of this period with 
|java.time.chrono.ChronoPeriod.plus(TemporalAmount)|Returns a copy of this peri
|java.time.chrono.ChronoPeriod.subtractFrom(Temporal)|Subtracts this period fro
|java.time.chrono.ChronoPeriod.toString()|Outputs this period as aString.

*java.time.chrono.ChronoPeriod_Description*

A date-based amount of time, such as '3 years, 4 months and 5 days' in an 
arbitrary chronology, intended for advanced globalization use cases. 

This interface models a date-based amount of time in a calendar system. While 
most calendar systems use years, months and days, some do not. Therefore, this 
interface operates solely in terms of a set of supported units that are defined 
by theChronology. The set of supported units is fixed for a given chronology. 
The amount of a supported unit may be set to zero. 

The period is modeled as a directed amount of time, meaning that individual 
parts of the period may be negative. 



*java.time.chrono.ChronoPeriod.addTo(Temporal)*

public |java.time.temporal.Temporal| addTo(java.time.temporal.Temporal temporal)

Adds this period to the specified temporal object. 

This returns a temporal object of the same observable type as the input with 
this period added. 

In most cases, it is clearer to reverse the calling pattern by using 
(|java.time.temporal.Temporal|) . 

// these two lines are equivalent, but the second approach is recommended 
dateTime = thisPeriod.addTo(dateTime); dateTime = dateTime.plus(thisPeriod); 

The specified temporal must have the same chronology as this period. This 
returns a temporal with the non-zero supported units added. 

This instance is immutable and unaffected by this method call. 


    temporal - the temporal object to adjust, not null 

    Returns: an object of the same type with the adjustment made, not null 

*java.time.chrono.ChronoPeriod.between(ChronoLocalDate,ChronoLocalDate)*

public static |java.time.chrono.ChronoPeriod| between(
  java.time.chrono.ChronoLocalDate startDateInclusive,
  java.time.chrono.ChronoLocalDate endDateExclusive)

Obtains aChronoPeriodconsisting of amount of time between two dates. 

The start date is included, but the end date is not. The period is calculated 
using (|java.time.chrono.ChronoLocalDate|) . As such, the calculation is 
chronology specific. 

The chronology of the first date is used. The chronology of the second date is 
ignored, with the date being converted to the target chronology system before 
the calculation starts. 

The result of this method can be a negative period if the end is before the 
start. In most cases, the positive/negative sign will be the same in each of 
the supported fields. 


    startDateInclusive - the start date, inclusive, specifying the chronology of the calculation, not 
       null 
    endDateExclusive - the end date, exclusive, in any chronology, not null 

    Returns: the period between this date and the end date, not null 

*java.time.chrono.ChronoPeriod.equals(Object)*

public boolean equals(java.lang.Object obj)

Checks if this period is equal to another period, including the chronology. 

Compares this period with another ensuring that the type, each amount and the 
chronology are the same. Note that this means that a period of "15 Months" is 
not equal to a period of "1 Year and 3 Months". 


    obj - the object to check, null returns false 

    Returns: true if this is equal to the other period 

*java.time.chrono.ChronoPeriod.get(TemporalUnit)*

public long get(java.time.temporal.TemporalUnit unit)

Gets the value of the requested unit. 

The supported units are chronology specific. They will typically be 
YEARS(|java.time.temporal.ChronoUnit|) , 
MONTHS(|java.time.temporal.ChronoUnit|) and 
DAYS(|java.time.temporal.ChronoUnit|) . Requesting an unsupported unit will 
throw an exception. 


    unit - the {@code TemporalUnit} for which to return the value 

    Returns: the long value of the unit 

*java.time.chrono.ChronoPeriod.getChronology()*

public |java.time.chrono.Chronology| getChronology()

Gets the chronology that defines the meaning of the supported units. 

The period is defined by the chronology. It controls the supported units and 
restricts addition/subtraction toChronoLocalDateinstances of the same 
chronology. 



    Returns: the chronology defining the period, not null 

*java.time.chrono.ChronoPeriod.getUnits()*

public |java.util.List|<TemporalUnit> getUnits()

Gets the set of units supported by this period. 

The supported units are chronology specific. They will typically be 
YEARS(|java.time.temporal.ChronoUnit|) , 
MONTHS(|java.time.temporal.ChronoUnit|) and 
DAYS(|java.time.temporal.ChronoUnit|) . They are returned in order from largest 
to smallest. 

This set can be used in conjunction with (|java.time.chrono.ChronoPeriod|) to 
access the entire state of the period. 



    Returns: a list containing the supported units, not null 

*java.time.chrono.ChronoPeriod.hashCode()*

public int hashCode()

A hash code for this period. 



    Returns: a suitable hash code 

*java.time.chrono.ChronoPeriod.isNegative()*

public boolean isNegative()

Checks if any of the supported units of this period are negative. 



    Returns: true if any unit of this period is negative 

*java.time.chrono.ChronoPeriod.isZero()*

public boolean isZero()

Checks if all the supported units of this period are zero. 



    Returns: true if this period is zero-length 

*java.time.chrono.ChronoPeriod.minus(TemporalAmount)*

public |java.time.chrono.ChronoPeriod| minus(java.time.temporal.TemporalAmount amountToSubtract)

Returns a copy of this period with the specified period subtracted. 

If the specified amount is aChronoPeriodthen it must have the same chronology 
as this period. Implementations may choose to accept or reject 
otherTemporalAmountimplementations. 

This instance is immutable and unaffected by this method call. 


    amountToSubtract - the period to subtract, not null 

    Returns: a {@code ChronoPeriod} based on this period with the requested period 
             subtracted, not null 

*java.time.chrono.ChronoPeriod.multipliedBy(int)*

public |java.time.chrono.ChronoPeriod| multipliedBy(int scalar)

Returns a new instance with each amount in this period in this period 
multiplied by the specified scalar. 

This returns a period with each supported unit individually multiplied. For 
example, a period of "2 years, -3 months and 4 days" multiplied by 3 will 
return "6 years, -9 months and 12 days". No normalization is performed. 


    scalar - the scalar to multiply by, not null 

    Returns: a {@code ChronoPeriod} based on this period with the amounts multiplied by the 
             scalar, not null 

*java.time.chrono.ChronoPeriod.negated()*

public |java.time.chrono.ChronoPeriod| negated()

Returns a new instance with each amount in this period negated. 

This returns a period with each supported unit individually negated. For 
example, a period of "2 years, -3 months and 4 days" will be negated to "-2 
years, 3 months and -4 days". No normalization is performed. 



    Returns: a {@code ChronoPeriod} based on this period with the amounts negated, not null 

*java.time.chrono.ChronoPeriod.normalized()*

public |java.time.chrono.ChronoPeriod| normalized()

Returns a copy of this period with the amounts of each unit normalized. 

The process of normalization is specific to each calendar system. For example, 
in the ISO calendar system, the years and months are normalized but the days 
are not, such that "15 months" would be normalized to "1 year and 3 months". 

This instance is immutable and unaffected by this method call. 



    Returns: a {@code ChronoPeriod} based on this period with the amounts of each unit 
             normalized, not null 

*java.time.chrono.ChronoPeriod.plus(TemporalAmount)*

public |java.time.chrono.ChronoPeriod| plus(java.time.temporal.TemporalAmount amountToAdd)

Returns a copy of this period with the specified period added. 

If the specified amount is aChronoPeriodthen it must have the same chronology 
as this period. Implementations may choose to accept or reject 
otherTemporalAmountimplementations. 

This instance is immutable and unaffected by this method call. 


    amountToAdd - the period to add, not null 

    Returns: a {@code ChronoPeriod} based on this period with the requested period added, 
             not null 

*java.time.chrono.ChronoPeriod.subtractFrom(Temporal)*

public |java.time.temporal.Temporal| subtractFrom(java.time.temporal.Temporal temporal)

Subtracts this period from the specified temporal object. 

This returns a temporal object of the same observable type as the input with 
this period subtracted. 

In most cases, it is clearer to reverse the calling pattern by using 
(|java.time.temporal.Temporal|) . 

// these two lines are equivalent, but the second approach is recommended 
dateTime = thisPeriod.subtractFrom(dateTime); dateTime = 
dateTime.minus(thisPeriod); 

The specified temporal must have the same chronology as this period. This 
returns a temporal with the non-zero supported units subtracted. 

This instance is immutable and unaffected by this method call. 


    temporal - the temporal object to adjust, not null 

    Returns: an object of the same type with the adjustment made, not null 

*java.time.chrono.ChronoPeriod.toString()*

public |java.lang.String| toString()

Outputs this period as aString. 

The output will include the period amounts and chronology. 



    Returns: a string representation of this period, not null 


