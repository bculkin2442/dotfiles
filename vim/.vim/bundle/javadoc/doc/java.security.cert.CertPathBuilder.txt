*java.security.cert.CertPathBuilder* *CertPathBuilder* A class for building cert

public class CertPathBuilder
  extends    |java.lang.Object|

|java.security.cert.CertPathBuilder_Description|
|java.security.cert.CertPathBuilder_Fields|
|java.security.cert.CertPathBuilder_Constructors|
|java.security.cert.CertPathBuilder_Methods|

================================================================================

*java.security.cert.CertPathBuilder_Constructors*
|java.security.cert.CertPathBuilder(CertPathBuilderSpi,Provider,String)|Creates

*java.security.cert.CertPathBuilder_Methods*
|java.security.cert.CertPathBuilder.build(CertPathParameters)|Attempts to build
|java.security.cert.CertPathBuilder.getAlgorithm()|Returns the name of the algo
|java.security.cert.CertPathBuilder.getDefaultType()|Returns the defaultCertPat
|java.security.cert.CertPathBuilder.getInstance(String)|Returns aCertPathBuilde
|java.security.cert.CertPathBuilder.getInstance(String,Provider)|Returns aCertP
|java.security.cert.CertPathBuilder.getInstance(String,String)|Returns aCertPat
|java.security.cert.CertPathBuilder.getProvider()|Returns the provider of thisC
|java.security.cert.CertPathBuilder.getRevocationChecker()|Returns aCertPathChe

*java.security.cert.CertPathBuilder_Description*

A class for building certification paths (also known as certificate chains). 

This class uses a provider-based architecture. To create aCertPathBuilder, call 
one of the staticgetInstancemethods, passing in the algorithm name of 
theCertPathBuilderdesired and optionally the name of the provider desired. 

Once aCertPathBuilderobject has been created, certification paths can be 
constructed by calling the build(|java.security.cert.CertPathBuilder|) method 
and passing it an algorithm-specific set of parameters. If successful, the 
result (including theCertPaththat was built) is returned in an object that 
implements theCertPathBuilderResultinterface. 

The (|java.security.cert.CertPathBuilder|) method allows an application to 
specify additional algorithm-specific parameters and options used by 
theCertPathBuilderwhen checking the revocation status of certificates. Here is 
an example demonstrating how it is used with the PKIX algorithm: 



CertPathBuilder cpb = CertPathBuilder.getInstance("PKIX"); 
PKIXRevocationChecker rc = (PKIXRevocationChecker)cpb.getRevocationChecker(); 
rc.setOptions(EnumSet.of(Option.PREFER_CRLS)); params.addCertPathChecker(rc); 
CertPathBuilderResult cpbr = cpb.build(params); 

Every implementation of the Java platform is required to support the following 
standardCertPathBuilderalgorithm: 

PKIX 

This algorithm is described in the <a href= 
"/../technotes/guides/security/StandardNames.html#CertPathBuilder"> 
CertPathBuilder section of the Java Cryptography Architecture Standard 
Algorithm Name Documentation. Consult the release documentation for your 
implementation to see if any other algorithms are supported. 

Concurrent Access 

The static methods of this class are guaranteed to be thread-safe. Multiple 
threads may concurrently invoke the static methods defined in this class with 
no ill effects. 

However, this is not true for the non-static methods defined by this class. 
Unless otherwise documented by a specific provider, threads that need to access 
a singleCertPathBuilderinstance concurrently should synchronize amongst 
themselves and provide the necessary locking. Multiple threads each 
manipulating a differentCertPathBuilderinstance need not synchronize. 



*java.security.cert.CertPathBuilder(CertPathBuilderSpi,Provider,String)*

protected CertPathBuilder(
  java.security.cert.CertPathBuilderSpi builderSpi,
  java.security.Provider provider,
  java.lang.String algorithm)

Creates aCertPathBuilderobject of the given algorithm, and encapsulates the 
given provider implementation (SPI object) in it. 

    builderSpi - the provider implementation 
    provider - the provider 
    algorithm - the algorithm name 

*java.security.cert.CertPathBuilder.build(CertPathParameters)*

public final |java.security.cert.CertPathBuilderResult| build(java.security.cert.CertPathParameters params)
  throws |java.security.cert.CertPathBuilderException|
         |java.security.InvalidAlgorithmParameterException|
         
Attempts to build a certification path using the specified algorithm parameter 
set. 


    params - the algorithm parameters 

    Returns: the result of the build algorithm 

*java.security.cert.CertPathBuilder.getAlgorithm()*

public final |java.lang.String| getAlgorithm()

Returns the name of the algorithm of thisCertPathBuilder. 



    Returns: the name of the algorithm of this {@code CertPathBuilder} 

*java.security.cert.CertPathBuilder.getDefaultType()*

public static final |java.lang.String| getDefaultType()

Returns the defaultCertPathBuildertype as specified by 
thecertpathbuilder.typesecurity property, or the string"PKIX"if no such 
property exists. 

The defaultCertPathBuildertype can be used by applications that do not want to 
use a hard-coded type when calling one of thegetInstancemethods, and want to 
provide a default type in case a user does not specify its own. 

The defaultCertPathBuildertype can be changed by setting the value of 
thecertpathbuilder.typesecurity property to the desired type. 



    Returns: the default {@code CertPathBuilder} type as specified by the {@code 
             certpathbuilder.type} security property, or the string {@literal 
             "PKIX"} if no such property exists. 

*java.security.cert.CertPathBuilder.getInstance(String)*

public static |java.security.cert.CertPathBuilder| getInstance(java.lang.String algorithm)
  throws |java.security.NoSuchAlgorithmException|
         
Returns aCertPathBuilderobject that implements the specified algorithm. 

This method traverses the list of registered security Providers, starting with 
the most preferred Provider. A new CertPathBuilder object encapsulating the 
CertPathBuilderSpi implementation from the first Provider that supports the 
specified algorithm is returned. 

Note that the list of registered providers may be retrieved via the 
Security.getProviders()(|java.security.Security|) method. 


    algorithm - the name of the requested {@code CertPathBuilder} algorithm. See the 
       CertPathBuilder section in the Java Cryptography Architecture Standard 
       Algorithm Name Documentation for information about standard algorithm 
       names. 

    Returns: a {@code CertPathBuilder} object that implements the specified algorithm. 

*java.security.cert.CertPathBuilder.getInstance(String,Provider)*

public static |java.security.cert.CertPathBuilder| getInstance(
  java.lang.String algorithm,
  java.security.Provider provider)
  throws |java.security.NoSuchAlgorithmException|
         
Returns aCertPathBuilderobject that implements the specified algorithm. 

A new CertPathBuilder object encapsulating the CertPathBuilderSpi 
implementation from the specified Provider object is returned. Note that the 
specified Provider object does not have to be registered in the provider list. 


    algorithm - the name of the requested {@code CertPathBuilder} algorithm. See the 
       CertPathBuilder section in the Java Cryptography Architecture Standard 
       Algorithm Name Documentation for information about standard algorithm 
       names. 
    provider - the provider. 

    Returns: a {@code CertPathBuilder} object that implements the specified algorithm. 

*java.security.cert.CertPathBuilder.getInstance(String,String)*

public static |java.security.cert.CertPathBuilder| getInstance(
  java.lang.String algorithm,
  java.lang.String provider)
  throws |java.security.NoSuchAlgorithmException|
         |java.security.NoSuchProviderException|
         
Returns aCertPathBuilderobject that implements the specified algorithm. 

A new CertPathBuilder object encapsulating the CertPathBuilderSpi 
implementation from the specified provider is returned. The specified provider 
must be registered in the security provider list. 

Note that the list of registered providers may be retrieved via the 
Security.getProviders()(|java.security.Security|) method. 


    algorithm - the name of the requested {@code CertPathBuilder} algorithm. See the 
       CertPathBuilder section in the Java Cryptography Architecture Standard 
       Algorithm Name Documentation for information about standard algorithm 
       names. 
    provider - the name of the provider. 

    Returns: a {@code CertPathBuilder} object that implements the specified algorithm. 

*java.security.cert.CertPathBuilder.getProvider()*

public final |java.security.Provider| getProvider()

Returns the provider of thisCertPathBuilder. 



    Returns: the provider of this {@code CertPathBuilder} 

*java.security.cert.CertPathBuilder.getRevocationChecker()*

public final |java.security.cert.CertPathChecker| getRevocationChecker()

Returns aCertPathCheckerthat the encapsulatedCertPathBuilderSpiimplementation 
uses to check the revocation status of certificates. A PKIX implementation 
returns objects of typePKIXRevocationChecker. Each invocation of this method 
returns a new instance ofCertPathChecker. 

The primary purpose of this method is to allow callers to specify additional 
input parameters and options specific to revocation checking. See the class 
description for an example. 



    Returns: a {@code CertPathChecker} 


