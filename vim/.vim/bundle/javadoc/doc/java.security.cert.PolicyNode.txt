*java.security.cert.PolicyNode* *PolicyNode* An immutable valid policy tree node

public interface interface PolicyNode


|java.security.cert.PolicyNode_Description|
|java.security.cert.PolicyNode_Fields|
|java.security.cert.PolicyNode_Constructors|
|java.security.cert.PolicyNode_Methods|

================================================================================

*java.security.cert.PolicyNode_Methods*
|java.security.cert.PolicyNode.getChildren()|Returns an iterator over the child
|java.security.cert.PolicyNode.getDepth()|Returns the depth of this node in the
|java.security.cert.PolicyNode.getExpectedPolicies()|Returns the set of expecte
|java.security.cert.PolicyNode.getParent()|Returns the parent of this node, orn
|java.security.cert.PolicyNode.getPolicyQualifiers()|Returns the set of policy 
|java.security.cert.PolicyNode.getValidPolicy()|Returns the valid policy repres
|java.security.cert.PolicyNode.isCritical()|Returns the criticality indicator o

*java.security.cert.PolicyNode_Description*

An immutable valid policy tree node as defined by the PKIX certification path 
validation algorithm. 

One of the outputs of the PKIX certification path validation algorithm is a 
valid policy tree, which includes the policies that were determined to be 
valid, how this determination was reached, and any policy qualifiers 
encountered. This tree is of depth n, where n is the length of the 
certification path that has been validated. 

Most applications will not need to examine the valid policy tree. They can 
achieve their policy processing goals by setting the policy-related parameters 
inPKIXParameters. However, the valid policy tree is available for more 
sophisticated applications, especially those that process policy qualifiers. 

PKIXCertPathValidatorResult.getPolicyTree(|java.security.cert.PKIXCertPathValidatorResult|)
returns the root node of the valid policy tree. The tree can be traversed using 
the getChildren(|java.security.cert.PolicyNode|) and 
getParent(|java.security.cert.PolicyNode|) methods. Data about a particular 
node can be retrieved using other methods ofPolicyNode. 

Concurrent Access AllPolicyNodeobjects must be immutable and thread-safe. 
Multiple threads may concurrently invoke the methods defined in this class on a 
singlePolicyNodeobject (or more than one) with no ill effects. This stipulation 
applies to all public fields and methods of this class and any added or 
overridden by subclasses. 



*java.security.cert.PolicyNode.getChildren()*

public |java.util.Iterator|<? extends java.security.cert.PolicyNode> getChildren()

Returns an iterator over the children of this node. Any attempts to modify the 
children of this node through theIterator's remove method must throw 
anUnsupportedOperationException. 



    Returns: an iterator over the children of this node 

*java.security.cert.PolicyNode.getDepth()*

public int getDepth()

Returns the depth of this node in the valid policy tree. 



    Returns: the depth of this node (0 for the root node, 1 for its children, and so on) 

*java.security.cert.PolicyNode.getExpectedPolicies()*

public |java.util.Set|<String> getExpectedPolicies()

Returns the set of expected policies that would satisfy this node's valid 
policy in the next certificate to be processed. 



    Returns: an immutable {@code Set} of expected policy {@code String} OIDs. For the root 
             node, this method always returns a {@code Set} with one element, 
             the special anyPolicy OID: "2.5.29.32.0". 

*java.security.cert.PolicyNode.getParent()*

public |java.security.cert.PolicyNode| getParent()

Returns the parent of this node, ornullif this is the root node. 



    Returns: the parent of this node, or {@code null} if this is the root node 

*java.security.cert.PolicyNode.getPolicyQualifiers()*

public |java.util.Set|<? extends java.security.cert.PolicyQualifierInfo> getPolicyQualifiers()

Returns the set of policy qualifiers associated with the valid policy 
represented by this node. 



    Returns: an immutable {@code Set} of {@code PolicyQualifierInfo}s. For the root node, 
             this is always an empty {@code Set}. 

*java.security.cert.PolicyNode.getValidPolicy()*

public |java.lang.String| getValidPolicy()

Returns the valid policy represented by this node. 



    Returns: the {@code String} OID of the valid policy represented by this node. For the 
             root node, this method always returns the special anyPolicy OID: 
             "2.5.29.32.0". 

*java.security.cert.PolicyNode.isCritical()*

public boolean isCritical()

Returns the criticality indicator of the certificate policy extension in the 
most recently processed certificate. 



    Returns: {@code true} if extension marked critical, {@code false} otherwise. For the 
             root node, {@code false} is always returned. 


