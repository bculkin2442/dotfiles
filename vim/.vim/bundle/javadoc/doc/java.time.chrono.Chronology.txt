*java.time.chrono.Chronology* *Chronology* A calendar system, used to organize a

public interface interface Chronology

  implements |java.lang.Comparable|

|java.time.chrono.Chronology_Description|
|java.time.chrono.Chronology_Fields|
|java.time.chrono.Chronology_Constructors|
|java.time.chrono.Chronology_Methods|

================================================================================

*java.time.chrono.Chronology_Methods*
|java.time.chrono.Chronology.compareTo(Chronology)|Compares this chronology to 
|java.time.chrono.Chronology.date(Era,int,int,int)|Obtains a local date in this
|java.time.chrono.Chronology.date(int,int,int)|Obtains a local date in this chr
|java.time.chrono.Chronology.date(TemporalAccessor)|Obtains a local date in thi
|java.time.chrono.Chronology.dateEpochDay(long)|Obtains a local date in this ch
|java.time.chrono.Chronology.dateNow()|Obtains the current local date in this c
|java.time.chrono.Chronology.dateNow(Clock)|Obtains the current local date in t
|java.time.chrono.Chronology.dateNow(ZoneId)|Obtains the current local date in 
|java.time.chrono.Chronology.dateYearDay(Era,int,int)|Obtains a local date in t
|java.time.chrono.Chronology.dateYearDay(int,int)|Obtains a local date in this 
|java.time.chrono.Chronology.equals(Object)|Checks if this chronology is equal 
|java.time.chrono.Chronology.eraOf(int)|Creates the chronology era object from 
|java.time.chrono.Chronology.eras()|Gets the list of eras for the chronology.
|java.time.chrono.Chronology.from(TemporalAccessor)|Obtains an instance ofChron
|java.time.chrono.Chronology.getAvailableChronologies()|Returns the available c
|java.time.chrono.Chronology.getCalendarType()|Gets the calendar type of the ca
|java.time.chrono.Chronology.getDisplayName(TextStyle,Locale)|Gets the textual 
|java.time.chrono.Chronology.getId()|Gets the ID of the chronology.
|java.time.chrono.Chronology.hashCode()|A hash code for this chronology.
|java.time.chrono.Chronology.isLeapYear(long)|Checks if the specified year is a
|java.time.chrono.Chronology.localDateTime(TemporalAccessor)|Obtains a local da
|java.time.chrono.Chronology.of(String)|Obtains an instance ofChronologyfrom a 
|java.time.chrono.Chronology.ofLocale(Locale)|Obtains an instance ofChronologyf
|java.time.chrono.Chronology.period(int,int,int)|Obtains a period for this chro
|java.time.chrono.Chronology.prolepticYear(Era,int)|Calculates the proleptic-ye
|java.time.chrono.Chronology.range(ChronoField)|Gets the range of valid values 
|java.time.chrono.Chronology.resolveDate(Map<TemporalField,Long>,ResolverStyle)|
|java.time.chrono.Chronology.toString()|Outputs this chronology as aString.
|java.time.chrono.Chronology.zonedDateTime(Instant,ZoneId)|Obtains aChronoZoned
|java.time.chrono.Chronology.zonedDateTime(TemporalAccessor)|Obtains aChronoZon

*java.time.chrono.Chronology_Description*

A calendar system, used to organize and identify dates. 

The main date and time API is built on the ISO calendar system. The chronology 
operates behind the scenes to represent the general concept of a calendar 
system. For example, the Japanese, Minguo, Thai Buddhist and others. 

Most other calendar systems also operate on the shared concepts of year, month 
and day, linked to the cycles of the Earth around the Sun, and the Moon around 
the Earth. These shared concepts are defined by 
(|java.time.temporal.ChronoField|) and are available for use by 
anyChronologyimplementation: 

LocalDate isoDate = ... ThaiBuddhistDate thaiDate = ... int isoYear = 
isoDate.get(ChronoField.YEAR); int thaiYear = thaiDate.get(ChronoField.YEAR); 

As shown, although the date objects are in different calendar systems, 
represented by differentChronologyinstances, both can be queried using the same 
constant onChronoField. For a full discussion of the implications of this, see 
(|java.time.chrono.ChronoLocalDate|) . In general, the advice is to use the 
known ISO-basedLocalDate, rather thanChronoLocalDate. 

While aChronologyobject typically usesChronoFieldand is based on an era, 
year-of-era, month-of-year, day-of-month model of a date, this is not required. 
AChronologyinstance may represent a totally different kind of calendar system, 
such as the Mayan. 

In practical terms, theChronologyinstance also acts as a factory. The 
(|java.time.chrono.Chronology|) method allows an instance to be looked up by 
identifier, while the (|java.time.chrono.Chronology|) method allows lookup by 
locale. 

TheChronologyinstance provides a set of methods to 
createChronoLocalDateinstances. The date classes are used to manipulate 
specific dates. 

dateNow()(|java.time.chrono.Chronology|) 
dateNow(clock)(|java.time.chrono.Chronology|) 
dateNow(zone)(|java.time.chrono.Chronology|) date(yearProleptic, month, 
day)(|java.time.chrono.Chronology|) date(era, yearOfEra, month, 
day)(|java.time.chrono.Chronology|) dateYearDay(yearProleptic, 
dayOfYear)(|java.time.chrono.Chronology|) dateYearDay(era, yearOfEra, 
dayOfYear)(|java.time.chrono.Chronology|) 
date(TemporalAccessor)(|java.time.chrono.Chronology|) 

Adding New Calendars The set of available chronologies can be extended by 
applications. Adding a new calendar system requires the writing of an 
implementation ofChronology,ChronoLocalDateandEra. The majority of the logic 
specific to the calendar system will be inChronoLocalDate. 
TheChronologysubclass acts as a factory. 

To permit the discovery of additional chronologies, the 
ServiceLoader(|java.util.ServiceLoader|) is used. A file must be added to 
theMETA-INF/servicesdirectory with the name 'java.time.chrono.Chronology' 
listing the implementation classes. See the ServiceLoader for more details on 
service loading. For lookup by id or calendarType, the system provided 
calendars are found first followed by application provided calendars. 

Each chronology must define a chronology ID that is unique within the system. 
If the chronology represents a calendar system defined by the CLDR 
specification then the calendar type is the concatenation of the CLDR type and, 
if applicable, the CLDR variant, 



*java.time.chrono.Chronology.compareTo(Chronology)*

public int compareTo(java.time.chrono.Chronology other)

Compares this chronology to another chronology. 

The comparison order first by the chronology ID string, then by any additional 
information specific to the subclass. It is "consistent with equals", as 
defined by (|java.lang.Comparable|) . 


    other - the other chronology to compare to, not null 

    Returns: the comparator value, negative if less, positive if greater 

*java.time.chrono.Chronology.date(Era,int,int,int)*

public |java.time.chrono.ChronoLocalDate| date(
  java.time.chrono.Era era,
  int yearOfEra,
  int month,
  int dayOfMonth)

Obtains a local date in this chronology from the era, year-of-era, 
month-of-year and day-of-month fields. 


    era - the era of the correct type for the chronology, not null 
    yearOfEra - the chronology year-of-era 
    month - the chronology month-of-year 
    dayOfMonth - the chronology day-of-month 

    Returns: the local date in this chronology, not null 

*java.time.chrono.Chronology.date(int,int,int)*

public |java.time.chrono.ChronoLocalDate| date(
  int prolepticYear,
  int month,
  int dayOfMonth)

Obtains a local date in this chronology from the proleptic-year, month-of-year 
and day-of-month fields. 


    prolepticYear - the chronology proleptic-year 
    month - the chronology month-of-year 
    dayOfMonth - the chronology day-of-month 

    Returns: the local date in this chronology, not null 

*java.time.chrono.Chronology.date(TemporalAccessor)*

public |java.time.chrono.ChronoLocalDate| date(java.time.temporal.TemporalAccessor temporal)

Obtains a local date in this chronology from another temporal object. 

This obtains a date in this chronology based on the specified temporal. 
ATemporalAccessorrepresents an arbitrary set of date and time information, 
which this factory converts to an instance ofChronoLocalDate. 

The conversion typically uses the EPOCH_DAY(|java.time.temporal.ChronoField|) 
field, which is standardized across calendar systems. 

This method matches the signature of the functional interface 
(|java.time.temporal.TemporalQuery|) allowing it to be used as a query via 
method reference,aChronology::date. 


    temporal - the temporal object to convert, not null 

    Returns: the local date in this chronology, not null 

*java.time.chrono.Chronology.dateEpochDay(long)*

public |java.time.chrono.ChronoLocalDate| dateEpochDay(long epochDay)

Obtains a local date in this chronology from the epoch-day. 

The definition of EPOCH_DAY(|java.time.temporal.ChronoField|) is the same for 
all calendar systems, thus it can be used for conversion. 


    epochDay - the epoch day 

    Returns: the local date in this chronology, not null 

*java.time.chrono.Chronology.dateNow()*

public |java.time.chrono.ChronoLocalDate| dateNow()

Obtains the current local date in this chronology from the system clock in the 
default time-zone. 

This will query the system clock(|java.time.Clock|) in the default time-zone to 
obtain the current date. 

Using this method will prevent the ability to use an alternate clock for 
testing because the clock is hard-coded. 



    Returns: the current local date using the system clock and default time-zone, not null 

*java.time.chrono.Chronology.dateNow(Clock)*

public |java.time.chrono.ChronoLocalDate| dateNow(java.time.Clock clock)

Obtains the current local date in this chronology from the specified clock. 

This will query the specified clock to obtain the current date - today. Using 
this method allows the use of an alternate clock for testing. The alternate 
clock may be introduced using dependency injection(|java.time.Clock|) . 


    clock - the clock to use, not null 

    Returns: the current local date, not null 

*java.time.chrono.Chronology.dateNow(ZoneId)*

public |java.time.chrono.ChronoLocalDate| dateNow(java.time.ZoneId zone)

Obtains the current local date in this chronology from the system clock in the 
specified time-zone. 

This will query the system clock(|java.time.Clock|) to obtain the current date. 
Specifying the time-zone avoids dependence on the default time-zone. 

Using this method will prevent the ability to use an alternate clock for 
testing because the clock is hard-coded. 


    zone - the zone ID to use, not null 

    Returns: the current local date using the system clock, not null 

*java.time.chrono.Chronology.dateYearDay(Era,int,int)*

public |java.time.chrono.ChronoLocalDate| dateYearDay(
  java.time.chrono.Era era,
  int yearOfEra,
  int dayOfYear)

Obtains a local date in this chronology from the era, year-of-era and 
day-of-year fields. 


    era - the era of the correct type for the chronology, not null 
    yearOfEra - the chronology year-of-era 
    dayOfYear - the chronology day-of-year 

    Returns: the local date in this chronology, not null 

*java.time.chrono.Chronology.dateYearDay(int,int)*

public |java.time.chrono.ChronoLocalDate| dateYearDay(
  int prolepticYear,
  int dayOfYear)

Obtains a local date in this chronology from the proleptic-year and day-of-year 
fields. 


    prolepticYear - the chronology proleptic-year 
    dayOfYear - the chronology day-of-year 

    Returns: the local date in this chronology, not null 

*java.time.chrono.Chronology.equals(Object)*

public boolean equals(java.lang.Object obj)

Checks if this chronology is equal to another chronology. 

The comparison is based on the entire state of the object. 


    obj - the object to check, null returns false 

    Returns: true if this is equal to the other chronology 

*java.time.chrono.Chronology.eraOf(int)*

public |java.time.chrono.Era| eraOf(int eraValue)

Creates the chronology era object from the numeric value. 

The era is, conceptually, the largest division of the time-line. Most calendar 
systems have a single epoch dividing the time-line into two eras. However, some 
have multiple eras, such as one for the reign of each leader. The exact meaning 
is determined by the chronology according to the following constraints. 

The era in use at 1970-01-01 must have the value 1. Later eras must have 
sequentially higher values. Earlier eras must have sequentially lower values. 
Each chronology must refer to an enum or similar singleton to provide the era 
values. 

This method returns the singleton era of the correct type for the specified era 
value. 


    eraValue - the era value 

    Returns: the calendar system era, not null 

*java.time.chrono.Chronology.eras()*

public |java.util.List|<Era> eras()

Gets the list of eras for the chronology. 

Most calendar systems have an era, within which the year has meaning. If the 
calendar system does not support the concept of eras, an empty list must be 
returned. 



    Returns: the list of eras for the chronology, may be immutable, not null 

*java.time.chrono.Chronology.from(TemporalAccessor)*

public static |java.time.chrono.Chronology| from(java.time.temporal.TemporalAccessor temporal)

Obtains an instance ofChronologyfrom a temporal object. 

This obtains a chronology based on the specified temporal. 
ATemporalAccessorrepresents an arbitrary set of date and time information, 
which this factory converts to an instance ofChronology. 

The conversion will obtain the chronology using 
(|java.time.temporal.TemporalQueries|) . If the specified temporal object does 
not have a chronology, (|java.time.chrono.IsoChronology|) is returned. 

This method matches the signature of the functional interface 
(|java.time.temporal.TemporalQuery|) allowing it to be used in queries via 
method reference,Chronology::from. 


    temporal - the temporal to convert, not null 

    Returns: the chronology, not null 

*java.time.chrono.Chronology.getAvailableChronologies()*

public static |java.util.Set|<Chronology> getAvailableChronologies()

Returns the available chronologies. 

Each returnedChronologyis available for use in the system. The set of 
chronologies includes the system chronologies and any chronologies provided by 
the application via ServiceLoader configuration. 



    Returns: the independent, modifiable set of the available chronology IDs, not null 

*java.time.chrono.Chronology.getCalendarType()*

public |java.lang.String| getCalendarType()

Gets the calendar type of the calendar system. 

The calendar type is an identifier defined by the CLDR and Unicode Locale Data 
Markup Language (LDML) specifications to uniquely identification a calendar. 
ThegetCalendarTypeis the concatenation of the CLDR calendar type and the 
variant, if applicable, is appended separated by "-". The calendar type is used 
to lookup theChronologyusing (|java.time.chrono.Chronology|) . 



    Returns: the calendar system type, null if the calendar is not defined by CLDR/LDML 

*java.time.chrono.Chronology.getDisplayName(TextStyle,Locale)*

public |java.lang.String| getDisplayName(
  java.time.format.TextStyle style,
  java.util.Locale locale)

Gets the textual representation of this chronology. 

This returns the textual name used to identify the chronology, suitable for 
presentation to the user. The parameters control the style of the returned text 
and the locale. 


    style - the style of the text required, not null 
    locale - the locale to use, not null 

    Returns: the text value of the chronology, not null 

*java.time.chrono.Chronology.getId()*

public |java.lang.String| getId()

Gets the ID of the chronology. 

The ID uniquely identifies theChronology. It can be used to lookup 
theChronologyusing (|java.time.chrono.Chronology|) . 



    Returns: the chronology ID, not null 

*java.time.chrono.Chronology.hashCode()*

public int hashCode()

A hash code for this chronology. 

The hash code should be based on the entire state of the object. 



    Returns: a suitable hash code 

*java.time.chrono.Chronology.isLeapYear(long)*

public boolean isLeapYear(long prolepticYear)

Checks if the specified year is a leap year. 

A leap-year is a year of a longer length than normal. The exact meaning is 
determined by the chronology according to the following constraints. 

a leap-year must imply a year-length longer than a non leap-year. a chronology 
that does not support the concept of a year must return false. 


    prolepticYear - the proleptic-year to check, not validated for range 

    Returns: true if the year is a leap year 

*java.time.chrono.Chronology.localDateTime(TemporalAccessor)*

public |java.time.chrono.ChronoLocalDateTime|<? extends java.time.chrono.ChronoLocalDate> localDateTime(java.time.temporal.TemporalAccessor temporal)

Obtains a local date-time in this chronology from another temporal object. 

This obtains a date-time in this chronology based on the specified temporal. 
ATemporalAccessorrepresents an arbitrary set of date and time information, 
which this factory converts to an instance ofChronoLocalDateTime. 

The conversion extracts and combines theChronoLocalDateand theLocalTimefrom the 
temporal object. Implementations are permitted to perform optimizations such as 
accessing those fields that are equivalent to the relevant objects. The result 
uses this chronology. 

This method matches the signature of the functional interface 
(|java.time.temporal.TemporalQuery|) allowing it to be used as a query via 
method reference,aChronology::localDateTime. 


    temporal - the temporal object to convert, not null 

    Returns: the local date-time in this chronology, not null 

*java.time.chrono.Chronology.of(String)*

public static |java.time.chrono.Chronology| of(java.lang.String id)

Obtains an instance ofChronologyfrom a chronology ID or calendar system type. 

This returns a chronology based on either the ID or the type. The chronology 
ID(|java.time.chrono.Chronology|) uniquely identifies the chronology. The 
calendar system type(|java.time.chrono.Chronology|) is defined by the CLDR 
specification. 

The chronology may be a system chronology or a chronology provided by the 
application via ServiceLoader configuration. 

Since some calendars can be customized, the ID or type typically refers to the 
default customization. For example, the Gregorian calendar can have multiple 
cutover dates from the Julian, but the lookup only provides the default cutover 
date. 


    id - the chronology ID or calendar system type, not null 

    Returns: the chronology with the identifier requested, not null 

*java.time.chrono.Chronology.ofLocale(Locale)*

public static |java.time.chrono.Chronology| ofLocale(java.util.Locale locale)

Obtains an instance ofChronologyfrom a locale. 

This returns aChronologybased on the specified locale, typically 
returningIsoChronology. Other calendar systems are only returned if they are 
explicitly selected within the locale. 

The (|java.util.Locale|) class provide access to a range of information useful 
for localizing an application. This includes the language and region, such as 
"en-GB" for English as used in Great Britain. 

TheLocaleclass also supports an extension mechanism that can be used to 
identify a calendar system. The mechanism is a form of key-value pairs, where 
the calendar system has the key "ca". For example, the locale 
"en-JP-u-ca-japanese" represents the English language as used in Japan with the 
Japanese calendar system. 

This method finds the desired calendar system by in a manner equivalent to 
passing "ca" to (|java.util.Locale|) . If the "ca" key is not present, 
thenIsoChronologyis returned. 

Note that the behavior of this method differs from the older 
(|java.util.Calendar|) method. If that method receives a locale of "th_TH" it 
will returnBuddhistCalendar. By contrast, this method will returnIsoChronology. 
Passing the locale "th-TH-u-ca-buddhist" into either method will result in the 
Thai Buddhist calendar system and is therefore the recommended approach going 
forward for Thai calendar system localization. 

A similar, but simpler, situation occurs for the Japanese calendar system. The 
locale "jp_JP_JP" has previously been used to access the calendar. However, 
unlike the Thai locale, "ja_JP_JP" is automatically converted byLocaleto the 
modern and recommended form of "ja-JP-u-ca-japanese". Thus, there is no 
difference in behavior between this method andCalendar#getInstance(Locale). 


    locale - the locale to use to obtain the calendar system, not null 

    Returns: the calendar system associated with the locale, not null 

*java.time.chrono.Chronology.period(int,int,int)*

public |java.time.chrono.ChronoPeriod| period(
  int years,
  int months,
  int days)

Obtains a period for this chronology based on years, months and days. 

This returns a period tied to this chronology using the specified years, months 
and days. All supplied chronologies use periods based on years, months and 
days, however theChronoPeriodAPI allows the period to be represented using 
other units. 


    years - the number of years, may be negative 
    months - the number of years, may be negative 
    days - the number of years, may be negative 

    Returns: the period in terms of this chronology, not null 

*java.time.chrono.Chronology.prolepticYear(Era,int)*

public int prolepticYear(
  java.time.chrono.Era era,
  int yearOfEra)

Calculates the proleptic-year given the era and year-of-era. 

This combines the era and year-of-era into the single proleptic-year field. 

If the chronology makes active use of eras, such asJapaneseChronologythen the 
year-of-era will be validated against the era. For other chronologies, 
validation is optional. 


    era - the era of the correct type for the chronology, not null 
    yearOfEra - the chronology year-of-era 

    Returns: the proleptic-year 

*java.time.chrono.Chronology.range(ChronoField)*

public |java.time.temporal.ValueRange| range(java.time.temporal.ChronoField field)

Gets the range of valid values for the specified field. 

All fields can be expressed as alonginteger. This method returns an object that 
describes the valid range for that value. 

Note that the result only describes the minimum and maximum valid values and it 
is important not to read too much into them. For example, there could be values 
within the range that are invalid for the field. 

This method will return a result whether or not the chronology supports the 
field. 


    field - the field to get the range for, not null 

    Returns: the range of valid values for the field, not null 

*java.time.chrono.Chronology.resolveDate(Map<TemporalField,Long>,ResolverStyle)*

public |java.time.chrono.ChronoLocalDate| resolveDate(
  java.util.Map<java.time.temporal.TemporalField, java.lang.Long> fieldValues,
  java.time.format.ResolverStyle resolverStyle)

Resolves parsedChronoFieldvalues into a date during parsing. 

MostTemporalFieldimplementations are resolved using the resolve method on the 
field. By contrast, theChronoFieldclass defines fields that only have meaning 
relative to the chronology. As such,ChronoFielddate fields are resolved here in 
the context of a specific chronology. 

The default implementation, which explains typical resolve behaviour, is 
provided in (|java.time.chrono.AbstractChronology|) . 


    fieldValues - the map of fields to values, which can be updated, not null 
    resolverStyle - the requested type of resolve, not null 

    Returns: the resolved date, null if insufficient information to create a date 

*java.time.chrono.Chronology.toString()*

public |java.lang.String| toString()

Outputs this chronology as aString. 

The format should include the entire state of the object. 



    Returns: a string representation of this chronology, not null 

*java.time.chrono.Chronology.zonedDateTime(Instant,ZoneId)*

public |java.time.chrono.ChronoZonedDateTime|<? extends java.time.chrono.ChronoLocalDate> zonedDateTime(
  java.time.Instant instant,
  java.time.ZoneId zone)

Obtains aChronoZonedDateTimein this chronology from anInstant. 

This obtains a zoned date-time with the same instant as that specified. 


    instant - the instant to create the date-time from, not null 
    zone - the time-zone, not null 

    Returns: the zoned date-time, not null 

*java.time.chrono.Chronology.zonedDateTime(TemporalAccessor)*

public |java.time.chrono.ChronoZonedDateTime|<? extends java.time.chrono.ChronoLocalDate> zonedDateTime(java.time.temporal.TemporalAccessor temporal)

Obtains aChronoZonedDateTimein this chronology from another temporal object. 

This obtains a zoned date-time in this chronology based on the specified 
temporal. ATemporalAccessorrepresents an arbitrary set of date and time 
information, which this factory converts to an instance ofChronoZonedDateTime. 

The conversion will first obtain aZoneIdfrom the temporal object, falling back 
to aZoneOffsetif necessary. It will then try to obtain anInstant, falling back 
to aChronoLocalDateTimeif necessary. The result will be either the combination 
ofZoneIdorZoneOffsetwithInstantorChronoLocalDateTime. Implementations are 
permitted to perform optimizations such as accessing those fields that are 
equivalent to the relevant objects. The result uses this chronology. 

This method matches the signature of the functional interface 
(|java.time.temporal.TemporalQuery|) allowing it to be used as a query via 
method reference,aChronology::zonedDateTime. 


    temporal - the temporal object to convert, not null 

    Returns: the zoned date-time in this chronology, not null 


