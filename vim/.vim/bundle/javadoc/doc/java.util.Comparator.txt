*java.util.Comparator* *Comparator* A comparison function, which imposes a total

public interface interface Comparator<T>


|java.util.Comparator_Description|
|java.util.Comparator_Fields|
|java.util.Comparator_Constructors|
|java.util.Comparator_Methods|

================================================================================

*java.util.Comparator_Methods*
|java.util.Comparator.compare(T,T)|Compares its two arguments for order.
|java.util.Comparator.comparing(Function<?superT,?extendsU>)|Accepts a function
|java.util.Comparator.comparing(Function<?superT,?extendsU>,Comparator<?superU>)|
|java.util.Comparator.comparingDouble(ToDoubleFunction<?superT>)|Accepts a func
|java.util.Comparator.comparingInt(ToIntFunction<?superT>)|Accepts a function t
|java.util.Comparator.comparingLong(ToLongFunction<?superT>)|Accepts a function
|java.util.Comparator.equals(Object)|Indicates whether some other object is equ
|java.util.Comparator.naturalOrder()|Returns a comparator that comparesComparab
|java.util.Comparator.nullsFirst(Comparator<?superT>)|Returns a null-friendly c
|java.util.Comparator.nullsLast(Comparator<?superT>)|Returns a null-friendly co
|java.util.Comparator.reversed()|Returns a comparator that imposes the reverse 
|java.util.Comparator.reverseOrder()|Returns a comparator that imposes the reve
|java.util.Comparator.thenComparing(Comparator<?superT>)|Returns a lexicographi
|java.util.Comparator.thenComparing(Function<?superT,?extendsU>)|Returns a lexi
|java.util.Comparator.thenComparing(Function<?superT,?extendsU>,Comparator<?superU>)|
|java.util.Comparator.thenComparingDouble(ToDoubleFunction<?superT>)|Returns a 
|java.util.Comparator.thenComparingInt(ToIntFunction<?superT>)|Returns a lexico
|java.util.Comparator.thenComparingLong(ToLongFunction<?superT>)|Returns a lexi

*java.util.Comparator_Description*

A comparison function, which imposes a total ordering on some collection of 
objects. Comparators can be passed to a sort method (such as 
Collections.sort(|java.util.Collections|) or Arrays.sort(|java.util.Arrays|) ) 
to allow precise control over the sort order. Comparators can also be used to 
control the order of certain data structures (such as sorted 
sets(|java.util.SortedSet|) or sorted maps(|java.util.SortedMap|) ), or to 
provide an ordering for collections of objects that don't have a natural 
ordering(|java.lang.Comparable|) . 

The ordering imposed by a comparator c on a set of elements S is said to be 
consistent with equals if and only if c.compare(e1, e2)==0 has the same boolean 
value as e1.equals(e2) for every e1 and e2 in S. 

Caution should be exercised when using a comparator capable of imposing an 
ordering inconsistent with equals to order a sorted set (or sorted map). 
Suppose a sorted set (or sorted map) with an explicit comparator c is used with 
elements (or keys) drawn from a set S. If the ordering imposed by c on S is 
inconsistent with equals, the sorted set (or sorted map) will behave 
"strangely." In particular the sorted set (or sorted map) will violate the 
general contract for set (or map), which is defined in terms of equals. 

For example, suppose one adds two elementsaandbsuch that(a.equals(b) 
c.compare(a, b) != 0)to an emptyTreeSetwith comparatorc. The secondaddoperation 
will return true (and the size of the tree set will increase) becauseaandbare 
not equivalent from the tree set's perspective, even though this is contrary to 
the specification of the Set.add(|java.util.Set|) method. 

Note: It is generally a good idea for comparators to also implement 
java.io.Serializable, as they may be used as ordering methods in serializable 
data structures (like (|java.util.TreeSet|) , (|java.util.TreeMap|) ). In order 
for the data structure to serialize successfully, the comparator (if provided) 
must implement Serializable. 

For the mathematically inclined, the relation that defines the imposed ordering 
that a given comparator c imposes on a given set of objects S is: 

{(x, y) such that c.compare(x, y) <= 0}. 

The quotient for this total order is: 

{(x, y) such that c.compare(x, y) == 0}. 

It follows immediately from the contract for compare that the quotient is an 
equivalence relation on S, and that the imposed ordering is a total order on S. 
When we say that the ordering imposed by c on S is consistent with equals, we 
mean that the quotient for the ordering is the equivalence relation defined by 
the objects' equals(Object)(|java.lang.Object|) method(s): 

{(x, y) such that x.equals(y)}. 

UnlikeComparable, a comparator may optionally permit comparison of null 
arguments, while maintaining the requirements for an equivalence relation. 

This interface is a member of the <a 
href="/../technotes/guides/collections/index.html"> Java Collections Framework. 



*java.util.Comparator.compare(T,T)*

public int compare(
  T o1,
  T o2)

Compares its two arguments for order. Returns a negative integer, zero, or a 
positive integer as the first argument is less than, equal to, or greater than 
the second. 

In the foregoing description, the notation sgn(expression) designates the 
mathematical signum function, which is defined to return one of -1, 0, or 1 
according to whether the value of expression is negative, zero or positive. 

The implementor must ensure that sgn(compare(x, y)) == -sgn(compare(y, x)) for 
all x and y. (This implies that compare(x, y) must throw an exception if and 
only if compare(y, x) throws an exception.) 

The implementor must also ensure that the relation is transitive: ((compare(x, 
y)>0) and and (compare(y, z)>0)) implies compare(x, z)>0. 

Finally, the implementor must ensure that compare(x, y)==0 implies that 
sgn(compare(x, z))==sgn(compare(y, z)) for all z. 

It is generally the case, but not strictly required that (compare(x, y)==0) == 
(x.equals(y)). Generally speaking, any comparator that violates this condition 
should clearly indicate this fact. The recommended language is "Note: this 
comparator imposes orderings that are inconsistent with equals." 


    o1 - the first object to be compared. 
    o2 - the second object to be compared. 

    Returns: a negative integer, zero, or a positive integer as the first argument is less 
             than, equal to, or greater than the second. 

*java.util.Comparator.comparing(Function<?superT,?extendsU>)*

public static |java.util.Comparator|<T> comparing(java.util.function.Function<? super T, ? extends U> keyExtractor)

Accepts a function that extracts a Comparable(|java.lang.Comparable|) sort key 
from a typeT, and returns aComparatorthat compares by that sort key. 

The returned comparator is serializable if the specified function is also 
serializable. 


    keyExtractor - the function used to extract the {@link Comparable} sort key 

    Returns: a comparator that compares by an extracted key 

*java.util.Comparator.comparing(Function<?superT,?extendsU>,Comparator<?superU>)*

public static |java.util.Comparator|<T> comparing(
  java.util.function.Function<? super T, ? extends U> keyExtractor,
  java.util.Comparator<? super U> keyComparator)

Accepts a function that extracts a sort key from a typeT, and returns 
aComparatorthat compares by that sort key using the specified 
(|java.util.Comparator|) . 

The returned comparator is serializable if the specified function and 
comparator are both serializable. 


    keyExtractor - the function used to extract the sort key 
    keyComparator - the {@code Comparator} used to compare the sort key 

    Returns: a comparator that compares by an extracted key using the specified {@code 
             Comparator} 

*java.util.Comparator.comparingDouble(ToDoubleFunction<?superT>)*

public static |java.util.Comparator|<T> comparingDouble(java.util.function.ToDoubleFunction<? super T> keyExtractor)

Accepts a function that extracts adoublesort key from a typeT, and returns 
aComparatorthat compares by that sort key. 

The returned comparator is serializable if the specified function is also 
serializable. 


    keyExtractor - the function used to extract the double sort key 

    Returns: a comparator that compares by an extracted key 

*java.util.Comparator.comparingInt(ToIntFunction<?superT>)*

public static |java.util.Comparator|<T> comparingInt(java.util.function.ToIntFunction<? super T> keyExtractor)

Accepts a function that extracts anintsort key from a typeT, and returns 
aComparatorthat compares by that sort key. 

The returned comparator is serializable if the specified function is also 
serializable. 


    keyExtractor - the function used to extract the integer sort key 

    Returns: a comparator that compares by an extracted key 

*java.util.Comparator.comparingLong(ToLongFunction<?superT>)*

public static |java.util.Comparator|<T> comparingLong(java.util.function.ToLongFunction<? super T> keyExtractor)

Accepts a function that extracts alongsort key from a typeT, and returns 
aComparatorthat compares by that sort key. 

The returned comparator is serializable if the specified function is also 
serializable. 


    keyExtractor - the function used to extract the long sort key 

    Returns: a comparator that compares by an extracted key 

*java.util.Comparator.equals(Object)*

public boolean equals(java.lang.Object obj)

Indicates whether some other object is equal to this comparator. This method 
must obey the general contract of (|java.lang.Object|) . Additionally, this 
method can return true only if the specified object is also a comparator and it 
imposes the same ordering as this comparator. Thus, comp1.equals(comp2) implies 
that sgn(comp1.compare(o1, o2))==sgn(comp2.compare(o1, o2)) for every object 
reference o1 and o2. 

Note that it is always safe not to override Object.equals(Object). However, 
overriding this method may, in some cases, improve performance by allowing 
programs to determine that two distinct comparators impose the same order. 


    obj - the reference object with which to compare. 

    Returns: true only if the specified object is also a comparator and it imposes the same 
             ordering as this comparator. 

*java.util.Comparator.naturalOrder()*

public static |java.util.Comparator|<T extends java.lang.Comparable<? super T>> naturalOrder()

Returns a comparator that compares (|java.lang.Comparable|) objects in natural 
order. 

The returned comparator is serializable and throws 
(|java.lang.NullPointerException|) when comparingnull. 



    Returns: a comparator that imposes the natural ordering on {@code Comparable} objects. 

*java.util.Comparator.nullsFirst(Comparator<?superT>)*

public static |java.util.Comparator|<T> nullsFirst(java.util.Comparator<? super T> comparator)

Returns a null-friendly comparator that considersnullto be less than non-null. 
When both arenull, they are considered equal. If both are non-null, the 
specifiedComparatoris used to determine the order. If the specified comparator 
isnull, then the returned comparator considers all non-null values to be equal. 

The returned comparator is serializable if the specified comparator is 
serializable. 


    comparator - a {@code Comparator} for comparing non-null values 

    Returns: a comparator that considers {@code null} to be less than non-null, and compares 
             non-null objects with the supplied {@code Comparator}. 

*java.util.Comparator.nullsLast(Comparator<?superT>)*

public static |java.util.Comparator|<T> nullsLast(java.util.Comparator<? super T> comparator)

Returns a null-friendly comparator that considersnullto be greater than 
non-null. When both arenull, they are considered equal. If both are non-null, 
the specifiedComparatoris used to determine the order. If the specified 
comparator isnull, then the returned comparator considers all non-null values 
to be equal. 

The returned comparator is serializable if the specified comparator is 
serializable. 


    comparator - a {@code Comparator} for comparing non-null values 

    Returns: a comparator that considers {@code null} to be greater than non-null, and 
             compares non-null objects with the supplied {@code Comparator}. 

*java.util.Comparator.reversed()*

public |java.util.Comparator|<T> reversed()

Returns a comparator that imposes the reverse ordering of this comparator. 



    Returns: a comparator that imposes the reverse ordering of this comparator. 

*java.util.Comparator.reverseOrder()*

public static |java.util.Comparator|<T extends java.lang.Comparable<? super T>> reverseOrder()

Returns a comparator that imposes the reverse of the natural ordering. 

The returned comparator is serializable and throws 
(|java.lang.NullPointerException|) when comparingnull. 



    Returns: a comparator that imposes the reverse of the natural ordering on {@code 
             Comparable} objects. 

*java.util.Comparator.thenComparing(Comparator<?superT>)*

public |java.util.Comparator|<T> thenComparing(java.util.Comparator<? super T> other)

Returns a lexicographic-order comparator with another comparator. If 
thisComparatorconsiders two elements equal, i.e.compare(a, b) == 0,otheris used 
to determine the order. 

The returned comparator is serializable if the specified comparator is also 
serializable. 


    other - the other comparator to be used when this comparator compares two objects that 
       are equal. 

    Returns: a lexicographic-order comparator composed of this and then the other comparator 

*java.util.Comparator.thenComparing(Function<?superT,?extendsU>)*

public |java.util.Comparator|<T> thenComparing(java.util.function.Function<? super T, ? extends U> keyExtractor)

Returns a lexicographic-order comparator with a function that extracts 
aComparablesort key. 


    keyExtractor - the function used to extract the {@link Comparable} sort key 

    Returns: a lexicographic-order comparator composed of this and then the {@link 
             Comparable} sort key. 

*java.util.Comparator.thenComparing(Function<?superT,?extendsU>,Comparator<?superU>)*

public |java.util.Comparator|<T> thenComparing(
  java.util.function.Function<? super T, ? extends U> keyExtractor,
  java.util.Comparator<? super U> keyComparator)

Returns a lexicographic-order comparator with a function that extracts a key to 
be compared with the givenComparator. 


    keyExtractor - the function used to extract the sort key 
    keyComparator - the {@code Comparator} used to compare the sort key 

    Returns: a lexicographic-order comparator composed of this comparator and then comparing 
             on the key extracted by the keyExtractor function 

*java.util.Comparator.thenComparingDouble(ToDoubleFunction<?superT>)*

public |java.util.Comparator|<T> thenComparingDouble(java.util.function.ToDoubleFunction<? super T> keyExtractor)

Returns a lexicographic-order comparator with a function that extracts 
adoublesort key. 


    keyExtractor - the function used to extract the double sort key 

    Returns: a lexicographic-order comparator composed of this and then the {@code double} 
             sort key 

*java.util.Comparator.thenComparingInt(ToIntFunction<?superT>)*

public |java.util.Comparator|<T> thenComparingInt(java.util.function.ToIntFunction<? super T> keyExtractor)

Returns a lexicographic-order comparator with a function that extracts aintsort 
key. 


    keyExtractor - the function used to extract the integer sort key 

    Returns: a lexicographic-order comparator composed of this and then the {@code int} sort 
             key 

*java.util.Comparator.thenComparingLong(ToLongFunction<?superT>)*

public |java.util.Comparator|<T> thenComparingLong(java.util.function.ToLongFunction<? super T> keyExtractor)

Returns a lexicographic-order comparator with a function that extracts 
alongsort key. 


    keyExtractor - the function used to extract the long sort key 

    Returns: a lexicographic-order comparator composed of this and then the {@code long} 
             sort key 


