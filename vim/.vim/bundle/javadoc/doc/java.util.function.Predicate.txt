*java.util.function.Predicate* *Predicate* Represents a predicate (boolean-value

public interface interface Predicate<T>


|java.util.function.Predicate_Description|
|java.util.function.Predicate_Fields|
|java.util.function.Predicate_Constructors|
|java.util.function.Predicate_Methods|

================================================================================

*java.util.function.Predicate_Methods*
|java.util.function.Predicate.and(Predicate<?superT>)|Returns a composed predic
|java.util.function.Predicate.isEqual(Object)|Returns a predicate that tests if
|java.util.function.Predicate.negate()|Returns a predicate that represents the 
|java.util.function.Predicate.or(Predicate<?superT>)|Returns a composed predica
|java.util.function.Predicate.test(T)|Evaluates this predicate on the given arg

*java.util.function.Predicate_Description*

Represents a predicate (boolean-valued function) of one argument. 

This is a functional interface whose functional method is 
(|java.util.function.Predicate|) . 



*java.util.function.Predicate.and(Predicate<?superT>)*

public |java.util.function.Predicate|<T> and(java.util.function.Predicate<? super T> other)

Returns a composed predicate that represents a short-circuiting logical AND of 
this predicate and another. When evaluating the composed predicate, if this 
predicate isfalse, then theotherpredicate is not evaluated. 

Any exceptions thrown during evaluation of either predicate are relayed to the 
caller; if evaluation of this predicate throws an exception, theotherpredicate 
will not be evaluated. 


    other - a predicate that will be logically-ANDed with this predicate 

    Returns: a composed predicate that represents the short-circuiting logical AND of this 
             predicate and the {@code other} predicate 

*java.util.function.Predicate.isEqual(Object)*

public static |java.util.function.Predicate|<T> isEqual(java.lang.Object targetRef)

Returns a predicate that tests if two arguments are equal according to 
(|java.util.Objects|) . 


    targetRef - the object reference with which to compare for equality, which may be {@code 
       null} 

    Returns: a predicate that tests if two arguments are equal according to {@link 
             Objects#equals(Object, Object)} 

*java.util.function.Predicate.negate()*

public |java.util.function.Predicate|<T> negate()

Returns a predicate that represents the logical negation of this predicate. 



    Returns: a predicate that represents the logical negation of this predicate 

*java.util.function.Predicate.or(Predicate<?superT>)*

public |java.util.function.Predicate|<T> or(java.util.function.Predicate<? super T> other)

Returns a composed predicate that represents a short-circuiting logical OR of 
this predicate and another. When evaluating the composed predicate, if this 
predicate istrue, then theotherpredicate is not evaluated. 

Any exceptions thrown during evaluation of either predicate are relayed to the 
caller; if evaluation of this predicate throws an exception, theotherpredicate 
will not be evaluated. 


    other - a predicate that will be logically-ORed with this predicate 

    Returns: a composed predicate that represents the short-circuiting logical OR of this 
             predicate and the {@code other} predicate 

*java.util.function.Predicate.test(T)*

public boolean test(T t)

Evaluates this predicate on the given argument. 


    t - the input argument 

    Returns: {@code true} if the input argument matches the predicate, otherwise {@code 
             false} 


