*java.security.cert.PKIXParameters* *PKIXParameters* Parameters used as input fo

public class PKIXParameters
  extends    |java.lang.Object|
  implements |java.security.cert.CertPathParameters|

|java.security.cert.PKIXParameters_Description|
|java.security.cert.PKIXParameters_Fields|
|java.security.cert.PKIXParameters_Constructors|
|java.security.cert.PKIXParameters_Methods|

================================================================================

*java.security.cert.PKIXParameters_Constructors*
|java.security.cert.PKIXParameters(KeyStore)|Creates an instance ofPKIXParamete
|java.security.cert.PKIXParameters(Set<TrustAnchor>)|Creates an instance ofPKIX

*java.security.cert.PKIXParameters_Methods*
|java.security.cert.PKIXParameters.addCertPathChecker(PKIXCertPathChecker)|Adds
|java.security.cert.PKIXParameters.addCertStore(CertStore)|Adds aCertStoreto th
|java.security.cert.PKIXParameters.clone()|Makes a copy of thisPKIXParametersob
|java.security.cert.PKIXParameters.getCertPathCheckers()|Returns theListof cert
|java.security.cert.PKIXParameters.getCertStores()|Returns an immutableListofCe
|java.security.cert.PKIXParameters.getDate()|Returns the time for which the val
|java.security.cert.PKIXParameters.getInitialPolicies()|Returns an immutableSet
|java.security.cert.PKIXParameters.getPolicyQualifiersRejected()|Gets the Polic
|java.security.cert.PKIXParameters.getSigProvider()|Returns the signature provi
|java.security.cert.PKIXParameters.getTargetCertConstraints()|Returns the requi
|java.security.cert.PKIXParameters.getTrustAnchors()|Returns an immutableSetof 
|java.security.cert.PKIXParameters.isAnyPolicyInhibited()|Checks whether the an
|java.security.cert.PKIXParameters.isExplicitPolicyRequired()|Checks if explici
|java.security.cert.PKIXParameters.isPolicyMappingInhibited()|Checks if policy 
|java.security.cert.PKIXParameters.isRevocationEnabled()|Checks the RevocationE
|java.security.cert.PKIXParameters.setAnyPolicyInhibited(boolean)|Sets state to
|java.security.cert.PKIXParameters.setCertPathCheckers(List<PKIXCertPathChecker>)|
|java.security.cert.PKIXParameters.setCertStores(List<CertStore>)|Sets the list
|java.security.cert.PKIXParameters.setDate(Date)|Sets the time for which the va
|java.security.cert.PKIXParameters.setExplicitPolicyRequired(boolean)|Sets the 
|java.security.cert.PKIXParameters.setInitialPolicies(Set<String>)|Sets theSeto
|java.security.cert.PKIXParameters.setPolicyMappingInhibited(boolean)|Sets the 
|java.security.cert.PKIXParameters.setPolicyQualifiersRejected(boolean)|Sets th
|java.security.cert.PKIXParameters.setRevocationEnabled(boolean)|Sets the Revoc
|java.security.cert.PKIXParameters.setSigProvider(String)|Sets the signature pr
|java.security.cert.PKIXParameters.setTargetCertConstraints(CertSelector)|Sets 
|java.security.cert.PKIXParameters.setTrustAnchors(Set<TrustAnchor>)|Sets theSe
|java.security.cert.PKIXParameters.toString()|Returns a formatted string descri

*java.security.cert.PKIXParameters_Description*

Parameters used as input for the PKIXCertPathValidatoralgorithm. 

A PKIXCertPathValidatoruses these parameters to validate aCertPathaccording to 
the PKIX certification path validation algorithm. 

To instantiate aPKIXParametersobject, an application must specify one or more 
most-trusted CAs as defined by the PKIX certification path validation 
algorithm. The most-trusted CAs can be specified using one of two constructors. 
An application can call 
PKIXParameters(Set)(|java.security.cert.PKIXParameters|) , specifying 
aSetofTrustAnchorobjects, each of which identify a most-trusted CA. 
Alternatively, an application can call 
PKIXParameters(KeyStore)(|java.security.cert.PKIXParameters|) , specifying 
aKeyStoreinstance containing trusted certificate entries, each of which will be 
considered as a most-trusted CA. 

Once aPKIXParametersobject has been created, other parameters can be specified 
(by calling setInitialPolicies(|java.security.cert.PKIXParameters|) or 
setDate(|java.security.cert.PKIXParameters|) , for instance) and then 
thePKIXParametersis passed along with theCertPathto be validated to 
CertPathValidator.validate(|java.security.cert.CertPathValidator|) . 

Any parameter that is not set (or is set tonull) will be set to the default 
value for that parameter. The default value for thedateparameter isnull, which 
indicates the current time when the path is validated. The default for the 
remaining parameters is the least constrained. 

Concurrent Access 

Unless otherwise specified, the methods defined in this class are not 
thread-safe. Multiple threads that need to access a single object concurrently 
should synchronize amongst themselves and provide the necessary locking. 
Multiple threads each manipulating separate objects need not synchronize. 



*java.security.cert.PKIXParameters(KeyStore)*

public PKIXParameters(java.security.KeyStore keystore)
  throws |java.security.InvalidAlgorithmParameterException|
         |java.security.KeyStoreException|
         
Creates an instance ofPKIXParametersthat populates the set of most-trusted CAs 
from the trusted certificate entries contained in the specifiedKeyStore. Only 
keystore entries that contain trustedX509Certificatesare considered; all other 
certificate types are ignored. 

    keystore - a {@code KeyStore} from which the set of most-trusted CAs will be populated 

*java.security.cert.PKIXParameters(Set<TrustAnchor>)*

public PKIXParameters(java.util.Set<java.security.cert.TrustAnchor> trustAnchors)
  throws |java.security.InvalidAlgorithmParameterException|
         
Creates an instance ofPKIXParameterswith the specifiedSetof most-trusted CAs. 
Each element of the set is a TrustAnchor(|java.security.cert.TrustAnchor|) . 

Note that theSetis copied to protect against subsequent modifications. 

    trustAnchors - a {@code Set} of {@code TrustAnchor}s 

*java.security.cert.PKIXParameters.addCertPathChecker(PKIXCertPathChecker)*

public void addCertPathChecker(java.security.cert.PKIXCertPathChecker checker)

Adds aPKIXCertPathCheckerto the list of certification path checkers. See the 
setCertPathCheckers(|java.security.cert.PKIXParameters|) method for more 
details. 

Note that thePKIXCertPathCheckeris cloned to protect against subsequent 
modifications. 


    checker - a {@code PKIXCertPathChecker} to add to the list of checks. If {@code null}, 
       the checker is ignored (not added to list). 

*java.security.cert.PKIXParameters.addCertStore(CertStore)*

public void addCertStore(java.security.cert.CertStore store)

Adds aCertStoreto the end of the list ofCertStores used in finding certificates 
and CRLs. 


    store - the {@code CertStore} to add. If {@code null}, the store is ignored (not added 
       to list). 

*java.security.cert.PKIXParameters.clone()*

public |java.lang.Object| clone()

Makes a copy of thisPKIXParametersobject. Changes to the copy will not affect 
the original and vice versa. 



    Returns: a copy of this {@code PKIXParameters} object 

*java.security.cert.PKIXParameters.getCertPathCheckers()*

public |java.util.List|<PKIXCertPathChecker> getCertPathCheckers()

Returns theListof certification path checkers. The returnedListis immutable, 
and eachPKIXCertPathCheckerin theListis cloned to protect against subsequent 
modifications. 



    Returns: an immutable {@code List} of {@code PKIXCertPathChecker}s (may be empty, but 
             not {@code null}) 

*java.security.cert.PKIXParameters.getCertStores()*

public |java.util.List|<CertStore> getCertStores()

Returns an immutableListofCertStores that are used to find certificates and 
CRLs. 



    Returns: an immutable {@code List} of {@code CertStore}s (may be empty, but never {@code 
             null}) 

*java.security.cert.PKIXParameters.getDate()*

public |java.util.Date| getDate()

Returns the time for which the validity of the certification path should be 
determined. Ifnull, the current time is used. 

Note that theDatereturned is copied to protect against subsequent 
modifications. 



    Returns: the {@code Date}, or {@code null} if not set 

*java.security.cert.PKIXParameters.getInitialPolicies()*

public |java.util.Set|<String> getInitialPolicies()

Returns an immutableSetof initial policy identifiers (OID strings), indicating 
that any one of these policies would be acceptable to the certificate user for 
the purposes of certification path processing. The default return value is an 
emptySet, which is interpreted as meaning that any policy would be acceptable. 



    Returns: an immutable {@code Set} of initial policy OIDs in {@code String} format, or an 
             empty {@code Set} (implying any policy is acceptable). Never 
             returns {@code null}. 

*java.security.cert.PKIXParameters.getPolicyQualifiersRejected()*

public boolean getPolicyQualifiersRejected()

Gets the PolicyQualifiersRejected flag. If this flag is true, certificates that 
include policy qualifiers in a certificate policies extension that is marked 
critical are rejected. If the flag is false, certificates are not rejected on 
this basis. 

When aPKIXParametersobject is created, this flag is set to true. This setting 
reflects the most common (and simplest) strategy for processing policy 
qualifiers. Applications that want to use a more sophisticated policy must set 
this flag to false. 



    Returns: the current value of the PolicyQualifiersRejected flag 

*java.security.cert.PKIXParameters.getSigProvider()*

public |java.lang.String| getSigProvider()

Returns the signature provider's name, ornullif not set. 



    Returns: the signature provider's name (or {@code null}) 

*java.security.cert.PKIXParameters.getTargetCertConstraints()*

public |java.security.cert.CertSelector| getTargetCertConstraints()

Returns the required constraints on the target certificate. The constraints are 
returned as an instance ofCertSelector. Ifnull, no constraints are defined. 

Note that theCertSelectorreturned is cloned to protect against subsequent 
modifications. 



    Returns: a {@code CertSelector} specifying the constraints on the target certificate (or 
             {@code null}) 

*java.security.cert.PKIXParameters.getTrustAnchors()*

public |java.util.Set|<TrustAnchor> getTrustAnchors()

Returns an immutableSetof the most-trusted CAs. 



    Returns: an immutable {@code Set} of {@code TrustAnchor}s (never {@code null}) 

*java.security.cert.PKIXParameters.isAnyPolicyInhibited()*

public boolean isAnyPolicyInhibited()

Checks whether the any policy OID should be processed if it is included in a 
certificate. 



    Returns: {@code true} if the any policy OID is inhibited, {@code false} otherwise 

*java.security.cert.PKIXParameters.isExplicitPolicyRequired()*

public boolean isExplicitPolicyRequired()

Checks if explicit policy is required. If this flag is true, an acceptable 
policy needs to be explicitly identified in every certificate. By default, the 
ExplicitPolicyRequired flag is false. 



    Returns: {@code true} if explicit policy is required, {@code false} otherwise 

*java.security.cert.PKIXParameters.isPolicyMappingInhibited()*

public boolean isPolicyMappingInhibited()

Checks if policy mapping is inhibited. If this flag is true, policy mapping is 
inhibited. By default, policy mapping is not inhibited (the flag is false). 



    Returns: true if policy mapping is inhibited, false otherwise 

*java.security.cert.PKIXParameters.isRevocationEnabled()*

public boolean isRevocationEnabled()

Checks the RevocationEnabled flag. If this flag is true, the default revocation 
checking mechanism of the underlying PKIX service provider will be used. If 
this flag is false, the default revocation checking mechanism will be disabled 
(not used). See the setRevocationEnabled(|java.security.cert.PKIXParameters|) 
method for more details on setting the value of this flag. 



    Returns: the current value of the RevocationEnabled flag 

*java.security.cert.PKIXParameters.setAnyPolicyInhibited(boolean)*

public void setAnyPolicyInhibited(boolean val)

Sets state to determine if the any policy OID should be processed if it is 
included in a certificate. By default, the any policy OID is not inhibited ( 
isAnyPolicyInhibited()(|java.security.cert.PKIXParameters|) returnsfalse). 


    val - {@code true} if the any policy OID is to be inhibited, {@code false} otherwise 

*java.security.cert.PKIXParameters.setCertPathCheckers(List<PKIXCertPathChecker>)*

public void setCertPathCheckers(java.util.List<java.security.cert.PKIXCertPathChecker> checkers)

Sets aListof additional certification path checkers. If the 
specifiedListcontains an object that is not aPKIXCertPathChecker, it is 
ignored. 

EachPKIXCertPathCheckerspecified implements additional checks on a certificate. 
Typically, these are checks to process and verify private extensions contained 
in certificates. EachPKIXCertPathCheckershould be instantiated with any 
initialization parameters needed to execute the check. 

This method allows sophisticated applications to extend a 
PKIXCertPathValidatororCertPathBuilder. Each of the 
specifiedPKIXCertPathCheckers will be called, in turn, by a 
PKIXCertPathValidatororCertPathBuilderfor each certificate processed or 
validated. 

Regardless of whether these additionalPKIXCertPathCheckers are set, a 
PKIXCertPathValidatororCertPathBuildermust perform all of the required PKIX 
checks on each certificate. The one exception to this rule is if the 
RevocationEnabled flag is set to false (see the 
setRevocationEnabled(|java.security.cert.PKIXParameters|) method). 

Note that theListsupplied here is copied and eachPKIXCertPathCheckerin the list 
is cloned to protect against subsequent modifications. 


    checkers - a {@code List} of {@code PKIXCertPathChecker}s. May be {@code null}, in which 
       case no additional checkers will be used. 

*java.security.cert.PKIXParameters.setCertStores(List<CertStore>)*

public void setCertStores(java.util.List<java.security.cert.CertStore> stores)

Sets the list ofCertStores to be used in finding certificates and CRLs. May 
benull, in which case noCertStores will be used. The firstCertStores in the 
list may be preferred to those that appear later. 

Note that theListis copied to protect against subsequent modifications. 


    stores - a {@code List} of {@code CertStore}s (or {@code null}) 

*java.security.cert.PKIXParameters.setDate(Date)*

public void setDate(java.util.Date date)

Sets the time for which the validity of the certification path should be 
determined. Ifnull, the current time is used. 

Note that theDatesupplied here is copied to protect against subsequent 
modifications. 


    date - the {@code Date}, or {@code null} for the current time 

*java.security.cert.PKIXParameters.setExplicitPolicyRequired(boolean)*

public void setExplicitPolicyRequired(boolean val)

Sets the ExplicitPolicyRequired flag. If this flag is true, an acceptable 
policy needs to be explicitly identified in every certificate. By default, the 
ExplicitPolicyRequired flag is false. 


    val - {@code true} if explicit policy is to be required, {@code false} otherwise 

*java.security.cert.PKIXParameters.setInitialPolicies(Set<String>)*

public void setInitialPolicies(java.util.Set<java.lang.String> initialPolicies)

Sets theSetof initial policy identifiers (OID strings), indicating that any one 
of these policies would be acceptable to the certificate user for the purposes 
of certification path processing. By default, any policy is acceptable (i.e. 
all policies), so a user that wants to allow any policy as acceptable does not 
need to call this method, or can call it with an emptySet(ornull). 

Note that theSetis copied to protect against subsequent modifications. 


    initialPolicies - a {@code Set} of initial policy OIDs in {@code String} format (or {@code null}) 

*java.security.cert.PKIXParameters.setPolicyMappingInhibited(boolean)*

public void setPolicyMappingInhibited(boolean val)

Sets the PolicyMappingInhibited flag. If this flag is true, policy mapping is 
inhibited. By default, policy mapping is not inhibited (the flag is false). 


    val - {@code true} if policy mapping is to be inhibited, {@code false} otherwise 

*java.security.cert.PKIXParameters.setPolicyQualifiersRejected(boolean)*

public void setPolicyQualifiersRejected(boolean qualifiersRejected)

Sets the PolicyQualifiersRejected flag. If this flag is true, certificates that 
include policy qualifiers in a certificate policies extension that is marked 
critical are rejected. If the flag is false, certificates are not rejected on 
this basis. 

When aPKIXParametersobject is created, this flag is set to true. This setting 
reflects the most common (and simplest) strategy for processing policy 
qualifiers. Applications that want to use a more sophisticated policy must set 
this flag to false. 

Note that the PKIX certification path validation algorithm specifies that any 
policy qualifier in a certificate policies extension that is marked critical 
must be processed and validated. Otherwise the certification path must be 
rejected. If the policyQualifiersRejected flag is set to false, it is up to the 
application to validate all policy qualifiers in this manner in order to be 
PKIX compliant. 


    qualifiersRejected - the new value of the PolicyQualifiersRejected flag 

*java.security.cert.PKIXParameters.setRevocationEnabled(boolean)*

public void setRevocationEnabled(boolean val)

Sets the RevocationEnabled flag. If this flag is true, the default revocation 
checking mechanism of the underlying PKIX service provider will be used. If 
this flag is false, the default revocation checking mechanism will be disabled 
(not used). 

When aPKIXParametersobject is created, this flag is set to true. This setting 
reflects the most common strategy for checking revocation, since each service 
provider must support revocation checking to be PKIX compliant. Sophisticated 
applications should set this flag to false when it is not practical to use a 
PKIX service provider's default revocation checking mechanism or when an 
alternative revocation checking mechanism is to be substituted (by also calling 
the addCertPathChecker(|java.security.cert.PKIXParameters|) or 
setCertPathCheckers(|java.security.cert.PKIXParameters|) methods). 


    val - the new value of the RevocationEnabled flag 

*java.security.cert.PKIXParameters.setSigProvider(String)*

public void setSigProvider(java.lang.String sigProvider)

Sets the signature provider's name. The specified provider will be preferred 
when creating Signature(|java.security.Signature|) objects. Ifnullor not set, 
the first provider found supporting the algorithm will be used. 


    sigProvider - the signature provider's name (or {@code null}) 

*java.security.cert.PKIXParameters.setTargetCertConstraints(CertSelector)*

public void setTargetCertConstraints(java.security.cert.CertSelector selector)

Sets the required constraints on the target certificate. The constraints are 
specified as an instance ofCertSelector. Ifnull, no constraints are defined. 

Note that theCertSelectorspecified is cloned to protect against subsequent 
modifications. 


    selector - a {@code CertSelector} specifying the constraints on the target certificate (or 
       {@code null}) 

*java.security.cert.PKIXParameters.setTrustAnchors(Set<TrustAnchor>)*

public void setTrustAnchors(java.util.Set<java.security.cert.TrustAnchor> trustAnchors)
  throws |java.security.InvalidAlgorithmParameterException|
         
Sets theSetof most-trusted CAs. 

Note that theSetis copied to protect against subsequent modifications. 


    trustAnchors - a {@code Set} of {@code TrustAnchor}s 

*java.security.cert.PKIXParameters.toString()*

public |java.lang.String| toString()

Returns a formatted string describing the parameters. 



    Returns: a formatted string describing the parameters. 


