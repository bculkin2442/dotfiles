*java.util.stream.Collector* *Collector* A mutable reduction operation that
 acc

public interface interface Collector<T,A,R>


|java.util.stream.Collector_Description|
|java.util.stream.Collector_Fields|
|java.util.stream.Collector_Constructors|
|java.util.stream.Collector_Methods|

================================================================================

*java.util.stream.Collector_Methods*
|java.util.stream.Collector.accumulator()|A function that folds a value into a 
|java.util.stream.Collector.characteristics()|Returns aSetofCollector.Character
|java.util.stream.Collector.combiner()|A function that accepts two partial resu
|java.util.stream.Collector.finisher()|Perform the final transformation from th
|java.util.stream.Collector.of(Supplier<A>,BiConsumer<A,T>,BinaryOperator<A>,Function<A,R>,Collector.Characteristics...)|
|java.util.stream.Collector.of(Supplier<R>,BiConsumer<R,T>,BinaryOperator<R>,Collector.Characteristics...)|
|java.util.stream.Collector.supplier()|A function that creates and returns a ne

*java.util.stream.Collector_Description*

A mutable reduction operation that accumulates input elements into a mutable 
result container, optionally transforming the accumulated result into a final 
representation after all input elements have been processed. Reduction 
operations can be performed either sequentially or in parallel. 

Examples of mutable reduction operations include: accumulating elements into 
aCollection; concatenating strings using aStringBuilder; computing summary 
information about elements such as sum, min, max, or average; computing "pivot 
table" summaries such as "maximum valued transaction by seller", etc. The class 
(|java.util.stream.Collectors|) provides implementations of many common mutable 
reductions. 

ACollectoris specified by four functions that work together to accumulate 
entries into a mutable result container, and optionally perform a final 
transform on the result. They are: creation of a new result container ( 
(|java.util.stream.Collector|) ) incorporating a new data element into a result 
container ( (|java.util.stream.Collector|) ) combining two result containers 
into one ( (|java.util.stream.Collector|) ) performing an optional final 
transform on the container ( (|java.util.stream.Collector|) ) 

Collectors also have a set of characteristics, such as 
(|java.util.stream.Collector.Characteristics|) , that provide hints that can be 
used by a reduction implementation to provide better performance. 

A sequential implementation of a reduction using a collector would create a 
single result container using the supplier function, and invoke the accumulator 
function once for each input element. A parallel implementation would partition 
the input, create a result container for each partition, accumulate the 
contents of each partition into a subresult for that partition, and then use 
the combiner function to merge the subresults into a combined result. 

To ensure that sequential and parallel executions produce equivalent results, 
the collector functions must satisfy an identity and an associativity 
constraints. 

The identity constraint says that for any partially accumulated result, 
combining it with an empty result container must produce an equivalent result. 
That is, for a partially accumulated resultathat is the result of any series of 
accumulator and combiner invocations,amust be equivalent tocombiner.apply(a, 
supplier.get()). 

The associativity constraint says that splitting the computation must produce 
an equivalent result. That is, for any input elementst1andt2, the 
resultsr1andr2in the computation below must be equivalent: 

A a1 = supplier.get(); accumulator.accept(a1, t1); accumulator.accept(a1, t2); 
R r1 = finisher.apply(a1); // result without splitting 

A a2 = supplier.get(); accumulator.accept(a2, t1); A a3 = supplier.get(); 
accumulator.accept(a3, t2); R r2 = finisher.apply(combiner.apply(a2, a3)); // 
result with splitting 

For collectors that do not have theUNORDEREDcharacteristic, two accumulated 
resultsa1anda2are equivalent iffinisher.apply(a1).equals(finisher.apply(a2)). 
For unordered collectors, equivalence is relaxed to allow for non-equality 
related to differences in order. (For example, an unordered collector that 
accumulated elements to aListwould consider two lists equivalent if they 
contained the same elements, ignoring order.) 

Libraries that implement reduction based onCollector, such as 
(|java.util.stream.Stream|) , must adhere to the following constraints: 

The first argument passed to the accumulator function, both arguments passed to 
the combiner function, and the argument passed to the finisher function must be 
the result of a previous invocation of the result supplier, accumulator, or 
combiner functions. The implementation should not do anything with the result 
of any of the result supplier, accumulator, or combiner functions other than to 
pass them again to the accumulator, combiner, or finisher functions, or return 
them to the caller of the reduction operation. If a result is passed to the 
combiner or finisher function, and the same object is not returned from that 
function, it is never used again. Once a result is passed to the combiner or 
finisher function, it is never passed to the accumulator function again. For 
non-concurrent collectors, any result returned from the result supplier, 
accumulator, or combiner functions must be serially thread-confined. This 
enables collection to occur in parallel without theCollectorneeding to 
implement any additional synchronization. The reduction implementation must 
manage that the input is properly partitioned, that partitions are processed in 
isolation, and combining happens only after accumulation is complete. For 
concurrent collectors, an implementation is free to (but not required to) 
implement reduction concurrently. A concurrent reduction is one where the 
accumulator function is called concurrently from multiple threads, using the 
same concurrently-modifiable result container, rather than keeping the result 
isolated during accumulation. A concurrent reduction should only be applied if 
the collector has the (|java.util.stream.Collector.Characteristics|) 
characteristics or if the originating data is unordered. 

In addition to the predefined implementations in 
(|java.util.stream.Collectors|) , the static factory methods 
(|java.util.stream.Collector|) can be used to construct collectors. For 
example, you could create a collector that accumulates widgets into 
aTreeSetwith: 

Collector> intoSet = Collector.of(TreeSet::new, TreeSet::add, (left, right) -> 
{ left.addAll(right); return left; }); 

(This behavior is also implemented by the predefined collector 
(|java.util.stream.Collectors|) ). 



*java.util.stream.Collector.accumulator()*

public |java.util.function.BiConsumer|<A,T> accumulator()

A function that folds a value into a mutable result container. 



    Returns: a function which folds a value into a mutable result container 

*java.util.stream.Collector.characteristics()*

public |java.util.Set|<Characteristics> characteristics()

Returns aSetofCollector.Characteristicsindicating the characteristics of this 
Collector. This set should be immutable. 



    Returns: an immutable set of collector characteristics 

*java.util.stream.Collector.combiner()*

public |java.util.function.BinaryOperator|<A> combiner()

A function that accepts two partial results and merges them. The combiner 
function may fold state from one argument into the other and return that, or 
may return a new result container. 



    Returns: a function which combines two partial results into a combined result 

*java.util.stream.Collector.finisher()*

public |java.util.function.Function|<A,R> finisher()

Perform the final transformation from the intermediate accumulation typeAto the 
final result typeR. 

If the characteristicIDENTITY_TRANSFORMis set, this function may be presumed to 
be an identity transform with an unchecked cast fromAtoR. 



    Returns: a function which transforms the intermediate result to the final result 

*java.util.stream.Collector.of(Supplier<A>,BiConsumer<A,T>,BinaryOperator<A>,Function<A,R>,Collector.Characteristics...)*

public static |java.util.stream.Collector|<T,A,R> of(
  java.util.function.Supplier<A> supplier,
  java.util.function.BiConsumer<A, T> accumulator,
  java.util.function.BinaryOperator<A> combiner,
  java.util.function.Function<A, R> finisher,
  java.util.stream.Collector.Characteristics[] characteristics)

Returns a newCollectordescribed by the givensupplier,accumulator,combiner, 
andfinisherfunctions. 


    supplier - The supplier function for the new collector 
    accumulator - The accumulator function for the new collector 
    combiner - The combiner function for the new collector 
    finisher - The finisher function for the new collector 
    characteristics - The collector characteristics for the new collector 

    Returns: the new {@code Collector} 

*java.util.stream.Collector.of(Supplier<R>,BiConsumer<R,T>,BinaryOperator<R>,Collector.Characteristics...)*

public static |java.util.stream.Collector|<T,R,R> of(
  java.util.function.Supplier<R> supplier,
  java.util.function.BiConsumer<R, T> accumulator,
  java.util.function.BinaryOperator<R> combiner,
  java.util.stream.Collector.Characteristics[] characteristics)

Returns a newCollectordescribed by the givensupplier,accumulator, 
andcombinerfunctions. The resultingCollectorhas 
theCollector.Characteristics.IDENTITY_FINISHcharacteristic. 


    supplier - The supplier function for the new collector 
    accumulator - The accumulator function for the new collector 
    combiner - The combiner function for the new collector 
    characteristics - The collector characteristics for the new collector 

    Returns: the new {@code Collector} 

*java.util.stream.Collector.supplier()*

public |java.util.function.Supplier|<A> supplier()

A function that creates and returns a new mutable result container. 



    Returns: a function which returns a new, mutable result container 


