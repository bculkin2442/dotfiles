*javax.security.auth.login.LoginContext* *LoginContext*  TheLoginContextclass de

public class LoginContext
  extends    |java.lang.Object|

|javax.security.auth.login.LoginContext_Description|
|javax.security.auth.login.LoginContext_Fields|
|javax.security.auth.login.LoginContext_Constructors|
|javax.security.auth.login.LoginContext_Methods|

================================================================================

*javax.security.auth.login.LoginContext_Constructors*
|javax.security.auth.login.LoginContext(String)|Instantiate a newLoginContextob
|javax.security.auth.login.LoginContext(String,CallbackHandler)|Instantiate a n
|javax.security.auth.login.LoginContext(String,Subject)|Instantiate a newLoginC
|javax.security.auth.login.LoginContext(String,Subject,CallbackHandler)|Instant
|javax.security.auth.login.LoginContext(String,Subject,CallbackHandler,Configuration)|

*javax.security.auth.login.LoginContext_Methods*
|javax.security.auth.login.LoginContext.getSubject()|Return the authenticated S
|javax.security.auth.login.LoginContext.login()|Perform the authentication.
|javax.security.auth.login.LoginContext.logout()|Logout theSubject.

*javax.security.auth.login.LoginContext_Description*

TheLoginContextclass describes the basic methods used to authenticate Subjects 
and provides a way to develop an application independent of the underlying 
authentication technology. AConfigurationspecifies the authentication 
technology, orLoginModule, to be used with a particular application. Different 
LoginModules can be plugged in under an application without requiring any 
modifications to the application itself. 

In addition to supporting pluggable authentication, this class also supports 
the notion of stacked authentication. Applications may be configured to use 
more than one LoginModule. For example, one could configure both a Kerberos 
LoginModule and a smart card LoginModule under an application. 

A typical caller instantiates a LoginContext with a name and aCallbackHandler. 
LoginContext uses the name as the index into a Configuration to determine which 
LoginModules should be used, and which ones must succeed in order for the 
overall authentication to succeed. TheCallbackHandleris passed to the 
underlying LoginModules so they may communicate and interact with users 
(prompting for a username and password via a graphical user interface, for 
example). 

Once the caller has instantiated a LoginContext, it invokes theloginmethod to 
authenticate aSubject. Theloginmethod invokes the configured modules to perform 
their respective types of authentication (username/password, smart card pin 
verification, etc.). Note that the LoginModules will not attempt authentication 
retries nor introduce delays if the authentication fails. Such tasks belong to 
the LoginContext caller. 

If theloginmethod returns without throwing an exception, then the overall 
authentication succeeded. The caller can then retrieve the newly authenticated 
Subject by invoking thegetSubjectmethod. Principals and Credentials associated 
with the Subject may be retrieved by invoking the Subject's 
respectivegetPrincipals,getPublicCredentials, andgetPrivateCredentialsmethods. 

To logout the Subject, the caller calls thelogoutmethod. As with 
theloginmethod, thislogoutmethod invokes thelogoutmethod for the configured 
modules. 

A LoginContext should not be used to authenticate more than one Subject. A 
separate LoginContext should be used to authenticate each different Subject. 

The following documentation applies to all LoginContext constructors: 

Subject If the constructor has a Subject input parameter, the LoginContext uses 
the caller-specified Subject object. 

If the caller specifies anullSubject and anullvalue is permitted, the 
LoginContext instantiates a new Subject. 

If the constructor does not have a Subject input parameter, the LoginContext 
instantiates a new Subject. 



Configuration If the constructor has a Configuration input parameter and the 
caller specifies a non-null Configuration, the LoginContext uses the 
caller-specified Configuration. 

If the constructor does not have a Configuration input parameter, or if the 
caller specifies anullConfiguration object, the constructor uses the following 
call to get the installed Configuration: 

config = Configuration.getConfiguration(); 

For both cases, the name argument given to the constructor is passed to 
theConfiguration.getAppConfigurationEntrymethod. If the Configuration has no 
entries for the specified name, then 
theLoginContextcallsgetAppConfigurationEntrywith the name, "other" (the default 
entry name). If there is no entry for "other", then aLoginExceptionis thrown. 

When LoginContext uses the installed Configuration, the caller requires the 
createLoginContext.name and possibly createLoginContext.other AuthPermissions. 
Furthermore, the LoginContext will invoke configured modules from within 
anAccessController.doPrivilegedcall so that modules that perform 
security-sensitive tasks (such as connecting to remote hosts, and updating the 
Subject) will require the respective permissions, but the callers of the 
LoginContext will not require those permissions. 

When LoginContext uses a caller-specified Configuration, the caller does not 
require any createLoginContext AuthPermission. The LoginContext saves 
theAccessControlContextfor the caller, and invokes the configured modules from 
within anAccessController.doPrivilegedcall constrained by that context. This 
means the caller context (stored when the LoginContext was created) must have 
sufficient permissions to perform any security-sensitive tasks that the modules 
may perform. 



CallbackHandler If the constructor has a CallbackHandler input parameter, the 
LoginContext uses the caller-specified CallbackHandler object. 

If the constructor does not have a CallbackHandler input parameter, or if the 
caller specifies anullCallbackHandler object (and anullvalue is permitted), the 
LoginContext queries theauth.login.defaultCallbackHandlersecurity property for 
the fully qualified class name of a default handler implementation. If the 
security property is not set, then the underlying modules will not have a 
CallbackHandler for use in communicating with users. The caller thus assumes 
that the configured modules have alternative means for authenticating the user. 

When the LoginContext uses the installed Configuration (instead of a 
caller-specified Configuration, see above), then this LoginContext must wrap 
any caller-specified or default CallbackHandler implementation in a new 
CallbackHandler implementation whosehandlemethod implementation invokes the 
specified CallbackHandler'shandlemethod in 
ajava.security.AccessController.doPrivilegedcall constrained by the caller's 
currentAccessControlContext. 





*javax.security.auth.login.LoginContext(String)*

public LoginContext(java.lang.String name)
  throws |javax.security.auth.login.LoginException|
         
Instantiate a newLoginContextobject with a name. 

    name - the name used as the index into the {@code Configuration}. 

*javax.security.auth.login.LoginContext(String,CallbackHandler)*

public LoginContext(
  java.lang.String name,
  javax.security.auth.callback.CallbackHandler callbackHandler)
  throws |javax.security.auth.login.LoginException|
         
Instantiate a newLoginContextobject with a name and aCallbackHandlerobject. 



    name - the name used as the index into the {@code Configuration}. 
    callbackHandler - the {@code CallbackHandler} object used by LoginModules to communicate with the 
       user. 

*javax.security.auth.login.LoginContext(String,Subject)*

public LoginContext(
  java.lang.String name,
  javax.security.auth.Subject subject)
  throws |javax.security.auth.login.LoginException|
         
Instantiate a newLoginContextobject with a name and aSubjectobject. 



    name - the name used as the index into the {@code Configuration}. 
    subject - the {@code Subject} to authenticate. 

*javax.security.auth.login.LoginContext(String,Subject,CallbackHandler)*

public LoginContext(
  java.lang.String name,
  javax.security.auth.Subject subject,
  javax.security.auth.callback.CallbackHandler callbackHandler)
  throws |javax.security.auth.login.LoginException|
         
Instantiate a newLoginContextobject with a name, aSubjectto be authenticated, 
and aCallbackHandlerobject. 



    name - the name used as the index into the {@code Configuration}. 
    subject - the {@code Subject} to authenticate. 
    callbackHandler - the {@code CallbackHandler} object used by LoginModules to communicate with the 
       user. 

*javax.security.auth.login.LoginContext(String,Subject,CallbackHandler,Configuration)*

public LoginContext(
  java.lang.String name,
  javax.security.auth.Subject subject,
  javax.security.auth.callback.CallbackHandler callbackHandler,
  javax.security.auth.login.Configuration config)
  throws |javax.security.auth.login.LoginException|
         
Instantiate a newLoginContextobject with a name, aSubjectto be authenticated, 
aCallbackHandlerobject, and a loginConfiguration. 



    name - the name used as the index into the caller-specified {@code Configuration}. 
    subject - the {@code Subject} to authenticate, or {@code null}. 
    callbackHandler - the {@code CallbackHandler} object used by LoginModules to communicate with the 
       user, or {@code null}. 
    config - the {@code Configuration} that lists the login modules to be called to perform 
       the authentication, or {@code null}. 

*javax.security.auth.login.LoginContext.getSubject()*

public |javax.security.auth.Subject| getSubject()

Return the authenticated Subject. 





    Returns: the authenticated Subject. If the caller specified a Subject to this 
             LoginContext's constructor, this method returns the 
             caller-specified Subject. If a Subject was not specified and 
             authentication succeeds, this method returns the Subject 
             instantiated and used for authentication by this LoginContext. If 
             a Subject was not specified, and authentication fails or has not 
             been attempted, this method returns null. 

*javax.security.auth.login.LoginContext.login()*

public void login()
  throws |javax.security.auth.login.LoginException|
         
Perform the authentication. 

This method invokes theloginmethod for each LoginModule configured for the name 
specified to theLoginContextconstructor, as determined by the 
loginConfiguration. EachLoginModulethen performs its respective type of 
authentication (username/password, smart card pin verification, etc.). 

This method completes a 2-phase authentication process by calling each 
configured LoginModule'scommitmethod if the overall authentication succeeded 
(the relevant REQUIRED, REQUISITE, SUFFICIENT, and OPTIONAL LoginModules 
succeeded), or by calling each configured LoginModule'sabortmethod if the 
overall authentication failed. If authentication succeeded, each successful 
LoginModule'scommitmethod associates the relevant Principals and Credentials 
with theSubject. If authentication failed, each LoginModule'sabortmethod 
removes/destroys any previously stored state. 

If thecommitphase of the authentication process fails, then the overall 
authentication fails and this method invokes theabortmethod for each 
configuredLoginModule. 

If theabortphase fails for any reason, then this method propagates the original 
exception thrown either during theloginphase or thecommitphase. In either case, 
the overall authentication fails. 

In the case where multiple LoginModules fail, this method propagates the 
exception raised by the firstLoginModulewhich failed. 

Note that if this method enters theabortphase (either theloginorcommitphase 
failed), this method invokes all LoginModules configured for the application 
regardless of their respectiveConfigurationflag parameters. Essentially this 
means thatRequisiteandSufficientsemantics are ignored during theabortphase. 
This guarantees that proper cleanup and state restoration can take place. 





*javax.security.auth.login.LoginContext.logout()*

public void logout()
  throws |javax.security.auth.login.LoginException|
         
Logout theSubject. 

This method invokes thelogoutmethod for eachLoginModuleconfigured for 
thisLoginContext. EachLoginModuleperforms its respective logout procedure which 
may include removing/destroyingPrincipalandCredentialinformation from 
theSubjectand state cleanup. 

Note that this method invokes all LoginModules configured for the application 
regardless of their respectiveConfigurationflag parameters. Essentially this 
means thatRequisiteandSufficientsemantics are ignored for this method. This 
guarantees that proper cleanup and state restoration can take place. 






