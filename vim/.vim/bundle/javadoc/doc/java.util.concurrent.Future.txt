*java.util.concurrent.Future* *Future* AFuturerepresents the result of an asynch

public interface interface Future<V>


|java.util.concurrent.Future_Description|
|java.util.concurrent.Future_Fields|
|java.util.concurrent.Future_Constructors|
|java.util.concurrent.Future_Methods|

================================================================================

*java.util.concurrent.Future_Methods*
|java.util.concurrent.Future.cancel(boolean)|Attempts to cancel execution of th
|java.util.concurrent.Future.get()|Waits if necessary for the computation to co
|java.util.concurrent.Future.get(long,TimeUnit)|Waits if necessary for at most 
|java.util.concurrent.Future.isCancelled()|Returnstrueif this task was cancelle
|java.util.concurrent.Future.isDone()|Returnstrueif this task completed.

*java.util.concurrent.Future_Description*

AFuturerepresents the result of an asynchronous computation. Methods are 
provided to check if the computation is complete, to wait for its completion, 
and to retrieve the result of the computation. The result can only be retrieved 
using methodgetwhen the computation has completed, blocking if necessary until 
it is ready. Cancellation is performed by thecancelmethod. Additional methods 
are provided to determine if the task completed normally or was cancelled. Once 
a computation has completed, the computation cannot be cancelled. If you would 
like to use aFuturefor the sake of cancellability but not provide a usable 
result, you can declare types of the formFutureand returnnullas a result of the 
underlying task. 

Sample Usage (Note that the following classes are all made-up.) 

interface ArchiveSearcher { String search(String target); } class App { 
ExecutorService executor = ... ArchiveSearcher searcher = ... void 
showSearch(final String target) throws InterruptedException { Future future = 
executor.submit(new Callable() { public String call() { return 
searcher.search(target); }}); displayOtherThings(); // do other things while 
searching try { displayText(future.get()); // use future } catch 
(ExecutionException ex) { cleanup(); return; } } } 

The (|java.util.concurrent.FutureTask|) class is an implementation ofFuturethat 
implementsRunnable, and so may be executed by anExecutor. For example, the 
above construction withsubmitcould be replaced by: 

FutureTask future = new FutureTask(new Callable() { public String call() { 
return searcher.search(target); }}); executor.execute(future); 

Memory consistency effects: Actions taken by the asynchronous computation 
happen-before actions following the correspondingFuture.get()in another thread. 



*java.util.concurrent.Future.cancel(boolean)*

public boolean cancel(boolean mayInterruptIfRunning)

Attempts to cancel execution of this task. This attempt will fail if the task 
has already completed, has already been cancelled, or could not be cancelled 
for some other reason. If successful, and this task has not started 
whencancelis called, this task should never run. If the task has already 
started, then themayInterruptIfRunningparameter determines whether the thread 
executing this task should be interrupted in an attempt to stop the task. 

After this method returns, subsequent calls to (|java.util.concurrent.Future|) 
will always returntrue. Subsequent calls to (|java.util.concurrent.Future|) 
will always returntrueif this method returnedtrue. 


    mayInterruptIfRunning - {@code true} if the thread executing this task should be interrupted; 
       otherwise, in-progress tasks are allowed to complete 

    Returns: {@code false} if the task could not be cancelled, typically because it has 
             already completed normally; {@code true} otherwise 

*java.util.concurrent.Future.get()*

public |V| get()
  throws |java.util.concurrent.ExecutionException|
         |java.lang.InterruptedException|
         
Waits if necessary for the computation to complete, and then retrieves its 
result. 



    Returns: the computed result 

*java.util.concurrent.Future.get(long,TimeUnit)*

public |V| get(
  long timeout,
  java.util.concurrent.TimeUnit unit)
  throws |java.util.concurrent.ExecutionException|
         |java.lang.InterruptedException|
         |java.util.concurrent.TimeoutException|
         
Waits if necessary for at most the given time for the computation to complete, 
and then retrieves its result, if available. 


    timeout - the maximum time to wait 
    unit - the time unit of the timeout argument 

    Returns: the computed result 

*java.util.concurrent.Future.isCancelled()*

public boolean isCancelled()

Returnstrueif this task was cancelled before it completed normally. 



    Returns: {@code true} if this task was cancelled before it completed 

*java.util.concurrent.Future.isDone()*

public boolean isDone()

Returnstrueif this task completed. 

Completion may be due to normal termination, an exception, or cancellation -- 
in all of these cases, this method will returntrue. 



    Returns: {@code true} if this task completed 


