*java.net.URL* *URL* ClassURLrepresents a Uniform Resource
 Locator, a pointer t

public final class URL
  extends    |java.lang.Object|
  implements |java.io.Serializable|

|java.net.URL_Description|
|java.net.URL_Fields|
|java.net.URL_Constructors|
|java.net.URL_Methods|

================================================================================

*java.net.URL_Constructors*
|java.net.URL(String)|Creates aURLobject from theStringrepresentation.
|java.net.URL(String,String,int,String)|Creates aURLobject from the specifiedpr
|java.net.URL(String,String,int,String,URLStreamHandler)|Creates aURLobject fro
|java.net.URL(String,String,String)|Creates a URL from the specifiedprotocolnam
|java.net.URL(URL,String)|Creates a URL by parsing the given spec within a spec
|java.net.URL(URL,String,URLStreamHandler)|Creates a URL by parsing the given s

*java.net.URL_Methods*
|java.net.URL.equals(Object)|Compares this URL for equality with another object
|java.net.URL.getAuthority()|Gets the authority part of thisURL.
|java.net.URL.getContent()|Gets the contents of this URL.
|java.net.URL.getContent(Class[])|Gets the contents of this URL.
|java.net.URL.getDefaultPort()|Gets the default port number of the protocol ass
|java.net.URL.getFile()|Gets the file name of thisURL.
|java.net.URL.getHost()|Gets the host name of thisURL, if applicable.
|java.net.URL.getPath()|Gets the path part of thisURL.
|java.net.URL.getPort()|Gets the port number of thisURL.
|java.net.URL.getProtocol()|Gets the protocol name of thisURL.
|java.net.URL.getQuery()|Gets the query part of thisURL.
|java.net.URL.getRef()|Gets the anchor (also known as the "reference") of thisU
|java.net.URL.getUserInfo()|Gets the userInfo part of thisURL.
|java.net.URL.hashCode()|Creates an integer suitable for hash table indexing.
|java.net.URL.openConnection()|Returns ajava.net.URLConnection URLConnectionins
|java.net.URL.openConnection(Proxy)|Same as#openConnection(), except that the c
|java.net.URL.openStream()|Opens a connection to thisURLand returns anInputStre
|java.net.URL.sameFile(URL)|Compares two URLs, excluding the fragment component
|java.net.URL.setURLStreamHandlerFactory(URLStreamHandlerFactory)|Sets an appli
|java.net.URL.toExternalForm()|Constructs a string representation of thisURL.
|java.net.URL.toString()|Constructs a string representation of thisURL.
|java.net.URL.toURI()|Returns ajava.net.URIequivalent to this URL.

*java.net.URL_Description*

ClassURLrepresents a Uniform Resource Locator, a pointer to a "resource" on the 
World Wide Web. A resource can be something as simple as a file or a directory, 
or it can be a reference to a more complicated object, such as a query to a 
database or to a search engine. More information on the types of URLs and their 
formats can be found at: 

Types of URL 

In general, a URL can be broken into several parts. Consider the following 
example: 

http://www.example.com/docs/resource1.html 

The URL above indicates that the protocol to use ishttp(HyperText Transfer 
Protocol) and that the information resides on a host machine 
namedwww.example.com. The information on that host machine is 
named/docs/resource1.html. The exact meaning of this name on the host machine 
is both protocol dependent and host dependent. The information normally resides 
in a file, but it could be generated on the fly. This component of the URL is 
called the path component. 

A URL can optionally specify a "port", which is the port number to which the 
TCP connection is made on the remote host machine. If the port is not 
specified, the default port for the protocol is used instead. For example, the 
default port forhttpis80. An alternative port could be specified as: 

http://www.example.com:1080/docs/resource1.html 

The syntax ofURLis defined by RFC2396: Uniform Resource Identifiers (URI): 
Generic Syntax, amended by RFC2732: Format for Literal IPv6 Addresses in URLs. 
The Literal IPv6 address format also supports scope_ids. The syntax and usage 
of scope_ids is described here. 

A URL may have appended to it a "fragment", also known as a "ref" or a 
"reference". The fragment is indicated by the sharp sign character "#" followed 
by more characters. For example, 

http://java.sun.com/index.html#chapter1 

This fragment is not technically part of the URL. Rather, it indicates that 
after the specified resource is retrieved, the application is specifically 
interested in that part of the document that has the tagchapter1attached to it. 
The meaning of a tag is resource specific. 

An application can also specify a "relative URL", which contains only enough 
information to reach the resource relative to another URL. Relative URLs are 
frequently used within HTML pages. For example, if the contents of the URL: 

http://java.sun.com/index.html 

contained within it the relative URL: 

FAQ.html 

it would be a shorthand for: 

http://java.sun.com/FAQ.html 

The relative URL need not specify all the components of a URL. If the protocol, 
host name, or port number is missing, the value is inherited from the fully 
specified URL. The file component must be specified. The optional fragment is 
not inherited. 

The URL class does not itself encode or decode any URL components according to 
the escaping mechanism defined in RFC2396. It is the responsibility of the 
caller to encode any fields, which need to be escaped prior to calling URL, and 
also to decode any escaped fields, that are returned from URL. Furthermore, 
because URL has no knowledge of URL escaping, it does not recognise equivalence 
between the encoded or decoded form of the same URL. For example, the two URLs: 

http://foo.com/hello world/ and http://foo.com/hello%20world 

would be considered not equal to each other. 

Note, the (|java.net.URI|) class does perform escaping of its component fields 
in certain circumstances. The recommended way to manage the encoding and 
decoding of URLs is to use (|java.net.URI|) , and to convert between these two 
classes using (|java.net.URL|) and (|java.net.URI|) . 

The (|java.net.URLEncoder|) and (|java.net.URLDecoder|) classes can also be 
used, but only for HTML form encoding, which is not the same as the encoding 
scheme defined in RFC2396. 



*java.net.URL(String)*

public URL(java.lang.String spec)
  throws |java.net.MalformedURLException|
         
Creates aURLobject from theStringrepresentation. 

This constructor is equivalent to a call to the two-argument constructor with 
anullfirst argument. 

    spec - the {@code String} to parse as a URL. 

*java.net.URL(String,String,int,String)*

public URL(
  java.lang.String protocol,
  java.lang.String host,
  int port,
  java.lang.String file)
  throws |java.net.MalformedURLException|
         
Creates aURLobject from the specifiedprotocol,host,portnumber, andfile.hostcan 
be expressed as a host name or a literal IP address. If IPv6 literal address is 
used, it should be enclosed in square brackets ('['and']'), as specified by 
RFC2732; However, the literal IPv6 address format defined in RFC2373: IP 
Version 6 Addressing Architecture is also accepted. 

Specifying aportnumber of-1indicates that the URL should use the default port 
for the protocol. 

If this is the first URL object being created with the specified protocol, a 
stream protocol handler object, an instance of classURLStreamHandler, is 
created for that protocol: 

If the application has previously set up an instance 
ofURLStreamHandlerFactoryas the stream handler factory, then 
thecreateURLStreamHandlermethod of that instance is called with the protocol 
string as an argument to create the stream protocol handler. If 
noURLStreamHandlerFactoryhas yet been set up, or if the 
factory'screateURLStreamHandlermethod returnsnull, then the constructor finds 
the value of the system property: 

java.protocol.handler.pkgs 

If the value of that system property is notnull, it is interpreted as a list of 
packages separated by a vertical slash character '|'. The constructor tries to 
load the class named: 

<package>.<protocol>.Handler 

where <package> is replaced by the name of the package and <protocol> is 
replaced by the name of the protocol. If this class does not exist, or if the 
class exists but it is not a subclass ofURLStreamHandler, then the next package 
in the list is tried. If the previous step fails to find a protocol handler, 
then the constructor tries to load from a system default package. 

<system default package>.<protocol>.Handler 

If this class does not exist, or if the class exists but it is not a subclass 
ofURLStreamHandler, then aMalformedURLExceptionis thrown. 

Protocol handlers for the following protocols are guaranteed to exist on the 
search path :- 

http, https, file, and jar 

Protocol handlers for additional protocols may also be available. 

No validation of the inputs is performed by this constructor. 

    protocol - the name of the protocol to use. 
    host - the name of the host. 
    port - the port number on the host. 
    file - the file on the host 

*java.net.URL(String,String,int,String,URLStreamHandler)*

public URL(
  java.lang.String protocol,
  java.lang.String host,
  int port,
  java.lang.String file,
  java.net.URLStreamHandler handler)
  throws |java.net.MalformedURLException|
         
Creates aURLobject from the specifiedprotocol,host,portnumber,file, andhandler. 
Specifying aportnumber of-1indicates that the URL should use the default port 
for the protocol. Specifying ahandlerofnullindicates that the URL should use a 
default stream handler for the protocol, as outlined for: 
java.net.URL#URL(java.lang.String, java.lang.String, int, java.lang.String) 

If the handler is not null and there is a security manager, the security 
manager'scheckPermissionmethod is called with 
aNetPermission("specifyStreamHandler")permission. This may result in a 
SecurityException. 

No validation of the inputs is performed by this constructor. 

    protocol - the name of the protocol to use. 
    host - the name of the host. 
    port - the port number on the host. 
    file - the file on the host 
    handler - the stream handler for the URL. 

*java.net.URL(String,String,String)*

public URL(
  java.lang.String protocol,
  java.lang.String host,
  java.lang.String file)
  throws |java.net.MalformedURLException|
         
Creates a URL from the specifiedprotocolname,hostname, andfilename. The default 
port for the specified protocol is used. 

This method is equivalent to calling the four-argument constructor with the 
arguments beingprotocol,host,-1, andfile. 

No validation of the inputs is performed by this constructor. 

    protocol - the name of the protocol to use. 
    host - the name of the host. 
    file - the file on the host. 

*java.net.URL(URL,String)*

public URL(
  java.net.URL context,
  java.lang.String spec)
  throws |java.net.MalformedURLException|
         
Creates a URL by parsing the given spec within a specified context. 

The new URL is created from the given context URL and the spec argument as 
described in RFC2396 Uniform Resource Identifiers : Generic * Syntax : 

<scheme>://<authority><path>?<query>#<fragment> 

The reference is parsed into the scheme, authority, path, query and fragment 
parts. If the path component is empty and the scheme, authority, and query 
components are undefined, then the new URL is a reference to the current 
document. Otherwise, the fragment and query parts present in the spec are used 
in the new URL. 

If the scheme component is defined in the given spec and does not match the 
scheme of the context, then the new URL is created as an absolute URL based on 
the spec alone. Otherwise the scheme component is inherited from the context 
URL. 

If the authority component is present in the spec then the spec is treated as 
absolute and the spec authority and path will replace the context authority and 
path. If the authority component is absent in the spec then the authority of 
the new URL will be inherited from the context. 

If the spec's path component begins with a slash character / then the path is 
treated as absolute and the spec path replaces the context path. 

Otherwise, the path is treated as a relative path and is appended to the 
context path, as described in RFC2396. Also, in this case, the path is 
canonicalized through the removal of directory changes made by occurrences of 
.. and .. 

For a more detailed description of URL parsing, refer to RFC2396. 

    context - the context in which to parse the specification. 
    spec - the {@code String} to parse as a URL. 

*java.net.URL(URL,String,URLStreamHandler)*

public URL(
  java.net.URL context,
  java.lang.String spec,
  java.net.URLStreamHandler handler)
  throws |java.net.MalformedURLException|
         
Creates a URL by parsing the given spec with the specified handler within a 
specified context. If the handler is null, the parsing occurs as with the two 
argument constructor. 

    context - the context in which to parse the specification. 
    spec - the {@code String} to parse as a URL. 
    handler - the stream handler for the URL. 

*java.net.URL.equals(Object)*

public boolean equals(java.lang.Object obj)

Compares this URL for equality with another object. 

If the given object is not a URL then this method immediately returnsfalse. 

Two URL objects are equal if they have the same protocol, reference equivalent 
hosts, have the same port number on the host, and the same file and fragment of 
the file. 

Two hosts are considered equivalent if both host names can be resolved into the 
same IP addresses; else if either host name can't be resolved, the host names 
must be equal without regard to case; or both host names equal to null. 

Since hosts comparison requires name resolution, this operation is a blocking 
operation. 

Note: The defined behavior forequalsis known to be inconsistent with virtual 
hosting in HTTP. 


    obj - the URL to compare against. 

    Returns: {@code true} if the objects are the same; {@code false} otherwise. 

*java.net.URL.getAuthority()*

public |java.lang.String| getAuthority()

Gets the authority part of thisURL. 



    Returns: the authority part of this {@code URL} 

*java.net.URL.getContent()*

public final |java.lang.Object| getContent()
  throws |java.io.IOException|
         
Gets the contents of this URL. This method is a shorthand for: 

openConnection().getContent() 



    Returns: the contents of this URL. 

*java.net.URL.getContent(Class[])*

public final |java.lang.Object| getContent(java.lang.Class[] classes)
  throws |java.io.IOException|
         
Gets the contents of this URL. This method is a shorthand for: 

openConnection().getContent(Class[]) 


    classes - an array of Java types 

    Returns: the content object of this URL that is the first match of the types specified 
             in the classes array. null if none of the requested types are 
             supported. 

*java.net.URL.getDefaultPort()*

public int getDefaultPort()

Gets the default port number of the protocol associated with thisURL. If the 
URL scheme or the URLStreamHandler for the URL do not define a default port 
number, then -1 is returned. 



    Returns: the port number 

*java.net.URL.getFile()*

public |java.lang.String| getFile()

Gets the file name of thisURL. The returned file portion will be the same as 
getPath(), plus the concatenation of the value of getQuery(), if any. If there 
is no query portion, this method and getPath() will return identical results. 



    Returns: the file name of this {@code URL}, or an empty string if one does not exist 

*java.net.URL.getHost()*

public |java.lang.String| getHost()

Gets the host name of thisURL, if applicable. The format of the host conforms 
to RFC 2732, i.e. for a literal IPv6 address, this method will return the IPv6 
address enclosed in square brackets ('['and']'). 



    Returns: the host name of this {@code URL}. 

*java.net.URL.getPath()*

public |java.lang.String| getPath()

Gets the path part of thisURL. 



    Returns: the path part of this {@code URL}, or an empty string if one does not exist 

*java.net.URL.getPort()*

public int getPort()

Gets the port number of thisURL. 



    Returns: the port number, or -1 if the port is not set 

*java.net.URL.getProtocol()*

public |java.lang.String| getProtocol()

Gets the protocol name of thisURL. 



    Returns: the protocol of this {@code URL}. 

*java.net.URL.getQuery()*

public |java.lang.String| getQuery()

Gets the query part of thisURL. 



    Returns: the query part of this {@code URL}, or null if one does not exist 

*java.net.URL.getRef()*

public |java.lang.String| getRef()

Gets the anchor (also known as the "reference") of thisURL. 



    Returns: the anchor (also known as the "reference") of this {@code URL}, or null if one 
             does not exist 

*java.net.URL.getUserInfo()*

public |java.lang.String| getUserInfo()

Gets the userInfo part of thisURL. 



    Returns: the userInfo part of this {@code URL}, or null if one does not exist 

*java.net.URL.hashCode()*

public synchronized int hashCode()

Creates an integer suitable for hash table indexing. 

The hash code is based upon all the URL components relevant for URL comparison. 
As such, this operation is a blocking operation. 



    Returns: a hash code for this {@code URL}. 

*java.net.URL.openConnection()*

public |java.net.URLConnection| openConnection()
  throws |java.io.IOException|
         
Returns a URLConnection(|java.net.URLConnection|) instance that represents a 
connection to the remote object referred to by theURL. 

A new instance of URLConnection(|java.net.URLConnection|) is created every time 
when invoking the 
URLStreamHandler.openConnection(URL)(|java.net.URLStreamHandler|) method of the 
protocol handler for this URL. 

It should be noted that a URLConnection instance does not establish the actual 
network connection on creation. This will happen only when calling 
URLConnection.connect()(|java.net.URLConnection|) . 

If for the URL's protocol (such as HTTP or JAR), there exists a public, 
specialized URLConnection subclass belonging to one of the following packages 
or one of their subpackages: java.lang, java.io, java.util, java.net, the 
connection returned will be of that subclass. For example, for HTTP an 
HttpURLConnection will be returned, and for JAR a JarURLConnection will be 
returned. 



    Returns: a {@link java.net.URLConnection URLConnection} linking to the URL. 

*java.net.URL.openConnection(Proxy)*

public |java.net.URLConnection| openConnection(java.net.Proxy proxy)
  throws |java.io.IOException|
         
Same as (|java.net.URL|) , except that the connection will be made through the 
specified proxy; Protocol handlers that do not support proxing will ignore the 
proxy parameter and make a normal connection. 

Invoking this method preempts the system's default ProxySelector settings. 


    proxy - the Proxy through which this connection will be made. If direct connection is 
       desired, Proxy.NO_PROXY should be specified. 

    Returns: a {@code URLConnection} to the URL. 

*java.net.URL.openStream()*

public final |java.io.InputStream| openStream()
  throws |java.io.IOException|
         
Opens a connection to thisURLand returns anInputStreamfor reading from that 
connection. This method is a shorthand for: 

openConnection().getInputStream() 



    Returns: an input stream for reading from the URL connection. 

*java.net.URL.sameFile(URL)*

public boolean sameFile(java.net.URL other)

Compares two URLs, excluding the fragment component. 

Returnstrueif thisURLand theotherargument are equal without taking the fragment 
component into consideration. 


    other - the {@code URL} to compare against. 

    Returns: {@code true} if they reference the same remote object; {@code false} otherwise. 

*java.net.URL.setURLStreamHandlerFactory(URLStreamHandlerFactory)*

public static void setURLStreamHandlerFactory(java.net.URLStreamHandlerFactory fac)

Sets an application'sURLStreamHandlerFactory. This method can be called at most 
once in a given Java Virtual Machine. 

TheURLStreamHandlerFactoryinstance is used to construct a stream protocol 
handler from a protocol name. 

If there is a security manager, this method first calls the security 
manager'scheckSetFactorymethod to ensure the operation is allowed. This could 
result in a SecurityException. 


    fac - the desired factory. 

*java.net.URL.toExternalForm()*

public |java.lang.String| toExternalForm()

Constructs a string representation of thisURL. The string is created by calling 
thetoExternalFormmethod of the stream protocol handler for this object. 



    Returns: a string representation of this object. 

*java.net.URL.toString()*

public |java.lang.String| toString()

Constructs a string representation of thisURL. The string is created by calling 
thetoExternalFormmethod of the stream protocol handler for this object. 



    Returns: a string representation of this object. 

*java.net.URL.toURI()*

public |java.net.URI| toURI()
  throws |java.net.URISyntaxException|
         
Returns a (|java.net.URI|) equivalent to this URL. This method functions in the 
same way asnew URI (this.toString()). Note, any URL instance that complies with 
RFC 2396 can be converted to a URI. However, some URLs that are not strictly in 
compliance can not be converted to a URI. 



    Returns: a URI instance equivalent to this URL. 


