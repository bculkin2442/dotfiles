*java.util.concurrent.TimeUnit* *TimeUnit* ATimeUnitrepresents time durations at

public enumTimeUnit
  extends    |java.lang.Enum|

|java.util.concurrent.TimeUnit_Description|
|java.util.concurrent.TimeUnit_Fields|
|java.util.concurrent.TimeUnit_Constructors|
|java.util.concurrent.TimeUnit_Methods|

================================================================================

*java.util.concurrent.TimeUnit_Methods*
|java.util.concurrent.TimeUnit.convert(long,TimeUnit)|Converts the given time d
|java.util.concurrent.TimeUnit.sleep(long)|Performs aThread#sleep(long, int) Th
|java.util.concurrent.TimeUnit.timedJoin(Thread,long)|Performs a timedThread#jo
|java.util.concurrent.TimeUnit.timedWait(Object,long)|Performs a timedObject#wa
|java.util.concurrent.TimeUnit.toDays(long)|Equivalent to#convert(long, TimeUni
|java.util.concurrent.TimeUnit.toHours(long)|Equivalent to#convert(long, TimeUn
|java.util.concurrent.TimeUnit.toMicros(long)|Equivalent to#convert(long, TimeU
|java.util.concurrent.TimeUnit.toMillis(long)|Equivalent to#convert(long, TimeU
|java.util.concurrent.TimeUnit.toMinutes(long)|Equivalent to#convert(long, Time
|java.util.concurrent.TimeUnit.toNanos(long)|Equivalent to#convert(long, TimeUn
|java.util.concurrent.TimeUnit.toSeconds(long)|Equivalent to#convert(long, Time
|java.util.concurrent.TimeUnit.valueOf(String)|
|java.util.concurrent.TimeUnit.values()|

*java.util.concurrent.TimeUnit_Description*

ATimeUnitrepresents time durations at a given unit of granularity and provides 
utility methods to convert across units, and to perform timing and delay 
operations in these units. ATimeUnitdoes not maintain time information, but 
only helps organize and use time representations that may be maintained 
separately across various contexts. A nanosecond is defined as one thousandth 
of a microsecond, a microsecond as one thousandth of a millisecond, a 
millisecond as one thousandth of a second, a minute as sixty seconds, an hour 
as sixty minutes, and a day as twenty four hours. 

ATimeUnitis mainly used to inform time-based methods how a given timing 
parameter should be interpreted. For example, the following code will timeout 
in 50 milliseconds if the lock(|java.util.concurrent.locks.Lock|) is not 
available: 

Lock lock = ...; if (lock.tryLock(50L, TimeUnit.MILLISECONDS)) ... 

while this code will timeout in 50 seconds: 

Lock lock = ...; if (lock.tryLock(50L, TimeUnit.SECONDS)) ... 

Note however, that there is no guarantee that a particular timeout 
implementation will be able to notice the passage of time at the same 
granularity as the givenTimeUnit. 



*java.util.concurrent.TimeUnit.convert(long,TimeUnit)*

public long convert(
  long sourceDuration,
  java.util.concurrent.TimeUnit sourceUnit)

Converts the given time duration in the given unit to this unit. Conversions 
from finer to coarser granularities truncate, so lose precision. For example, 
converting999milliseconds to seconds results in0. Conversions from coarser to 
finer granularities with arguments that would numerically overflow saturate 
toLong.MIN_VALUEif negative orLong.MAX_VALUEif positive. 

For example, to convert 10 minutes to milliseconds, 
use:TimeUnit.MILLISECONDS.convert(10L, TimeUnit.MINUTES) 


    sourceDuration - the time duration in the given {@code sourceUnit} 
    sourceUnit - the unit of the {@code sourceDuration} argument 

    Returns: the converted duration in this unit, or {@code Long.MIN_VALUE} if conversion 
             would negatively overflow, or {@code Long.MAX_VALUE} if it would 
             positively overflow. 

*java.util.concurrent.TimeUnit.sleep(long)*

public void sleep(long timeout)
  throws |java.lang.InterruptedException|
         
Performs a Thread.sleep(|java.lang.Thread|) using this time unit. This is a 
convenience method that converts time arguments into the form required by 
theThread.sleepmethod. 


    timeout - the minimum time to sleep. If less than or equal to zero, do not sleep at all. 

*java.util.concurrent.TimeUnit.timedJoin(Thread,long)*

public void timedJoin(
  java.lang.Thread thread,
  long timeout)
  throws |java.lang.InterruptedException|
         
Performs a timed Thread.join(|java.lang.Thread|) using this time unit. This is 
a convenience method that converts time arguments into the form required by 
theThread.joinmethod. 


    thread - the thread to wait for 
    timeout - the maximum time to wait. If less than or equal to zero, do not wait at all. 

*java.util.concurrent.TimeUnit.timedWait(Object,long)*

public void timedWait(
  java.lang.Object obj,
  long timeout)
  throws |java.lang.InterruptedException|
         
Performs a timed Object.wait(|java.lang.Object|) using this time unit. This is 
a convenience method that converts timeout arguments into the form required by 
theObject.waitmethod. 

For example, you could implement a blockingpollmethod (see 
BlockingQueue.poll(|java.util.concurrent.BlockingQueue|) ) using: 

public synchronized Object poll(long timeout, TimeUnit unit) throws 
InterruptedException { while (empty) { unit.timedWait(this, timeout); ... } } 


    obj - the object to wait on 
    timeout - the maximum time to wait. If less than or equal to zero, do not wait at all. 

*java.util.concurrent.TimeUnit.toDays(long)*

public long toDays(long duration)

Equivalent to DAYS.convert(duration, this)(|java.util.concurrent.TimeUnit|) . 


    duration - the duration 

    Returns: the converted duration 

*java.util.concurrent.TimeUnit.toHours(long)*

public long toHours(long duration)

Equivalent to HOURS.convert(duration, this)(|java.util.concurrent.TimeUnit|) . 


    duration - the duration 

    Returns: the converted duration, or {@code Long.MIN_VALUE} if conversion would 
             negatively overflow, or {@code Long.MAX_VALUE} if it would 
             positively overflow. 

*java.util.concurrent.TimeUnit.toMicros(long)*

public long toMicros(long duration)

Equivalent to MICROSECONDS.convert(duration, 
this)(|java.util.concurrent.TimeUnit|) . 


    duration - the duration 

    Returns: the converted duration, or {@code Long.MIN_VALUE} if conversion would 
             negatively overflow, or {@code Long.MAX_VALUE} if it would 
             positively overflow. 

*java.util.concurrent.TimeUnit.toMillis(long)*

public long toMillis(long duration)

Equivalent to MILLISECONDS.convert(duration, 
this)(|java.util.concurrent.TimeUnit|) . 


    duration - the duration 

    Returns: the converted duration, or {@code Long.MIN_VALUE} if conversion would 
             negatively overflow, or {@code Long.MAX_VALUE} if it would 
             positively overflow. 

*java.util.concurrent.TimeUnit.toMinutes(long)*

public long toMinutes(long duration)

Equivalent to MINUTES.convert(duration, this)(|java.util.concurrent.TimeUnit|) 
. 


    duration - the duration 

    Returns: the converted duration, or {@code Long.MIN_VALUE} if conversion would 
             negatively overflow, or {@code Long.MAX_VALUE} if it would 
             positively overflow. 

*java.util.concurrent.TimeUnit.toNanos(long)*

public long toNanos(long duration)

Equivalent to NANOSECONDS.convert(duration, 
this)(|java.util.concurrent.TimeUnit|) . 


    duration - the duration 

    Returns: the converted duration, or {@code Long.MIN_VALUE} if conversion would 
             negatively overflow, or {@code Long.MAX_VALUE} if it would 
             positively overflow. 

*java.util.concurrent.TimeUnit.toSeconds(long)*

public long toSeconds(long duration)

Equivalent to SECONDS.convert(duration, this)(|java.util.concurrent.TimeUnit|) 
. 


    duration - the duration 

    Returns: the converted duration, or {@code Long.MIN_VALUE} if conversion would 
             negatively overflow, or {@code Long.MAX_VALUE} if it would 
             positively overflow. 

*java.util.concurrent.TimeUnit.valueOf(String)*

public static |java.util.concurrent.TimeUnit| valueOf(java.lang.String name)





*java.util.concurrent.TimeUnit.values()*

public static |java.util.concurrent.TimeUnit|[] values()






