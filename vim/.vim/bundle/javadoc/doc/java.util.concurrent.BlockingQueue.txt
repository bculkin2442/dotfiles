*java.util.concurrent.BlockingQueue* *BlockingQueue* Ajava.util.Queuethat additi

public interface interface BlockingQueue<E>

  implements |java.util.Queue|

|java.util.concurrent.BlockingQueue_Description|
|java.util.concurrent.BlockingQueue_Fields|
|java.util.concurrent.BlockingQueue_Constructors|
|java.util.concurrent.BlockingQueue_Methods|

================================================================================

*java.util.concurrent.BlockingQueue_Methods*
|java.util.concurrent.BlockingQueue.add(E)|Inserts the specified element into t
|java.util.concurrent.BlockingQueue.contains(Object)|Returnstrueif this queue c
|java.util.concurrent.BlockingQueue.drainTo(Collection<?superE>)|Removes all av
|java.util.concurrent.BlockingQueue.drainTo(Collection<?superE>,int)|Removes at
|java.util.concurrent.BlockingQueue.offer(E)|Inserts the specified element into
|java.util.concurrent.BlockingQueue.offer(E,long,TimeUnit)|Inserts the specifie
|java.util.concurrent.BlockingQueue.poll(long,TimeUnit)|Retrieves and removes t
|java.util.concurrent.BlockingQueue.put(E)|Inserts the specified element into t
|java.util.concurrent.BlockingQueue.remainingCapacity()|Returns the number of a
|java.util.concurrent.BlockingQueue.remove(Object)|Removes a single instance of
|java.util.concurrent.BlockingQueue.take()|Retrieves and removes the head of th

*java.util.concurrent.BlockingQueue_Description*

A (|java.util.Queue|) that additionally supports operations that wait for the 
queue to become non-empty when retrieving an element, and wait for space to 
become available in the queue when storing an element. 

BlockingQueuemethods come in four forms, with different ways of handling 
operations that cannot be satisfied immediately, but may be satisfied at some 
point in the future: one throws an exception, the second returns a special 
value (eithernullorfalse, depending on the operation), the third blocks the 
current thread indefinitely until the operation can succeed, and the fourth 
blocks for only a given maximum time limit before giving up. These methods are 
summarized in the following table: 

Summary of BlockingQueue methods 

Throws exception Special value Blocks Times out 

Insert add(e)(|java.util.concurrent.BlockingQueue|) 
offer(e)(|java.util.concurrent.BlockingQueue|) 
put(e)(|java.util.concurrent.BlockingQueue|) offer(e, time, 
unit)(|java.util.concurrent.BlockingQueue|) 

Remove remove()(|java.util.concurrent.BlockingQueue|) 
poll()(|java.util.concurrent.BlockingQueue|) 
take()(|java.util.concurrent.BlockingQueue|) poll(time, 
unit)(|java.util.concurrent.BlockingQueue|) 

Examine element()(|java.util.concurrent.BlockingQueue|) 
peek()(|java.util.concurrent.BlockingQueue|) not applicable not applicable 



ABlockingQueuedoes not acceptnullelements. Implementations 
throwNullPointerExceptionon attempts toadd,putorofferanull. Anullis used as a 
sentinel value to indicate failure ofpolloperations. 

ABlockingQueuemay be capacity bounded. At any given time it may have 
aremainingCapacitybeyond which no additional elements can beputwithout 
blocking. ABlockingQueuewithout any intrinsic capacity constraints always 
reports a remaining capacity ofInteger.MAX_VALUE. 

BlockingQueueimplementations are designed to be used primarily for 
producer-consumer queues, but additionally support the (|java.util.Collection|) 
interface. So, for example, it is possible to remove an arbitrary element from 
a queue usingremove(x). However, such operations are in general not performed 
very efficiently, and are intended for only occasional use, such as when a 
queued message is cancelled. 

BlockingQueueimplementations are thread-safe. All queuing methods achieve their 
effects atomically using internal locks or other forms of concurrency control. 
However, the bulk Collection 
operationsaddAll,containsAll,retainAllandremoveAllare not necessarily performed 
atomically unless specified otherwise in an implementation. So it is possible, 
for example, foraddAll(c)to fail (throwing an exception) after adding only some 
of the elements inc. 

ABlockingQueuedoes not intrinsically support any kind of close or shutdown 
operation to indicate that no more items will be added. The needs and usage of 
such features tend to be implementation-dependent. For example, a common tactic 
is for producers to insert special end-of-stream or poison objects, that are 
interpreted accordingly when taken by consumers. 

Usage example, based on a typical producer-consumer scenario. Note that 
aBlockingQueuecan safely be used with multiple producers and multiple 
consumers. 

class Producer implements Runnable { private final BlockingQueue queue; 
Producer(BlockingQueue q) { queue = q; } public void run() { try { while (true) 
{ queue.put(produce()); } } catch (InterruptedException ex) { ... handle ...} } 
Object produce() { ... } } 

class Consumer implements Runnable { private final BlockingQueue queue; 
Consumer(BlockingQueue q) { queue = q; } public void run() { try { while (true) 
{ consume(queue.take()); } } catch (InterruptedException ex) { ... handle ...} 
} void consume(Object x) { ... } } 

class Setup { void main() { BlockingQueue q = new SomeQueueImplementation(); 
Producer p = new Producer(q); Consumer c1 = new Consumer(q); Consumer c2 = new 
Consumer(q); new Thread(p).start(); new Thread(c1).start(); new 
Thread(c2).start(); } } 

Memory consistency effects: As with other concurrent collections, actions in a 
thread prior to placing an object into aBlockingQueuehappen-before actions 
subsequent to the access or removal of that element from theBlockingQueuein 
another thread. 

This interface is a member of the <a 
href="/../technotes/guides/collections/index.html"> Java Collections Framework. 



*java.util.concurrent.BlockingQueue.add(E)*

public boolean add(E e)

Inserts the specified element into this queue if it is possible to do so 
immediately without violating capacity restrictions, returningtrueupon success 
and throwing anIllegalStateExceptionif no space is currently available. When 
using a capacity-restricted queue, it is generally preferable to use 
offer(|java.util.concurrent.BlockingQueue|) . 


    e - the element to add 

    Returns: {@code true} (as specified by {@link Collection#add}) 

*java.util.concurrent.BlockingQueue.contains(Object)*

public boolean contains(java.lang.Object o)

Returnstrueif this queue contains the specified element. More formally, 
returnstrueif and only if this queue contains at least one elementesuch 
thato.equals(e). 


    o - object to be checked for containment in this queue 

    Returns: {@code true} if this queue contains the specified element 

*java.util.concurrent.BlockingQueue.drainTo(Collection<?superE>)*

public int drainTo(java.util.Collection<? super E> c)

Removes all available elements from this queue and adds them to the given 
collection. This operation may be more efficient than repeatedly polling this 
queue. A failure encountered while attempting to add elements to collectioncmay 
result in elements being in neither, either or both collections when the 
associated exception is thrown. Attempts to drain a queue to itself result 
inIllegalArgumentException. Further, the behavior of this operation is 
undefined if the specified collection is modified while the operation is in 
progress. 


    c - the collection to transfer elements into 

    Returns: the number of elements transferred 

*java.util.concurrent.BlockingQueue.drainTo(Collection<?superE>,int)*

public int drainTo(
  java.util.Collection<? super E> c,
  int maxElements)

Removes at most the given number of available elements from this queue and adds 
them to the given collection. A failure encountered while attempting to add 
elements to collectioncmay result in elements being in neither, either or both 
collections when the associated exception is thrown. Attempts to drain a queue 
to itself result inIllegalArgumentException. Further, the behavior of this 
operation is undefined if the specified collection is modified while the 
operation is in progress. 


    c - the collection to transfer elements into 
    maxElements - the maximum number of elements to transfer 

    Returns: the number of elements transferred 

*java.util.concurrent.BlockingQueue.offer(E)*

public boolean offer(E e)

Inserts the specified element into this queue if it is possible to do so 
immediately without violating capacity restrictions, returningtrueupon success 
andfalseif no space is currently available. When using a capacity-restricted 
queue, this method is generally preferable to 
(|java.util.concurrent.BlockingQueue|) , which can fail to insert an element 
only by throwing an exception. 


    e - the element to add 

    Returns: {@code true} if the element was added to this queue, else {@code false} 

*java.util.concurrent.BlockingQueue.offer(E,long,TimeUnit)*

public boolean offer(
  E e,
  long timeout,
  java.util.concurrent.TimeUnit unit)
  throws |java.lang.InterruptedException|
         
Inserts the specified element into this queue, waiting up to the specified wait 
time if necessary for space to become available. 


    e - the element to add 
    timeout - how long to wait before giving up, in units of {@code unit} 
    unit - a {@code TimeUnit} determining how to interpret the {@code timeout} parameter 

    Returns: {@code true} if successful, or {@code false} if the specified waiting time 
             elapses before space is available 

*java.util.concurrent.BlockingQueue.poll(long,TimeUnit)*

public |E| poll(
  long timeout,
  java.util.concurrent.TimeUnit unit)
  throws |java.lang.InterruptedException|
         
Retrieves and removes the head of this queue, waiting up to the specified wait 
time if necessary for an element to become available. 


    timeout - how long to wait before giving up, in units of {@code unit} 
    unit - a {@code TimeUnit} determining how to interpret the {@code timeout} parameter 

    Returns: the head of this queue, or {@code null} if the specified waiting time elapses 
             before an element is available 

*java.util.concurrent.BlockingQueue.put(E)*

public void put(E e)
  throws |java.lang.InterruptedException|
         
Inserts the specified element into this queue, waiting if necessary for space 
to become available. 


    e - the element to add 

*java.util.concurrent.BlockingQueue.remainingCapacity()*

public int remainingCapacity()

Returns the number of additional elements that this queue can ideally (in the 
absence of memory or resource constraints) accept without blocking, 
orInteger.MAX_VALUEif there is no intrinsic limit. 

Note that you cannot always tell if an attempt to insert an element will 
succeed by inspectingremainingCapacitybecause it may be the case that another 
thread is about to insert or remove an element. 



    Returns: the remaining capacity 

*java.util.concurrent.BlockingQueue.remove(Object)*

public boolean remove(java.lang.Object o)

Removes a single instance of the specified element from this queue, if it is 
present. More formally, removes an elementesuch thato.equals(e), if this queue 
contains one or more such elements. Returnstrueif this queue contained the 
specified element (or equivalently, if this queue changed as a result of the 
call). 


    o - element to be removed from this queue, if present 

    Returns: {@code true} if this queue changed as a result of the call 

*java.util.concurrent.BlockingQueue.take()*

public |E| take()
  throws |java.lang.InterruptedException|
         
Retrieves and removes the head of this queue, waiting if necessary until an 
element becomes available. 



    Returns: the head of this queue 


