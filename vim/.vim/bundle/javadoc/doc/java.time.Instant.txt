*java.time.Instant* *Instant* An instantaneous point on the time-line.

public final class Instant
  extends    |java.lang.Object|
  implements |java.time.temporal.Temporal|
             |java.time.temporal.TemporalAdjuster|
             |java.lang.Comparable|
             |java.io.Serializable|

|java.time.Instant_Description|
|java.time.Instant_Fields|
|java.time.Instant_Constructors|
|java.time.Instant_Methods|

================================================================================

*java.time.Instant_Fields*
|java.time.Instant_java.time.Instant.EPOCH|
|java.time.Instant_java.time.Instant.MAX|
|java.time.Instant_java.time.Instant.MIN|

*java.time.Instant_Methods*
|java.time.Instant.adjustInto(Temporal)|Adjusts the specified temporal object t
|java.time.Instant.atOffset(ZoneOffset)|Combines this instant with an offset to
|java.time.Instant.atZone(ZoneId)|Combines this instant with a time-zone to cre
|java.time.Instant.compareTo(Instant)|Compares this instant to the specified in
|java.time.Instant.equals(Object)|Checks if this instant is equal to the specif
|java.time.Instant.from(TemporalAccessor)|Obtains an instance ofInstantfrom a t
|java.time.Instant.get(TemporalField)|Gets the value of the specified field fro
|java.time.Instant.getEpochSecond()|Gets the number of seconds from the Java ep
|java.time.Instant.getLong(TemporalField)|Gets the value of the specified field
|java.time.Instant.getNano()|Gets the number of nanoseconds, later along the ti
|java.time.Instant.hashCode()|Returns a hash code for this instant.
|java.time.Instant.isAfter(Instant)|Checks if this instant is after the specifi
|java.time.Instant.isBefore(Instant)|Checks if this instant is before the speci
|java.time.Instant.isSupported(TemporalField)|Checks if the specified field is 
|java.time.Instant.isSupported(TemporalUnit)|Checks if the specified unit is su
|java.time.Instant.minus(long,TemporalUnit)|Returns a copy of this instant with
|java.time.Instant.minus(TemporalAmount)|Returns a copy of this instant with th
|java.time.Instant.minusMillis(long)|Returns a copy of this instant with the sp
|java.time.Instant.minusNanos(long)|Returns a copy of this instant with the spe
|java.time.Instant.minusSeconds(long)|Returns a copy of this instant with the s
|java.time.Instant.now()|Obtains the current instant from the system clock.
|java.time.Instant.now(Clock)|Obtains the current instant from the specified cl
|java.time.Instant.ofEpochMilli(long)|Obtains an instance ofInstantusing millis
|java.time.Instant.ofEpochSecond(long)|Obtains an instance ofInstantusing secon
|java.time.Instant.ofEpochSecond(long,long)|Obtains an instance ofInstantusing 
|java.time.Instant.parse(CharSequence)|Obtains an instance ofInstantfrom a text
|java.time.Instant.plus(long,TemporalUnit)|Returns a copy of this instant with 
|java.time.Instant.plus(TemporalAmount)|Returns a copy of this instant with the
|java.time.Instant.plusMillis(long)|Returns a copy of this instant with the spe
|java.time.Instant.plusNanos(long)|Returns a copy of this instant with the spec
|java.time.Instant.plusSeconds(long)|Returns a copy of this instant with the sp
|java.time.Instant.query(TemporalQuery<R>)|Queries this instant using the speci
|java.time.Instant.range(TemporalField)|Gets the range of valid values for the 
|java.time.Instant.toEpochMilli()|Converts this instant to the number of millis
|java.time.Instant.toString()|A string representation of this instant using ISO
|java.time.Instant.truncatedTo(TemporalUnit)|Returns a copy of thisInstanttrunc
|java.time.Instant.until(Temporal,TemporalUnit)|Calculates the amount of time u
|java.time.Instant.with(TemporalAdjuster)|Returns an adjusted copy of this inst
|java.time.Instant.with(TemporalField,long)|Returns a copy of this instant with

*java.time.Instant_Description*

An instantaneous point on the time-line. 

This class models a single instantaneous point on the time-line. This might be 
used to record event time-stamps in the application. 

For practicality, the instant is stored with some constraints. The measurable 
time-line is restricted to the number of seconds that can be held in along. 
This is greater than the current estimated age of the universe. The instant is 
stored to nanosecond resolution. 

The range of an instant requires the storage of a number larger than along. To 
achieve this, the class stores alongrepresenting epoch-seconds and 
anintrepresenting nanosecond-of-second, which will always be between 0 and 
999,999,999. The epoch-seconds are measured from the standard Java epoch 
of1970-01-01T00:00:00Zwhere instants after the epoch have positive values, and 
earlier instants have negative values. For both the epoch-second and nanosecond 
parts, a larger value is always later on the time-line than a smaller value. 

Time-scale 

The length of the solar day is the standard way that humans measure time. This 
has traditionally been subdivided into 24 hours of 60 minutes of 60 seconds, 
forming a 86400 second day. 

Modern timekeeping is based on atomic clocks which precisely define an SI 
second relative to the transitions of a Caesium atom. The length of an SI 
second was defined to be very close to the 86400th fraction of a day. 

Unfortunately, as the Earth rotates the length of the day varies. In addition, 
over time the average length of the day is getting longer as the Earth slows. 
As a result, the length of a solar day in 2012 is slightly longer than 86400 SI 
seconds. The actual length of any given day and the amount by which the Earth 
is slowing are not predictable and can only be determined by measurement. The 
UT1 time-scale captures the accurate length of day, but is only available some 
time after the day has completed. 

The UTC time-scale is a standard approach to bundle up all the additional 
fractions of a second from UT1 into whole seconds, known as leap-seconds. A 
leap-second may be added or removed depending on the Earth's rotational 
changes. As such, UTC permits a day to have 86399 SI seconds or 86401 SI 
seconds where necessary in order to keep the day aligned with the Sun. 

The modern UTC time-scale was introduced in 1972, introducing the concept of 
whole leap-seconds. Between 1958 and 1972, the definition of UTC was complex, 
with minor sub-second leaps and alterations to the length of the notional 
second. As of 2012, discussions are underway to change the definition of UTC 
again, with the potential to remove leap seconds or introduce other changes. 

Given the complexity of accurate timekeeping described above, this Java API 
defines its own time-scale, the Java Time-Scale. 

The Java Time-Scale divides each calendar day into exactly 86400 subdivisions, 
known as seconds. These seconds may differ from the SI second. It closely 
matches the de facto international civil time scale, the definition of which 
changes from time to time. 

The Java Time-Scale has slightly different definitions for different segments 
of the time-line, each based on the consensus international time scale that is 
used as the basis for civil time. Whenever the internationally-agreed time 
scale is modified or replaced, a new segment of the Java Time-Scale must be 
defined for it. Each segment must meet these requirements: 

the Java Time-Scale shall closely match the underlying international civil time 
scale; the Java Time-Scale shall exactly match the international civil time 
scale at noon each day; the Java Time-Scale shall have a precisely-defined 
relationship to the international civil time scale. 

There are currently, as of 2013, two segments in the Java time-scale. 

For the segment from 1972-11-03 (exact boundary discussed below) until further 
notice, the consensus international time scale is UTC (with leap seconds). In 
this segment, the Java Time-Scale is identical to UTC-SLS. This is identical to 
UTC on days that do not have a leap second. On days that do have a leap second, 
the leap second is spread equally over the last 1000 seconds of the day, 
maintaining the appearance of exactly 86400 seconds per day. 

For the segment prior to 1972-11-03, extending back arbitrarily far, the 
consensus international time scale is defined to be UT1, applied proleptically, 
which is equivalent to the (mean) solar time on the prime meridian (Greenwich). 
In this segment, the Java Time-Scale is identical to the consensus 
international time scale. The exact boundary between the two segments is the 
instant where UT1 = UTC between 1972-11-03T00:00 and 1972-11-04T12:00. 

Implementations of the Java time-scale using the JSR-310 API are not required 
to provide any clock that is sub-second accurate, or that progresses 
monotonically or smoothly. Implementations are therefore not required to 
actually perform the UTC-SLS slew or to otherwise be aware of leap seconds. 
JSR-310 does, however, require that implementations must document the approach 
they use when defining a clock representing the current instant. See 
(|java.time.Clock|) for details on the available clocks. 

The Java time-scale is used for all date-time classes. This 
includesInstant,LocalDate,LocalTime,OffsetDateTime,ZonedDateTimeandDuration. 

This is a <a href="/java/lang/doc-files/ValueBased.html">value-based class; use 
of identity-sensitive operations (including reference equality (==), identity 
hash code, or synchronization) on instances ofInstantmay have unpredictable 
results and should be avoided. Theequalsmethod should be used for comparisons. 



*java.time.Instant_java.time.Instant.EPOCH*

Constant for the 1970-01-01T00:00:00Z epoch instant. 


*java.time.Instant_java.time.Instant.MAX*

The maximum supportedInstant, '1000000000-12-31T23:59:59.999999999Z'. This 
could be used by an application as a "far future" instant. 

This is one year later than the maximumLocalDateTime. This provides sufficient 
values to handle the range ofZoneOffsetwhich affect the instant in addition to 
the local date-time. The value is also chosen such that the value of the year 
fits in anint. 


*java.time.Instant_java.time.Instant.MIN*

The minimum supportedInstant, '-1000000000-01-01T00:00Z'. This could be used by 
an application as a "far past" instant. 

This is one year earlier than the minimumLocalDateTime. This provides 
sufficient values to handle the range ofZoneOffsetwhich affect the instant in 
addition to the local date-time. The value is also chosen such that the value 
of the year fits in anint. 



*java.time.Instant.adjustInto(Temporal)*

public |java.time.temporal.Temporal| adjustInto(java.time.temporal.Temporal temporal)

Adjusts the specified temporal object to have this instant. 

This returns a temporal object of the same observable type as the input with 
the instant changed to be the same as this. 

The adjustment is equivalent to using (|java.time.temporal.Temporal|) twice, 
passing (|java.time.temporal.ChronoField|) and 
(|java.time.temporal.ChronoField|) as the fields. 

In most cases, it is clearer to reverse the calling pattern by using 
(|java.time.temporal.Temporal|) : 

// these two lines are equivalent, but the second approach is recommended 
temporal = thisInstant.adjustInto(temporal); temporal = 
temporal.with(thisInstant); 

This instance is immutable and unaffected by this method call. 


    temporal - the target object to be adjusted, not null 

    Returns: the adjusted object, not null 

*java.time.Instant.atOffset(ZoneOffset)*

public |java.time.OffsetDateTime| atOffset(java.time.ZoneOffset offset)

Combines this instant with an offset to create anOffsetDateTime. 

This returns anOffsetDateTimeformed from this instant at the specified offset 
from UTC/Greenwich. An exception will be thrown if the instant is too large to 
fit into an offset date-time. 

This method is equivalent to OffsetDateTime.ofInstant(this, 
offset)(|java.time.OffsetDateTime|) . 


    offset - the offset to combine with, not null 

    Returns: the offset date-time formed from this instant and the specified offset, not 
             null 

*java.time.Instant.atZone(ZoneId)*

public |java.time.ZonedDateTime| atZone(java.time.ZoneId zone)

Combines this instant with a time-zone to create aZonedDateTime. 

This returns anZonedDateTimeformed from this instant at the specified 
time-zone. An exception will be thrown if the instant is too large to fit into 
a zoned date-time. 

This method is equivalent to ZonedDateTime.ofInstant(this, 
zone)(|java.time.ZonedDateTime|) . 


    zone - the zone to combine with, not null 

    Returns: the zoned date-time formed from this instant and the specified zone, not null 

*java.time.Instant.compareTo(Instant)*

public int compareTo(java.time.Instant otherInstant)

Compares this instant to the specified instant. 

The comparison is based on the time-line position of the instants. It is 
"consistent with equals", as defined by (|java.lang.Comparable|) . 


    otherInstant - the other instant to compare to, not null 

    Returns: the comparator value, negative if less, positive if greater 

*java.time.Instant.equals(Object)*

public boolean equals(java.lang.Object otherInstant)

Checks if this instant is equal to the specified instant. 

The comparison is based on the time-line position of the instants. 


    otherInstant - the other instant, null returns false 

    Returns: true if the other instant is equal to this one 

*java.time.Instant.from(TemporalAccessor)*

public static |java.time.Instant| from(java.time.temporal.TemporalAccessor temporal)

Obtains an instance ofInstantfrom a temporal object. 

This obtains an instant based on the specified temporal. 
ATemporalAccessorrepresents an arbitrary set of date and time information, 
which this factory converts to an instance ofInstant. 

The conversion extracts the INSTANT_SECONDS(|java.time.temporal.ChronoField|) 
and NANO_OF_SECOND(|java.time.temporal.ChronoField|) fields. 

This method matches the signature of the functional interface 
(|java.time.temporal.TemporalQuery|) allowing it to be used as a query via 
method reference,Instant::from. 


    temporal - the temporal object to convert, not null 

    Returns: the instant, not null 

*java.time.Instant.get(TemporalField)*

public int get(java.time.temporal.TemporalField field)

Gets the value of the specified field from this instant as anint. 

This queries this instant for the value for the specified field. The returned 
value will always be within the valid range of values for the field. If it is 
not possible to return the value, because the field is not supported or for 
some other reason, an exception is thrown. 

If the field is a (|java.time.temporal.ChronoField|) then the query is 
implemented here. The supported fields(|java.time.Instant|) will return valid 
values based on this date-time, exceptINSTANT_SECONDSwhich is too large to fit 
in anintand throws aDateTimeException. All otherChronoFieldinstances will throw 
anUnsupportedTemporalTypeException. 

If the field is not aChronoField, then the result of this method is obtained by 
invokingTemporalField.getFrom(TemporalAccessor)passingthisas the argument. 
Whether the value can be obtained, and what the value represents, is determined 
by the field. 


    field - the field to get, not null 

    Returns: the value for the field 

*java.time.Instant.getEpochSecond()*

public long getEpochSecond()

Gets the number of seconds from the Java epoch of 1970-01-01T00:00:00Z. 

The epoch second count is a simple incrementing count of seconds where second 0 
is 1970-01-01T00:00:00Z. The nanosecond part of the day is returned 
bygetNanosOfSecond. 



    Returns: the seconds from the epoch of 1970-01-01T00:00:00Z 

*java.time.Instant.getLong(TemporalField)*

public long getLong(java.time.temporal.TemporalField field)

Gets the value of the specified field from this instant as along. 

This queries this instant for the value for the specified field. If it is not 
possible to return the value, because the field is not supported or for some 
other reason, an exception is thrown. 

If the field is a (|java.time.temporal.ChronoField|) then the query is 
implemented here. The supported fields(|java.time.Instant|) will return valid 
values based on this date-time. All otherChronoFieldinstances will throw 
anUnsupportedTemporalTypeException. 

If the field is not aChronoField, then the result of this method is obtained by 
invokingTemporalField.getFrom(TemporalAccessor)passingthisas the argument. 
Whether the value can be obtained, and what the value represents, is determined 
by the field. 


    field - the field to get, not null 

    Returns: the value for the field 

*java.time.Instant.getNano()*

public int getNano()

Gets the number of nanoseconds, later along the time-line, from the start of 
the second. 

The nanosecond-of-second value measures the total number of nanoseconds from 
the second returned bygetEpochSecond. 



    Returns: the nanoseconds within the second, always positive, never exceeds 999,999,999 

*java.time.Instant.hashCode()*

public int hashCode()

Returns a hash code for this instant. 



    Returns: a suitable hash code 

*java.time.Instant.isAfter(Instant)*

public boolean isAfter(java.time.Instant otherInstant)

Checks if this instant is after the specified instant. 

The comparison is based on the time-line position of the instants. 


    otherInstant - the other instant to compare to, not null 

    Returns: true if this instant is after the specified instant 

*java.time.Instant.isBefore(Instant)*

public boolean isBefore(java.time.Instant otherInstant)

Checks if this instant is before the specified instant. 

The comparison is based on the time-line position of the instants. 


    otherInstant - the other instant to compare to, not null 

    Returns: true if this instant is before the specified instant 

*java.time.Instant.isSupported(TemporalField)*

public boolean isSupported(java.time.temporal.TemporalField field)

Checks if the specified field is supported. 

This checks if this instant can be queried for the specified field. If false, 
then calling the range(|java.time.Instant|) , get(|java.time.Instant|) and 
(|java.time.Instant|) methods will throw an exception. 

If the field is a (|java.time.temporal.ChronoField|) then the query is 
implemented here. The supported fields are: 

NANO_OF_SECONDMICRO_OF_SECONDMILLI_OF_SECONDINSTANT_SECONDS All 
otherChronoFieldinstances will return false. 

If the field is not aChronoField, then the result of this method is obtained by 
invokingTemporalField.isSupportedBy(TemporalAccessor)passingthisas the 
argument. Whether the field is supported is determined by the field. 


    field - the field to check, null returns false 

    Returns: true if the field is supported on this instant, false if not 

*java.time.Instant.isSupported(TemporalUnit)*

public boolean isSupported(java.time.temporal.TemporalUnit unit)

Checks if the specified unit is supported. 

This checks if the specified unit can be added to, or subtracted from, this 
date-time. If false, then calling the (|java.time.Instant|) and 
minus(|java.time.Instant|) methods will throw an exception. 

If the unit is a (|java.time.temporal.ChronoUnit|) then the query is 
implemented here. The supported units are: 

NANOSMICROSMILLISSECONDSMINUTESHOURSHALF_DAYSDAYS All otherChronoUnitinstances 
will return false. 

If the unit is not aChronoUnit, then the result of this method is obtained by 
invokingTemporalUnit.isSupportedBy(Temporal)passingthisas the argument. Whether 
the unit is supported is determined by the unit. 


    unit - the unit to check, null returns false 

    Returns: true if the unit can be added/subtracted, false if not 

*java.time.Instant.minus(long,TemporalUnit)*

public |java.time.Instant| minus(
  long amountToSubtract,
  java.time.temporal.TemporalUnit unit)

Returns a copy of this instant with the specified amount subtracted. 

This returns aInstant, based on this one, with the amount in terms of the unit 
subtracted. If it is not possible to subtract the amount, because the unit is 
not supported or for some other reason, an exception is thrown. 

This method is equivalent to (|java.time.Instant|) with the amount negated. See 
that method for a full description of how addition, and thus subtraction, 
works. 

This instance is immutable and unaffected by this method call. 


    amountToSubtract - the amount of the unit to subtract from the result, may be negative 
    unit - the unit of the amount to subtract, not null 

    Returns: an {@code Instant} based on this instant with the specified amount subtracted, 
             not null 

*java.time.Instant.minus(TemporalAmount)*

public |java.time.Instant| minus(java.time.temporal.TemporalAmount amountToSubtract)

Returns a copy of this instant with the specified amount subtracted. 

This returns anInstant, based on this one, with the specified amount 
subtracted. The amount is typically (|java.time.Duration|) but may be any other 
type implementing the (|java.time.temporal.TemporalAmount|) interface. 

The calculation is delegated to the amount object by calling 
(|java.time.temporal.TemporalAmount|) . The amount implementation is free to 
implement the subtraction in any way it wishes, however it typically calls back 
to (|java.time.Instant|) . Consult the documentation of the amount 
implementation to determine if it can be successfully subtracted. 

This instance is immutable and unaffected by this method call. 


    amountToSubtract - the amount to subtract, not null 

    Returns: an {@code Instant} based on this instant with the subtraction made, not null 

*java.time.Instant.minusMillis(long)*

public |java.time.Instant| minusMillis(long millisToSubtract)

Returns a copy of this instant with the specified duration in milliseconds 
subtracted. 

This instance is immutable and unaffected by this method call. 


    millisToSubtract - the milliseconds to subtract, positive or negative 

    Returns: an {@code Instant} based on this instant with the specified milliseconds 
             subtracted, not null 

*java.time.Instant.minusNanos(long)*

public |java.time.Instant| minusNanos(long nanosToSubtract)

Returns a copy of this instant with the specified duration in nanoseconds 
subtracted. 

This instance is immutable and unaffected by this method call. 


    nanosToSubtract - the nanoseconds to subtract, positive or negative 

    Returns: an {@code Instant} based on this instant with the specified nanoseconds 
             subtracted, not null 

*java.time.Instant.minusSeconds(long)*

public |java.time.Instant| minusSeconds(long secondsToSubtract)

Returns a copy of this instant with the specified duration in seconds 
subtracted. 

This instance is immutable and unaffected by this method call. 


    secondsToSubtract - the seconds to subtract, positive or negative 

    Returns: an {@code Instant} based on this instant with the specified seconds subtracted, 
             not null 

*java.time.Instant.now()*

public static |java.time.Instant| now()

Obtains the current instant from the system clock. 

This will query the system UTC clock(|java.time.Clock|) to obtain the current 
instant. 

Using this method will prevent the ability to use an alternate time-source for 
testing because the clock is effectively hard-coded. 



    Returns: the current instant using the system clock, not null 

*java.time.Instant.now(Clock)*

public static |java.time.Instant| now(java.time.Clock clock)

Obtains the current instant from the specified clock. 

This will query the specified clock to obtain the current time. 

Using this method allows the use of an alternate clock for testing. The 
alternate clock may be introduced using dependency injection(|java.time.Clock|) 
. 


    clock - the clock to use, not null 

    Returns: the current instant, not null 

*java.time.Instant.ofEpochMilli(long)*

public static |java.time.Instant| ofEpochMilli(long epochMilli)

Obtains an instance ofInstantusing milliseconds from the epoch of 
1970-01-01T00:00:00Z. 

The seconds and nanoseconds are extracted from the specified milliseconds. 


    epochMilli - the number of milliseconds from 1970-01-01T00:00:00Z 

    Returns: an instant, not null 

*java.time.Instant.ofEpochSecond(long)*

public static |java.time.Instant| ofEpochSecond(long epochSecond)

Obtains an instance ofInstantusing seconds from the epoch of 
1970-01-01T00:00:00Z. 

The nanosecond field is set to zero. 


    epochSecond - the number of seconds from 1970-01-01T00:00:00Z 

    Returns: an instant, not null 

*java.time.Instant.ofEpochSecond(long,long)*

public static |java.time.Instant| ofEpochSecond(
  long epochSecond,
  long nanoAdjustment)

Obtains an instance ofInstantusing seconds from the epoch of 
1970-01-01T00:00:00Z and nanosecond fraction of second. 

This method allows an arbitrary number of nanoseconds to be passed in. The 
factory will alter the values of the second and nanosecond in order to ensure 
that the stored nanosecond is in the range 0 to 999,999,999. For example, the 
following will result in the exactly the same instant: 

Instant.ofEpochSecond(3, 1); Instant.ofEpochSecond(4, -999_999_999); 
Instant.ofEpochSecond(2, 1000_000_001); 


    epochSecond - the number of seconds from 1970-01-01T00:00:00Z 
    nanoAdjustment - the nanosecond adjustment to the number of seconds, positive or negative 

    Returns: an instant, not null 

*java.time.Instant.parse(CharSequence)*

public static |java.time.Instant| parse(java.lang.CharSequence text)

Obtains an instance ofInstantfrom a text string such as2007-12-03T10:15:30.00Z. 

The string must represent a valid instant in UTC and is parsed using 
(|java.time.format.DateTimeFormatter|) . 


    text - the text to parse, not null 

    Returns: the parsed instant, not null 

*java.time.Instant.plus(long,TemporalUnit)*

public |java.time.Instant| plus(
  long amountToAdd,
  java.time.temporal.TemporalUnit unit)

Returns a copy of this instant with the specified amount added. 

This returns anInstant, based on this one, with the amount in terms of the unit 
added. If it is not possible to add the amount, because the unit is not 
supported or for some other reason, an exception is thrown. 

If the field is a (|java.time.temporal.ChronoUnit|) then the addition is 
implemented here. The supported fields behave as follows: 

NANOS- Returns aInstantwith the specified number of nanoseconds added. This is 
equivalent to (|java.time.Instant|) . MICROS- Returns aInstantwith the 
specified number of microseconds added. This is equivalent to 
(|java.time.Instant|) with the amount multiplied by 1,000. MILLIS- Returns 
aInstantwith the specified number of milliseconds added. This is equivalent to 
(|java.time.Instant|) with the amount multiplied by 1,000,000. SECONDS- Returns 
aInstantwith the specified number of seconds added. This is equivalent to 
(|java.time.Instant|) . MINUTES- Returns aInstantwith the specified number of 
minutes added. This is equivalent to (|java.time.Instant|) with the amount 
multiplied by 60. HOURS- Returns aInstantwith the specified number of hours 
added. This is equivalent to (|java.time.Instant|) with the amount multiplied 
by 3,600. HALF_DAYS- Returns aInstantwith the specified number of half-days 
added. This is equivalent to (|java.time.Instant|) with the amount multiplied 
by 43,200 (12 hours). DAYS- Returns aInstantwith the specified number of days 
added. This is equivalent to (|java.time.Instant|) with the amount multiplied 
by 86,400 (24 hours). 

All otherChronoUnitinstances will throw anUnsupportedTemporalTypeException. 

If the field is not aChronoUnit, then the result of this method is obtained by 
invokingTemporalUnit.addTo(Temporal, long)passingthisas the argument. In this 
case, the unit determines whether and how to perform the addition. 

This instance is immutable and unaffected by this method call. 


    amountToAdd - the amount of the unit to add to the result, may be negative 
    unit - the unit of the amount to add, not null 

    Returns: an {@code Instant} based on this instant with the specified amount added, not 
             null 

*java.time.Instant.plus(TemporalAmount)*

public |java.time.Instant| plus(java.time.temporal.TemporalAmount amountToAdd)

Returns a copy of this instant with the specified amount added. 

This returns anInstant, based on this one, with the specified amount added. The 
amount is typically (|java.time.Duration|) but may be any other type 
implementing the (|java.time.temporal.TemporalAmount|) interface. 

The calculation is delegated to the amount object by calling 
(|java.time.temporal.TemporalAmount|) . The amount implementation is free to 
implement the addition in any way it wishes, however it typically calls back to 
(|java.time.Instant|) . Consult the documentation of the amount implementation 
to determine if it can be successfully added. 

This instance is immutable and unaffected by this method call. 


    amountToAdd - the amount to add, not null 

    Returns: an {@code Instant} based on this instant with the addition made, not null 

*java.time.Instant.plusMillis(long)*

public |java.time.Instant| plusMillis(long millisToAdd)

Returns a copy of this instant with the specified duration in milliseconds 
added. 

This instance is immutable and unaffected by this method call. 


    millisToAdd - the milliseconds to add, positive or negative 

    Returns: an {@code Instant} based on this instant with the specified milliseconds added, 
             not null 

*java.time.Instant.plusNanos(long)*

public |java.time.Instant| plusNanos(long nanosToAdd)

Returns a copy of this instant with the specified duration in nanoseconds 
added. 

This instance is immutable and unaffected by this method call. 


    nanosToAdd - the nanoseconds to add, positive or negative 

    Returns: an {@code Instant} based on this instant with the specified nanoseconds added, 
             not null 

*java.time.Instant.plusSeconds(long)*

public |java.time.Instant| plusSeconds(long secondsToAdd)

Returns a copy of this instant with the specified duration in seconds added. 

This instance is immutable and unaffected by this method call. 


    secondsToAdd - the seconds to add, positive or negative 

    Returns: an {@code Instant} based on this instant with the specified seconds added, not 
             null 

*java.time.Instant.query(TemporalQuery<R>)*

public |R| query(java.time.temporal.TemporalQuery<R> query)

Queries this instant using the specified query. 

This queries this instant using the specified query strategy object. 
TheTemporalQueryobject defines the logic to be used to obtain the result. Read 
the documentation of the query to understand what the result of this method 
will be. 

The result of this method is obtained by invoking the 
(|java.time.temporal.TemporalQuery|) method on the specified query 
passingthisas the argument. 


    query - the query to invoke, not null 

    Returns: the query result, null may be returned (defined by the query) 

*java.time.Instant.range(TemporalField)*

public |java.time.temporal.ValueRange| range(java.time.temporal.TemporalField field)

Gets the range of valid values for the specified field. 

The range object expresses the minimum and maximum valid values for a field. 
This instant is used to enhance the accuracy of the returned range. If it is 
not possible to return the range, because the field is not supported or for 
some other reason, an exception is thrown. 

If the field is a (|java.time.temporal.ChronoField|) then the query is 
implemented here. The supported fields(|java.time.Instant|) will return 
appropriate range instances. All otherChronoFieldinstances will throw 
anUnsupportedTemporalTypeException. 

If the field is not aChronoField, then the result of this method is obtained by 
invokingTemporalField.rangeRefinedBy(TemporalAccessor)passingthisas the 
argument. Whether the range can be obtained is determined by the field. 


    field - the field to query the range for, not null 

    Returns: the range of valid values for the field, not null 

*java.time.Instant.toEpochMilli()*

public long toEpochMilli()

Converts this instant to the number of milliseconds from the epoch of 
1970-01-01T00:00:00Z. 

If this instant represents a point on the time-line too far in the future or 
past to fit in alongmilliseconds, then an exception is thrown. 

If this instant has greater than millisecond precision, then the conversion 
will drop any excess precision information as though the amount in nanoseconds 
was subject to integer division by one million. 



    Returns: the number of milliseconds since the epoch of 1970-01-01T00:00:00Z 

*java.time.Instant.toString()*

public |java.lang.String| toString()

A string representation of this instant using ISO-8601 representation. 

The format used is the same as (|java.time.format.DateTimeFormatter|) . 



    Returns: an ISO-8601 representation of this instant, not null 

*java.time.Instant.truncatedTo(TemporalUnit)*

public |java.time.Instant| truncatedTo(java.time.temporal.TemporalUnit unit)

Returns a copy of thisInstanttruncated to the specified unit. 

Truncating the instant returns a copy of the original with fields smaller than 
the specified unit set to zero. The fields are calculated on the basis of using 
a UTC offset as seen intoString. For example, truncating with the 
MINUTES(|java.time.temporal.ChronoUnit|) unit will round down to the nearest 
minute, setting the seconds and nanoseconds to zero. 

The unit must have a duration(|java.time.temporal.TemporalUnit|) that divides 
into the length of a standard day without remainder. This includes all supplied 
time units on (|java.time.temporal.ChronoUnit|) and 
DAYS(|java.time.temporal.ChronoUnit|) . Other units throw an exception. 

This instance is immutable and unaffected by this method call. 


    unit - the unit to truncate to, not null 

    Returns: an {@code Instant} based on this instant with the time truncated, not null 

*java.time.Instant.until(Temporal,TemporalUnit)*

public long until(
  java.time.temporal.Temporal endExclusive,
  java.time.temporal.TemporalUnit unit)

Calculates the amount of time until another instant in terms of the specified 
unit. 

This calculates the amount of time between twoInstantobjects in terms of a 
singleTemporalUnit. The start and end points arethisand the specified instant. 
The result will be negative if the end is before the start. The calculation 
returns a whole number, representing the number of complete units between the 
two instants. TheTemporalpassed to this method is converted to aInstantusing 
(|java.time.Instant|) . For example, the amount in days between two dates can 
be calculated usingstartInstant.until(endInstant, SECONDS). 

There are two equivalent ways of using this method. The first is to invoke this 
method. The second is to use (|java.time.temporal.TemporalUnit|) : 

// these two lines are equivalent amount = start.until(end, SECONDS); amount = 
SECONDS.between(start, end); 

The choice should be made based on which makes the code more readable. 

The calculation is implemented in this method for 
(|java.time.temporal.ChronoUnit|) . The 
unitsNANOS,MICROS,MILLIS,SECONDS,MINUTES,HOURS,HALF_DAYSandDAYSare supported. 
OtherChronoUnitvalues will throw an exception. 

If the unit is not aChronoUnit, then the result of this method is obtained by 
invokingTemporalUnit.between(Temporal, Temporal)passingthisas the first 
argument and the converted input temporal as the second argument. 

This instance is immutable and unaffected by this method call. 


    endExclusive - the end date, exclusive, which is converted to an {@code Instant}, not null 
    unit - the unit to measure the amount in, not null 

    Returns: the amount of time between this instant and the end instant 

*java.time.Instant.with(TemporalAdjuster)*

public |java.time.Instant| with(java.time.temporal.TemporalAdjuster adjuster)

Returns an adjusted copy of this instant. 

This returns anInstant, based on this one, with the instant adjusted. The 
adjustment takes place using the specified adjuster strategy object. Read the 
documentation of the adjuster to understand what adjustment will be made. 

The result of this method is obtained by invoking the 
(|java.time.temporal.TemporalAdjuster|) method on the specified adjuster 
passingthisas the argument. 

This instance is immutable and unaffected by this method call. 


    adjuster - the adjuster to use, not null 

    Returns: an {@code Instant} based on {@code this} with the adjustment made, not null 

*java.time.Instant.with(TemporalField,long)*

public |java.time.Instant| with(
  java.time.temporal.TemporalField field,
  long newValue)

Returns a copy of this instant with the specified field set to a new value. 

This returns anInstant, based on this one, with the value for the specified 
field changed. If it is not possible to set the value, because the field is not 
supported or for some other reason, an exception is thrown. 

If the field is a (|java.time.temporal.ChronoField|) then the adjustment is 
implemented here. The supported fields behave as follows: 

NANO_OF_SECOND- Returns anInstantwith the specified nano-of-second. The 
epoch-second will be unchanged. MICRO_OF_SECOND- Returns anInstantwith the 
nano-of-second replaced by the specified micro-of-second multiplied by 1,000. 
The epoch-second will be unchanged. MILLI_OF_SECOND- Returns anInstantwith the 
nano-of-second replaced by the specified milli-of-second multiplied by 
1,000,000. The epoch-second will be unchanged. INSTANT_SECONDS- Returns 
anInstantwith the specified epoch-second. The nano-of-second will be unchanged. 

In all cases, if the new value is outside the valid range of values for the 
field then aDateTimeExceptionwill be thrown. 

All otherChronoFieldinstances will throw anUnsupportedTemporalTypeException. 

If the field is not aChronoField, then the result of this method is obtained by 
invokingTemporalField.adjustInto(Temporal, long)passingthisas the argument. In 
this case, the field determines whether and how to adjust the instant. 

This instance is immutable and unaffected by this method call. 


    field - the field to set in the result, not null 
    newValue - the new value of the field in the result 

    Returns: an {@code Instant} based on {@code this} with the specified field set, not null 


