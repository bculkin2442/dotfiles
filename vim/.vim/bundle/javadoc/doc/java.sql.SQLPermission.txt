*java.sql.SQLPermission* *SQLPermission* The permission for which the SecurityMa

public final class SQLPermission
  extends    |java.security.BasicPermission|

|java.sql.SQLPermission_Description|
|java.sql.SQLPermission_Fields|
|java.sql.SQLPermission_Constructors|
|java.sql.SQLPermission_Methods|

================================================================================

*java.sql.SQLPermission_Constructors*
|java.sql.SQLPermission(String)|Creates a new SQLPermission object with the spe
|java.sql.SQLPermission(String,String)|Creates a new SQLPermission object with 

*java.sql.SQLPermission_Description*

The permission for which the SecurityManager will check when code that is 
running an application with a SecurityManager enabled, calls 
theDriverManager.deregisterDrivermethod, DriverManager.setLogWriter method, 
DriverManager.setLogStream (deprecated) 
method,SyncFactory.setJNDIContextmethod,SyncFactory.setLoggermethod,Connection.setNetworktimeoutmethod,
or the Connection.abort method. If there is no SQLPermission object, these 
methods throw a java.lang.SecurityException as a runtime exception. 

A SQLPermission object contains a name (also referred to as a "target name") 
but no actions list; there is either a named permission or there is not. The 
target name is the name of the permission (see below). The naming convention 
follows the hierarchical property naming convention. In addition, an asterisk 
may appear at the end of the name, following a ".", or by itself, to signify a 
wildcard match. For example: loadLibrary.* and * signify a wildcard match, 
while *loadLibrary and a*b do not. 

The following table lists all the possible SQLPermission target names. The 
table gives a description of what the permission allows and a discussion of the 
risks of granting code the permission. 



Permission Target Name What the Permission Allows Risks of Allowing this 
Permission 

setLog Setting of the logging stream This is a dangerous permission to grant. 
The contents of the log may contain usernames and passwords, SQL statements, 
and SQL data. 

callAbort Allows the invocation of theConnectionmethodabort Permits an 
application to terminate a physical connection to a database. 

setSyncFactory Allows the invocation of 
theSyncFactorymethodssetJNDIContextandsetLogger Permits an application to 
specify the JNDI context from which theSyncProviderimplementations can be 
retrieved from and the logging object to be used by 
theSyncProviderimplementation. 

setNetworkTimeout Allows the invocation of theConnectionmethodsetNetworkTimeout 
Permits an application to specify the maximum period a Connection or objects 
created from the Connection will wait for the database to reply to any one 
request. 

deregisterDriver Allows the invocation of 
theDriverManagermethodderegisterDriver Permits an application to remove a JDBC 
driver from the list of registered Drivers and release its resources. 





*java.sql.SQLPermission(String)*

public SQLPermission(java.lang.String name)

Creates a new SQLPermission object with the specified name. The name is the 
symbolic name of the SQLPermission. 

    name - the name of this SQLPermission object, which must be either {@code setLog}, 
       {@code callAbort}, {@code setSyncFactory}, {@code deregisterDriver}, or 
       {@code setNetworkTimeout} 

*java.sql.SQLPermission(String,String)*

public SQLPermission(
  java.lang.String name,
  java.lang.String actions)

Creates a new SQLPermission object with the specified name. The name is the 
symbolic name of the SQLPermission; the actions String is currently unused and 
should be null. 

    name - the name of this SQLPermission object, which must be either {@code setLog}, 
       {@code callAbort}, {@code setSyncFactory}, {@code deregisterDriver}, or 
       {@code setNetworkTimeout} 
    actions - should be null 

