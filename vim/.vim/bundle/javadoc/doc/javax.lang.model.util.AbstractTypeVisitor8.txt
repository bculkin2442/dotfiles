*javax.lang.model.util.AbstractTypeVisitor8* *AbstractTypeVisitor8* A skeletal v

public abstract class AbstractTypeVisitor8<R,P>
  extends    |javax.lang.model.util.AbstractTypeVisitor7|

|javax.lang.model.util.AbstractTypeVisitor8_Description|
|javax.lang.model.util.AbstractTypeVisitor8_Fields|
|javax.lang.model.util.AbstractTypeVisitor8_Constructors|
|javax.lang.model.util.AbstractTypeVisitor8_Methods|

================================================================================

*javax.lang.model.util.AbstractTypeVisitor8_Constructors*
|javax.lang.model.util.AbstractTypeVisitor8()|Constructor for concrete subclass

*javax.lang.model.util.AbstractTypeVisitor8_Methods*
|javax.lang.model.util.AbstractTypeVisitor8.visitIntersection(IntersectionType,P)|

*javax.lang.model.util.AbstractTypeVisitor8_Description*

A skeletal visitor of types with default behavior appropriate for the 
RELEASE_8(|javax.lang.model.SourceVersion|) source version. 

WARNING: TheTypeVisitorinterface implemented by this class may have methods 
added to it in the future to accommodate new, currently unknown, language 
structures added to future versions of the Java programming language. 
Therefore, methods whose names begin with"visit"may be added to this class in 
the future; to avoid incompatibilities, classes which extend this class should 
not declare any instance methods with names beginning with"visit". 

When such a new visit method is added, the default implementation in this class 
will be to call the visitUnknown(|javax.lang.model.util.AbstractTypeVisitor8|) 
method. A new abstract type visitor class will also be introduced to correspond 
to the new language level; this visitor will have different default behavior 
for the visit method in question. When the new visitor is introduced, all or 
portions of this visitor may be deprecated. 

Note that adding a default implementation of a new visit method in a visitor 
class will occur instead of adding a default method directly in the visitor 
interface since a Java SE 8 language feature cannot be used to this version of 
the API since this version is required to be runnable on Java SE 7 
implementations. Future versions of the API that are only required to run on 
Java SE 8 and later may take advantage of default methods in this situation. 



*javax.lang.model.util.AbstractTypeVisitor8()*

protected AbstractTypeVisitor8()

Constructor for concrete subclasses to call. 


*javax.lang.model.util.AbstractTypeVisitor8.visitIntersection(IntersectionType,P)*

public abstract |R| visitIntersection(
  javax.lang.model.type.IntersectionType t,
  P p)

Visits anIntersectionTypein a manner defined by a subclass. 


    t - {@inheritDoc} 
    p - {@inheritDoc} 

    Returns: the result of the visit as defined by a subclass 


