*java.time.Month* *Month* A month-of-year, such as 'July'.

public final enumMonth
  extends    |java.lang.Enum|
  implements |java.time.temporal.TemporalAccessor|
             |java.time.temporal.TemporalAdjuster|

|java.time.Month_Description|
|java.time.Month_Fields|
|java.time.Month_Constructors|
|java.time.Month_Methods|

================================================================================

*java.time.Month_Methods*
|java.time.Month.adjustInto(Temporal)|Adjusts the specified temporal object to 
|java.time.Month.firstDayOfYear(boolean)|Gets the day-of-year corresponding to 
|java.time.Month.firstMonthOfQuarter()|Gets the month corresponding to the firs
|java.time.Month.from(TemporalAccessor)|Obtains an instance ofMonthfrom a tempo
|java.time.Month.get(TemporalField)|Gets the value of the specified field from 
|java.time.Month.getDisplayName(TextStyle,Locale)|Gets the textual representati
|java.time.Month.getLong(TemporalField)|Gets the value of the specified field f
|java.time.Month.getValue()|Gets the month-of-yearintvalue.
|java.time.Month.isSupported(TemporalField)|Checks if the specified field is su
|java.time.Month.length(boolean)|Gets the length of this month in days.
|java.time.Month.maxLength()|Gets the maximum length of this month in days.
|java.time.Month.minLength()|Gets the minimum length of this month in days.
|java.time.Month.minus(long)|Returns the month-of-year that is the specified nu
|java.time.Month.of(int)|Obtains an instance ofMonthfrom anintvalue.
|java.time.Month.plus(long)|Returns the month-of-year that is the specified num
|java.time.Month.query(TemporalQuery<R>)|Queries this month-of-year using the s
|java.time.Month.range(TemporalField)|Gets the range of valid values for the sp
|java.time.Month.valueOf(String)|
|java.time.Month.values()|

*java.time.Month_Description*

A month-of-year, such as 'July'. Monthis an enum representing the 12 months of 
the year - January, February, March, April, May, June, July, August, September, 
October, November and December. 

In addition to the textual enum name, each month-of-year has anintvalue. 
Theintvalue follows normal usage and the ISO-8601 standard, from 1 (January) to 
12 (December). It is recommended that applications use the enum rather than 
theintvalue to ensure code clarity. 

Do not useordinal()to obtain the numeric representation ofMonth. 
UsegetValue()instead. 

This enum represents a common concept that is found in many calendar systems. 
As such, this enum may be used by any calendar system that has the 
month-of-year concept defined exactly equivalent to the ISO-8601 calendar 
system. 



*java.time.Month.adjustInto(Temporal)*

public |java.time.temporal.Temporal| adjustInto(java.time.temporal.Temporal temporal)

Adjusts the specified temporal object to have this month-of-year. 

This returns a temporal object of the same observable type as the input with 
the month-of-year changed to be the same as this. 

The adjustment is equivalent to using (|java.time.temporal.Temporal|) passing 
(|java.time.temporal.ChronoField|) as the field. If the specified temporal 
object does not use the ISO calendar system then aDateTimeExceptionis thrown. 

In most cases, it is clearer to reverse the calling pattern by using 
(|java.time.temporal.Temporal|) : 

// these two lines are equivalent, but the second approach is recommended 
temporal = thisMonth.adjustInto(temporal); temporal = temporal.with(thisMonth); 

For example, given a date in May, the following are output: 

dateInMay.with(JANUARY); // four months earlier dateInMay.with(APRIL); // one 
months earlier dateInMay.with(MAY); // same date dateInMay.with(JUNE); // one 
month later dateInMay.with(DECEMBER); // seven months later 

This instance is immutable and unaffected by this method call. 


    temporal - the target object to be adjusted, not null 

    Returns: the adjusted object, not null 

*java.time.Month.firstDayOfYear(boolean)*

public int firstDayOfYear(boolean leapYear)

Gets the day-of-year corresponding to the first day of this month. 

This returns the day-of-year that this month begins on, using the leap year 
flag to determine the length of February. 


    leapYear - true if the length is required for a leap year 

    Returns: the day of year corresponding to the first day of this month, from 1 to 336 

*java.time.Month.firstMonthOfQuarter()*

public |java.time.Month| firstMonthOfQuarter()

Gets the month corresponding to the first month of this quarter. 

The year can be divided into four quarters. This method returns the first month 
of the quarter for the base month. January, February and March return January. 
April, May and June return April. July, August and September return July. 
October, November and December return October. 



    Returns: the first month of the quarter corresponding to this month, not null 

*java.time.Month.from(TemporalAccessor)*

public static |java.time.Month| from(java.time.temporal.TemporalAccessor temporal)

Obtains an instance ofMonthfrom a temporal object. 

This obtains a month based on the specified temporal. 
ATemporalAccessorrepresents an arbitrary set of date and time information, 
which this factory converts to an instance ofMonth. 

The conversion extracts the MONTH_OF_YEAR(|java.time.temporal.ChronoField|) 
field. The extraction is only permitted if the temporal object has an ISO 
chronology, or can be converted to aLocalDate. 

This method matches the signature of the functional interface 
(|java.time.temporal.TemporalQuery|) allowing it to be used in queries via 
method reference,Month::from. 


    temporal - the temporal object to convert, not null 

    Returns: the month-of-year, not null 

*java.time.Month.get(TemporalField)*

public int get(java.time.temporal.TemporalField field)

Gets the value of the specified field from this month-of-year as anint. 

This queries this month for the value for the specified field. The returned 
value will always be within the valid range of values for the field. If it is 
not possible to return the value, because the field is not supported or for 
some other reason, an exception is thrown. 

If the field is MONTH_OF_YEAR(|java.time.temporal.ChronoField|) then the value 
of the month-of-year, from 1 to 12, will be returned. All 
otherChronoFieldinstances will throw anUnsupportedTemporalTypeException. 

If the field is not aChronoField, then the result of this method is obtained by 
invokingTemporalField.getFrom(TemporalAccessor)passingthisas the argument. 
Whether the value can be obtained, and what the value represents, is determined 
by the field. 


    field - the field to get, not null 

    Returns: the value for the field, within the valid range of values 

*java.time.Month.getDisplayName(TextStyle,Locale)*

public |java.lang.String| getDisplayName(
  java.time.format.TextStyle style,
  java.util.Locale locale)

Gets the textual representation, such as 'Jan' or 'December'. 

This returns the textual name used to identify the month-of-year, suitable for 
presentation to the user. The parameters control the style of the returned text 
and the locale. 

If no textual mapping is found then the numeric value(|java.time.Month|) is 
returned. 


    style - the length of the text required, not null 
    locale - the locale to use, not null 

    Returns: the text value of the month-of-year, not null 

*java.time.Month.getLong(TemporalField)*

public long getLong(java.time.temporal.TemporalField field)

Gets the value of the specified field from this month-of-year as along. 

This queries this month for the value for the specified field. If it is not 
possible to return the value, because the field is not supported or for some 
other reason, an exception is thrown. 

If the field is MONTH_OF_YEAR(|java.time.temporal.ChronoField|) then the value 
of the month-of-year, from 1 to 12, will be returned. All 
otherChronoFieldinstances will throw anUnsupportedTemporalTypeException. 

If the field is not aChronoField, then the result of this method is obtained by 
invokingTemporalField.getFrom(TemporalAccessor)passingthisas the argument. 
Whether the value can be obtained, and what the value represents, is determined 
by the field. 


    field - the field to get, not null 

    Returns: the value for the field 

*java.time.Month.getValue()*

public int getValue()

Gets the month-of-yearintvalue. 

The values are numbered following the ISO-8601 standard, from 1 (January) to 12 
(December). 



    Returns: the month-of-year, from 1 (January) to 12 (December) 

*java.time.Month.isSupported(TemporalField)*

public boolean isSupported(java.time.temporal.TemporalField field)

Checks if the specified field is supported. 

This checks if this month-of-year can be queried for the specified field. If 
false, then calling the range(|java.time.Month|) and get(|java.time.Month|) 
methods will throw an exception. 

If the field is MONTH_OF_YEAR(|java.time.temporal.ChronoField|) then this 
method returns true. All otherChronoFieldinstances will return false. 

If the field is not aChronoField, then the result of this method is obtained by 
invokingTemporalField.isSupportedBy(TemporalAccessor)passingthisas the 
argument. Whether the field is supported is determined by the field. 


    field - the field to check, null returns false 

    Returns: true if the field is supported on this month-of-year, false if not 

*java.time.Month.length(boolean)*

public int length(boolean leapYear)

Gets the length of this month in days. 

This takes a flag to determine whether to return the length for a leap year or 
not. 

February has 28 days in a standard year and 29 days in a leap year. April, 
June, September and November have 30 days. All other months have 31 days. 


    leapYear - true if the length is required for a leap year 

    Returns: the length of this month in days, from 28 to 31 

*java.time.Month.maxLength()*

public int maxLength()

Gets the maximum length of this month in days. 

February has a maximum length of 29 days. April, June, September and November 
have 30 days. All other months have 31 days. 



    Returns: the maximum length of this month in days, from 29 to 31 

*java.time.Month.minLength()*

public int minLength()

Gets the minimum length of this month in days. 

February has a minimum length of 28 days. April, June, September and November 
have 30 days. All other months have 31 days. 



    Returns: the minimum length of this month in days, from 28 to 31 

*java.time.Month.minus(long)*

public |java.time.Month| minus(long months)

Returns the month-of-year that is the specified number of months before this 
one. 

The calculation rolls around the start of the year from January to December. 
The specified period may be negative. 

This instance is immutable and unaffected by this method call. 


    months - the months to subtract, positive or negative 

    Returns: the resulting month, not null 

*java.time.Month.of(int)*

public static |java.time.Month| of(int month)

Obtains an instance ofMonthfrom anintvalue. Monthis an enum representing the 12 
months of the year. This factory allows the enum to be obtained from 
theintvalue. Theintvalue follows the ISO-8601 standard, from 1 (January) to 12 
(December). 


    month - the month-of-year to represent, from 1 (January) to 12 (December) 

    Returns: the month-of-year, not null 

*java.time.Month.plus(long)*

public |java.time.Month| plus(long months)

Returns the month-of-year that is the specified number of quarters after this 
one. 

The calculation rolls around the end of the year from December to January. The 
specified period may be negative. 

This instance is immutable and unaffected by this method call. 


    months - the months to add, positive or negative 

    Returns: the resulting month, not null 

*java.time.Month.query(TemporalQuery<R>)*

public |R| query(java.time.temporal.TemporalQuery<R> query)

Queries this month-of-year using the specified query. 

This queries this month-of-year using the specified query strategy object. 
TheTemporalQueryobject defines the logic to be used to obtain the result. Read 
the documentation of the query to understand what the result of this method 
will be. 

The result of this method is obtained by invoking the 
(|java.time.temporal.TemporalQuery|) method on the specified query 
passingthisas the argument. 


    query - the query to invoke, not null 

    Returns: the query result, null may be returned (defined by the query) 

*java.time.Month.range(TemporalField)*

public |java.time.temporal.ValueRange| range(java.time.temporal.TemporalField field)

Gets the range of valid values for the specified field. 

The range object expresses the minimum and maximum valid values for a field. 
This month is used to enhance the accuracy of the returned range. If it is not 
possible to return the range, because the field is not supported or for some 
other reason, an exception is thrown. 

If the field is MONTH_OF_YEAR(|java.time.temporal.ChronoField|) then the range 
of the month-of-year, from 1 to 12, will be returned. All 
otherChronoFieldinstances will throw anUnsupportedTemporalTypeException. 

If the field is not aChronoField, then the result of this method is obtained by 
invokingTemporalField.rangeRefinedBy(TemporalAccessor)passingthisas the 
argument. Whether the range can be obtained is determined by the field. 


    field - the field to query the range for, not null 

    Returns: the range of valid values for the field, not null 

*java.time.Month.valueOf(String)*

public static |java.time.Month| valueOf(java.lang.String name)





*java.time.Month.values()*

public static |java.time.Month|[] values()






