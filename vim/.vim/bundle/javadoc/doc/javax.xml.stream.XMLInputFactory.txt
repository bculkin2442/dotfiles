*javax.xml.stream.XMLInputFactory* *XMLInputFactory* Defines an abstract impleme

public abstract class XMLInputFactory
  extends    |java.lang.Object|

|javax.xml.stream.XMLInputFactory_Description|
|javax.xml.stream.XMLInputFactory_Fields|
|javax.xml.stream.XMLInputFactory_Constructors|
|javax.xml.stream.XMLInputFactory_Methods|

================================================================================

*javax.xml.stream.XMLInputFactory_Fields*
|java.lang.String_javax.xml.stream.XMLInputFactory.ALLOCATOR|
|java.lang.String_javax.xml.stream.XMLInputFactory.IS_COALESCING|
|java.lang.String_javax.xml.stream.XMLInputFactory.IS_NAMESPACE_AWARE|
|java.lang.String_javax.xml.stream.XMLInputFactory.IS_REPLACING_ENTITY_REFERENCES|
|java.lang.String_javax.xml.stream.XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES|
|java.lang.String_javax.xml.stream.XMLInputFactory.IS_VALIDATING|
|java.lang.String_javax.xml.stream.XMLInputFactory.REPORTER|
|java.lang.String_javax.xml.stream.XMLInputFactory.RESOLVER|
|java.lang.String_javax.xml.stream.XMLInputFactory.SUPPORT_DTD|

*javax.xml.stream.XMLInputFactory_Constructors*
|javax.xml.stream.XMLInputFactory()|

*javax.xml.stream.XMLInputFactory_Methods*
|javax.xml.stream.XMLInputFactory.createFilteredReader(XMLEventReader,EventFilter)|
|javax.xml.stream.XMLInputFactory.createFilteredReader(XMLStreamReader,StreamFilter)|
|javax.xml.stream.XMLInputFactory.createXMLEventReader(InputStream)|Create a ne
|javax.xml.stream.XMLInputFactory.createXMLEventReader(InputStream,String)|Crea
|javax.xml.stream.XMLInputFactory.createXMLEventReader(Reader)|Create a new XML
|javax.xml.stream.XMLInputFactory.createXMLEventReader(Source)|Create a new XML
|javax.xml.stream.XMLInputFactory.createXMLEventReader(String,InputStream)|Crea
|javax.xml.stream.XMLInputFactory.createXMLEventReader(String,Reader)|Create a 
|javax.xml.stream.XMLInputFactory.createXMLEventReader(XMLStreamReader)|Create 
|javax.xml.stream.XMLInputFactory.createXMLStreamReader(InputStream)|Create a n
|javax.xml.stream.XMLInputFactory.createXMLStreamReader(InputStream,String)|Cre
|javax.xml.stream.XMLInputFactory.createXMLStreamReader(Reader)|Create a new XM
|javax.xml.stream.XMLInputFactory.createXMLStreamReader(Source)|Create a new XM
|javax.xml.stream.XMLInputFactory.createXMLStreamReader(String,InputStream)|Cre
|javax.xml.stream.XMLInputFactory.createXMLStreamReader(String,Reader)|Create a
|javax.xml.stream.XMLInputFactory.getEventAllocator()|Gets the allocator used b
|javax.xml.stream.XMLInputFactory.getProperty(String)|Get the value of a featur
|javax.xml.stream.XMLInputFactory.getXMLReporter()|The reporter that will be se
|javax.xml.stream.XMLInputFactory.getXMLResolver()|The resolver that will be se
|javax.xml.stream.XMLInputFactory.isPropertySupported(String)|Query the set of 
|javax.xml.stream.XMLInputFactory.newFactory()|Create a new instance of the fac
|javax.xml.stream.XMLInputFactory.newFactory(String,ClassLoader)|Create a new i
|javax.xml.stream.XMLInputFactory.newInstance()|Creates a new instance of the f
|javax.xml.stream.XMLInputFactory.newInstance(String,ClassLoader)|Create a new 
|javax.xml.stream.XMLInputFactory.setEventAllocator(XMLEventAllocator)|Set a us
|javax.xml.stream.XMLInputFactory.setProperty(String,Object)|Allows the user to
|javax.xml.stream.XMLInputFactory.setXMLReporter(XMLReporter)|The reporter that
|javax.xml.stream.XMLInputFactory.setXMLResolver(XMLResolver)|The resolver that

*javax.xml.stream.XMLInputFactory_Description*

Defines an abstract implementation of a factory for getting streams. 

The following table defines the standard properties of this specification. Each 
property varies in the level of support required by each implementation. The 
level of support required is described in the 'Required' column. 





Configuration parameters 





Property Name Behavior Return type Default Value Required 

javax.xml.stream.isValidatingTurns on/off implementation specific DTD 
validationBooleanFalseNo javax.xml.stream.isNamespaceAwareTurns on/off 
namespace processing for XML 1.0 supportBooleanTrueTrue (required) / False 
(optional) javax.xml.stream.isCoalescingRequires the processor to coalesce 
adjacent character dataBooleanFalseYes 
javax.xml.stream.isReplacingEntityReferencesreplace internal entity references 
with their replacement text and report them as charactersBooleanTrueYes 
javax.xml.stream.isSupportingExternalEntitiesResolve external parsed 
entitiesBooleanUnspecifiedYes javax.xml.stream.supportDTDUse this property to 
request processors that do not support DTDsBooleanTrueYes 
javax.xml.stream.reportersets/gets the impl of the XMLReporter 
javax.xml.stream.XMLReporterNullYes javax.xml.stream.resolversets/gets the impl 
of the XMLResolver interfacejavax.xml.stream.XMLResolverNullYes 
javax.xml.stream.allocatorsets/gets the impl of the XMLEventAllocator 
interfacejavax.xml.stream.util.XMLEventAllocatorNullYes 





*java.lang.String_javax.xml.stream.XMLInputFactory.ALLOCATOR*

The property used to set/get the implementation of the allocator 


*java.lang.String_javax.xml.stream.XMLInputFactory.IS_COALESCING*

The property that requires the parser to coalesce adjacent character data 
sections 


*java.lang.String_javax.xml.stream.XMLInputFactory.IS_NAMESPACE_AWARE*

The property used to turn on/off namespace support, this is to support XML 1.0 
documents, only the true setting must be supported 


*java.lang.String_javax.xml.stream.XMLInputFactory.IS_REPLACING_ENTITY_REFERENCES*

Requires the parser to replace internal entity references with their 
replacement text and report them as characters 


*java.lang.String_javax.xml.stream.XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES*

The property that requires the parser to resolve external parsed entities 


*java.lang.String_javax.xml.stream.XMLInputFactory.IS_VALIDATING*

The property used to turn on/off implementation specific validation 


*java.lang.String_javax.xml.stream.XMLInputFactory.REPORTER*

The property used to set/get the implementation of the XMLReporter interface 


*java.lang.String_javax.xml.stream.XMLInputFactory.RESOLVER*

The property used to set/get the implementation of the XMLResolver 


*java.lang.String_javax.xml.stream.XMLInputFactory.SUPPORT_DTD*

The property that requires the parser to support DTDs 



*javax.xml.stream.XMLInputFactory()*

protected XMLInputFactory()




*javax.xml.stream.XMLInputFactory.createFilteredReader(XMLEventReader,EventFilter)*

public abstract |javax.xml.stream.XMLEventReader| createFilteredReader(
  javax.xml.stream.XMLEventReader reader,
  javax.xml.stream.EventFilter filter)
  throws |javax.xml.stream.XMLStreamException|
         
Create a filtered event reader that wraps the filter around the event reader 


    reader - the event reader to wrap 
    filter - the filter to apply to the event reader 

*javax.xml.stream.XMLInputFactory.createFilteredReader(XMLStreamReader,StreamFilter)*

public abstract |javax.xml.stream.XMLStreamReader| createFilteredReader(
  javax.xml.stream.XMLStreamReader reader,
  javax.xml.stream.StreamFilter filter)
  throws |javax.xml.stream.XMLStreamException|
         
Create a filtered reader that wraps the filter around the reader 


    reader - the reader to filter 
    filter - the filter to apply to the reader 

*javax.xml.stream.XMLInputFactory.createXMLEventReader(InputStream)*

public abstract |javax.xml.stream.XMLEventReader| createXMLEventReader(java.io.InputStream stream)
  throws |javax.xml.stream.XMLStreamException|
         
Create a new XMLEventReader from a java.io.InputStream 


    stream - the InputStream to read from 

*javax.xml.stream.XMLInputFactory.createXMLEventReader(InputStream,String)*

public abstract |javax.xml.stream.XMLEventReader| createXMLEventReader(
  java.io.InputStream stream,
  java.lang.String encoding)
  throws |javax.xml.stream.XMLStreamException|
         
Create a new XMLEventReader from a java.io.InputStream 


    stream - the InputStream to read from 
    encoding - the character encoding of the stream 

*javax.xml.stream.XMLInputFactory.createXMLEventReader(Reader)*

public abstract |javax.xml.stream.XMLEventReader| createXMLEventReader(java.io.Reader reader)
  throws |javax.xml.stream.XMLStreamException|
         
Create a new XMLEventReader from a reader 


    reader - the XML data to read from 

*javax.xml.stream.XMLInputFactory.createXMLEventReader(Source)*

public abstract |javax.xml.stream.XMLEventReader| createXMLEventReader(javax.xml.transform.Source source)
  throws |javax.xml.stream.XMLStreamException|
         
Create a new XMLEventReader from a JAXP source. Support of this method is 
optional. 


    source - the source to read from 

*javax.xml.stream.XMLInputFactory.createXMLEventReader(String,InputStream)*

public abstract |javax.xml.stream.XMLEventReader| createXMLEventReader(
  java.lang.String systemId,
  java.io.InputStream stream)
  throws |javax.xml.stream.XMLStreamException|
         
Create a new XMLEventReader from a java.io.InputStream 


    systemId - the system ID of the stream 
    stream - the InputStream to read from 

*javax.xml.stream.XMLInputFactory.createXMLEventReader(String,Reader)*

public abstract |javax.xml.stream.XMLEventReader| createXMLEventReader(
  java.lang.String systemId,
  java.io.Reader reader)
  throws |javax.xml.stream.XMLStreamException|
         
Create a new XMLEventReader from a reader 


    systemId - the system ID of the input 
    reader - the XML data to read from 

*javax.xml.stream.XMLInputFactory.createXMLEventReader(XMLStreamReader)*

public abstract |javax.xml.stream.XMLEventReader| createXMLEventReader(javax.xml.stream.XMLStreamReader reader)
  throws |javax.xml.stream.XMLStreamException|
         
Create a new XMLEventReader from an XMLStreamReader. After being used to 
construct the XMLEventReader instance returned from this method the 
XMLStreamReader must not be used. 


    reader - the XMLStreamReader to read from (may not be modified) 

    Returns: a new XMLEventReader 

*javax.xml.stream.XMLInputFactory.createXMLStreamReader(InputStream)*

public abstract |javax.xml.stream.XMLStreamReader| createXMLStreamReader(java.io.InputStream stream)
  throws |javax.xml.stream.XMLStreamException|
         
Create a new XMLStreamReader from a java.io.InputStream 


    stream - the InputStream to read from 

*javax.xml.stream.XMLInputFactory.createXMLStreamReader(InputStream,String)*

public abstract |javax.xml.stream.XMLStreamReader| createXMLStreamReader(
  java.io.InputStream stream,
  java.lang.String encoding)
  throws |javax.xml.stream.XMLStreamException|
         
Create a new XMLStreamReader from a java.io.InputStream 


    stream - the InputStream to read from 
    encoding - the character encoding of the stream 

*javax.xml.stream.XMLInputFactory.createXMLStreamReader(Reader)*

public abstract |javax.xml.stream.XMLStreamReader| createXMLStreamReader(java.io.Reader reader)
  throws |javax.xml.stream.XMLStreamException|
         
Create a new XMLStreamReader from a reader 


    reader - the XML data to read from 

*javax.xml.stream.XMLInputFactory.createXMLStreamReader(Source)*

public abstract |javax.xml.stream.XMLStreamReader| createXMLStreamReader(javax.xml.transform.Source source)
  throws |javax.xml.stream.XMLStreamException|
         
Create a new XMLStreamReader from a JAXP source. This method is optional. 


    source - the source to read from 

*javax.xml.stream.XMLInputFactory.createXMLStreamReader(String,InputStream)*

public abstract |javax.xml.stream.XMLStreamReader| createXMLStreamReader(
  java.lang.String systemId,
  java.io.InputStream stream)
  throws |javax.xml.stream.XMLStreamException|
         
Create a new XMLStreamReader from a java.io.InputStream 


    systemId - the system ID of the stream 
    stream - the InputStream to read from 

*javax.xml.stream.XMLInputFactory.createXMLStreamReader(String,Reader)*

public abstract |javax.xml.stream.XMLStreamReader| createXMLStreamReader(
  java.lang.String systemId,
  java.io.Reader reader)
  throws |javax.xml.stream.XMLStreamException|
         
Create a new XMLStreamReader from a java.io.InputStream 


    systemId - the system ID of the stream 
    reader - the InputStream to read from 

*javax.xml.stream.XMLInputFactory.getEventAllocator()*

public abstract |javax.xml.stream.util.XMLEventAllocator| getEventAllocator()

Gets the allocator used by streams created with this factory 



*javax.xml.stream.XMLInputFactory.getProperty(String)*

public abstract |java.lang.Object| getProperty(java.lang.String name)
  throws |java.lang.IllegalArgumentException|
         
Get the value of a feature/property from the underlying implementation 


    name - The name of the property (may not be null) 

    Returns: The value of the property 

*javax.xml.stream.XMLInputFactory.getXMLReporter()*

public abstract |javax.xml.stream.XMLReporter| getXMLReporter()

The reporter that will be set on any XMLStreamReader or XMLEventReader created 
by this factory instance. 



*javax.xml.stream.XMLInputFactory.getXMLResolver()*

public abstract |javax.xml.stream.XMLResolver| getXMLResolver()

The resolver that will be set on any XMLStreamReader or XMLEventReader created 
by this factory instance. 



*javax.xml.stream.XMLInputFactory.isPropertySupported(String)*

public abstract boolean isPropertySupported(java.lang.String name)

Query the set of properties that this factory supports. 


    name - The name of the property (may not be null) 

    Returns: true if the property is supported and false otherwise 

*javax.xml.stream.XMLInputFactory.newFactory()*

public static |javax.xml.stream.XMLInputFactory| newFactory()
  throws |javax.xml.stream.FactoryConfigurationError|
         
Create a new instance of the factory. 

This static method creates a new factory instance. This method uses the 
following ordered lookup procedure to determine the XMLInputFactory 
implementation class to load: 



Use the javax.xml.stream.XMLInputFactory system property. 

Use the properties file "lib/stax.properties" in the JRE directory. This 
configuration file is in standard java.util.Properties format and contains the 
fully qualified name of the implementation class with the key being the system 
property defined above. 

Use the service-provider loading facilities, defined by the 
(|java.util.ServiceLoader|) class, to attempt to locate and load an 
implementation of the service using the default loading 
mechanism(|java.util.ServiceLoader|) : the service-provider loading facility 
will use the current thread's context class loader(|java.lang.Thread|) to 
attempt to load the service. If the context class loader is null, the system 
class loader(|java.lang.ClassLoader|) will be used. 

Otherwise, the system-default implementation is returned. 



Once an application has obtained a reference to a XMLInputFactory it can use 
the factory to configure and obtain stream instances. 

Note that this is a new method that replaces the deprecated newInstance() 
method. No changes in behavior are defined by this replacement method relative 
to the deprecated method. 



*javax.xml.stream.XMLInputFactory.newFactory(String,ClassLoader)*

public static |javax.xml.stream.XMLInputFactory| newFactory(
  java.lang.String factoryId,
  java.lang.ClassLoader classLoader)
  throws |javax.xml.stream.FactoryConfigurationError|
         
Create a new instance of the factory. If the classLoader argument is null, then 
the ContextClassLoader is used. 

This method uses the following ordered lookup procedure to determine the 
XMLInputFactory implementation class to load: 



Use the value of the system property identified byfactoryId. 

Use the properties file "lib/stax.properties" in the JRE directory. This 
configuration file is in standard java.util.Properties format and contains the 
fully qualified name of the implementation class with the key being the 
givenfactoryId. 

IffactoryIdis "javax.xml.stream.XMLInputFactory", use the service-provider 
loading facilities, defined by the (|java.util.ServiceLoader|) class, to 
attempt to locate and load an implementation of the service using the 
specifiedClassLoader. IfclassLoaderis null, the default loading 
mechanism(|java.util.ServiceLoader|) will apply: That is, the service-provider 
loading facility will use the current thread's context class 
loader(|java.lang.Thread|) to attempt to load the service. If the context class 
loader is null, the system class loader(|java.lang.ClassLoader|) will be used. 

Otherwise, throws a (|javax.xml.stream.FactoryConfigurationError|) . 



Note that this is a new method that replaces the deprecated newInstance(String 
factoryId, ClassLoader classLoader)(|javax.xml.stream.XMLInputFactory|) method. 
No changes in behavior are defined by this replacement method relative to the 
deprecated method. 


    factoryId - Name of the factory to find, same as a property name 
    classLoader - classLoader to use 

    Returns: the factory implementation 

*javax.xml.stream.XMLInputFactory.newInstance()*

public static |javax.xml.stream.XMLInputFactory| newInstance()
  throws |javax.xml.stream.FactoryConfigurationError|
         
Creates a new instance of the factory in exactly the same manner as the 
(|javax.xml.stream.XMLInputFactory|) method. 



*javax.xml.stream.XMLInputFactory.newInstance(String,ClassLoader)*

public static |javax.xml.stream.XMLInputFactory| newInstance(
  java.lang.String factoryId,
  java.lang.ClassLoader classLoader)
  throws |javax.xml.stream.FactoryConfigurationError|
         
Create a new instance of the factory 

    Deprecated: This method has been deprecated to maintain API consistency.
              All newInstance methods have been replaced with corresponding
              newFactory methods. The replacement {@link
              #newFactory(java.lang.String, java.lang.ClassLoader)} method
              defines no changes in behavior.

    factoryId - Name of the factory to find, same as a property name 
    classLoader - classLoader to use 

    Returns: the factory implementation 

*javax.xml.stream.XMLInputFactory.setEventAllocator(XMLEventAllocator)*

public abstract void setEventAllocator(javax.xml.stream.util.XMLEventAllocator allocator)

Set a user defined event allocator for events 


    allocator - the user defined allocator 

*javax.xml.stream.XMLInputFactory.setProperty(String,Object)*

public abstract void setProperty(
  java.lang.String name,
  java.lang.Object value)
  throws |java.lang.IllegalArgumentException|
         
Allows the user to set specific feature/property on the underlying 
implementation. The underlying implementation is not required to support every 
setting of every property in the specification and may use 
IllegalArgumentException to signal that an unsupported property may not be set 
with the specified value. 

All implementations that implement JAXP 1.5 or newer are required to support 
the (|javax.xml.XMLConstants|) property. 



Access to external DTDs, external Entity References is restricted to the 
protocols specified by the property. If access is denied during parsing due to 
the restriction of this property, (|javax.xml.stream.XMLStreamException|) will 
be thrown by the (|javax.xml.stream.XMLStreamReader|) or 
(|javax.xml.stream.XMLEventReader|) method. 




    name - The name of the property (may not be null) 
    value - The value of the property 

*javax.xml.stream.XMLInputFactory.setXMLReporter(XMLReporter)*

public abstract void setXMLReporter(javax.xml.stream.XMLReporter reporter)

The reporter that will be set on any XMLStreamReader or XMLEventReader created 
by this factory instance. 


    reporter - the resolver to use to report non fatal errors 

*javax.xml.stream.XMLInputFactory.setXMLResolver(XMLResolver)*

public abstract void setXMLResolver(javax.xml.stream.XMLResolver resolver)

The resolver that will be set on any XMLStreamReader or XMLEventReader created 
by this factory instance. 


    resolver - the resolver to use to resolve references 


