*java.lang.annotation.Target* *Target* Indicates the contexts in which an annota

public interface class Target

  implements |java.lang.annotation.Annotation|

|java.lang.annotation.Target_Description|
|java.lang.annotation.Target_Fields|
|java.lang.annotation.Target_Constructors|
|java.lang.annotation.Target_Methods|

================================================================================

*java.lang.annotation.Target_Description*

Indicates the contexts in which an annotation type is applicable. The 
declaration contexts and type contexts in which an annotation type may be 
applicable are specified in JLS 9.6.4.1, and denoted in source code by enum 
constants of 
java.lang.annotation.ElementType(|java.lang.annotation.ElementType|) . 

If an@Targetmeta-annotation is not present on an annotation typeT, then an 
annotation of typeTmay be written as a modifier for any declaration except a 
type parameter declaration. 

If an@Targetmeta-annotation is present, the compiler will enforce the usage 
restrictions indicated byElementTypeenum constants, in line with JLS 9.7.4. 

For example, this@Targetmeta-annotation indicates that the declared type is 
itself a meta-annotation type. It can only be used on annotation type 
declarations: 

Target(ElementType.ANNOTATION_TYPE) public interface MetaAnnotationType { ... } 

This@Targetmeta-annotation indicates that the declared type is intended solely 
for use as a member type in complex annotation type declarations. It cannot be 
used to annotate anything directly: 

Target({}) public interface MemberType { ... } 

It is a compile-time error for a singleElementTypeconstant to appear more than 
once in an@Targetannotation. For example, the following@Targetmeta-annotation 
is illegal: 

Target({ElementType.FIELD, ElementType.METHOD, ElementType.FIELD}) public 
interface Bogus { ... } 



