*java.time.LocalDateTime* *LocalDateTime* A date-time without a time-zone in the

public final class LocalDateTime
  extends    |java.lang.Object|
  implements |java.time.temporal.Temporal|
             |java.time.temporal.TemporalAdjuster|
             |java.time.chrono.ChronoLocalDateTime|
             |java.io.Serializable|

|java.time.LocalDateTime_Description|
|java.time.LocalDateTime_Fields|
|java.time.LocalDateTime_Constructors|
|java.time.LocalDateTime_Methods|

================================================================================

*java.time.LocalDateTime_Fields*
|java.time.LocalDateTime_java.time.LocalDateTime.MAX|
|java.time.LocalDateTime_java.time.LocalDateTime.MIN|

*java.time.LocalDateTime_Methods*
|java.time.LocalDateTime.adjustInto(Temporal)|Adjusts the specified temporal ob
|java.time.LocalDateTime.atOffset(ZoneOffset)|Combines this date-time with an o
|java.time.LocalDateTime.atZone(ZoneId)|Combines this date-time with a time-zon
|java.time.LocalDateTime.compareTo(ChronoLocalDateTime<?>)|Compares this date-t
|java.time.LocalDateTime.equals(Object)|Checks if this date-time is equal to an
|java.time.LocalDateTime.format(DateTimeFormatter)|Formats this date-time using
|java.time.LocalDateTime.from(TemporalAccessor)|Obtains an instance ofLocalDate
|java.time.LocalDateTime.get(TemporalField)|Gets the value of the specified fie
|java.time.LocalDateTime.getDayOfMonth()|Gets the day-of-month field.
|java.time.LocalDateTime.getDayOfWeek()|Gets the day-of-week field, which is an
|java.time.LocalDateTime.getDayOfYear()|Gets the day-of-year field.
|java.time.LocalDateTime.getHour()|Gets the hour-of-day field.
|java.time.LocalDateTime.getLong(TemporalField)|Gets the value of the specified
|java.time.LocalDateTime.getMinute()|Gets the minute-of-hour field.
|java.time.LocalDateTime.getMonth()|Gets the month-of-year field using theMonth
|java.time.LocalDateTime.getMonthValue()|Gets the month-of-year field from 1 to
|java.time.LocalDateTime.getNano()|Gets the nano-of-second field.
|java.time.LocalDateTime.getSecond()|Gets the second-of-minute field.
|java.time.LocalDateTime.getYear()|Gets the year field.
|java.time.LocalDateTime.hashCode()|A hash code for this date-time.
|java.time.LocalDateTime.isAfter(ChronoLocalDateTime<?>)|Checks if this date-ti
|java.time.LocalDateTime.isBefore(ChronoLocalDateTime<?>)|Checks if this date-t
|java.time.LocalDateTime.isEqual(ChronoLocalDateTime<?>)|Checks if this date-ti
|java.time.LocalDateTime.isSupported(TemporalField)|Checks if the specified fie
|java.time.LocalDateTime.isSupported(TemporalUnit)|Checks if the specified unit
|java.time.LocalDateTime.minus(long,TemporalUnit)|Returns a copy of this date-t
|java.time.LocalDateTime.minus(TemporalAmount)|Returns a copy of this date-time
|java.time.LocalDateTime.minusDays(long)|Returns a copy of thisLocalDateTimewit
|java.time.LocalDateTime.minusHours(long)|Returns a copy of thisLocalDateTimewi
|java.time.LocalDateTime.minusMinutes(long)|Returns a copy of thisLocalDateTime
|java.time.LocalDateTime.minusMonths(long)|Returns a copy of thisLocalDateTimew
|java.time.LocalDateTime.minusNanos(long)|Returns a copy of thisLocalDateTimewi
|java.time.LocalDateTime.minusSeconds(long)|Returns a copy of thisLocalDateTime
|java.time.LocalDateTime.minusWeeks(long)|Returns a copy of thisLocalDateTimewi
|java.time.LocalDateTime.minusYears(long)|Returns a copy of thisLocalDateTimewi
|java.time.LocalDateTime.now()|Obtains the current date-time from the system cl
|java.time.LocalDateTime.now(Clock)|Obtains the current date-time from the spec
|java.time.LocalDateTime.now(ZoneId)|Obtains the current date-time from the sys
|java.time.LocalDateTime.of(int,int,int,int,int)|Obtains an instance ofLocalDat
|java.time.LocalDateTime.of(int,int,int,int,int,int)|Obtains an instance ofLoca
|java.time.LocalDateTime.of(int,int,int,int,int,int,int)|Obtains an instance of
|java.time.LocalDateTime.of(int,Month,int,int,int)|Obtains an instance ofLocalD
|java.time.LocalDateTime.of(int,Month,int,int,int,int)|Obtains an instance ofLo
|java.time.LocalDateTime.of(int,Month,int,int,int,int,int)|Obtains an instance 
|java.time.LocalDateTime.of(LocalDate,LocalTime)|Obtains an instance ofLocalDat
|java.time.LocalDateTime.ofEpochSecond(long,int,ZoneOffset)|Obtains an instance
|java.time.LocalDateTime.ofInstant(Instant,ZoneId)|Obtains an instance ofLocalD
|java.time.LocalDateTime.parse(CharSequence)|Obtains an instance ofLocalDateTim
|java.time.LocalDateTime.parse(CharSequence,DateTimeFormatter)|Obtains an insta
|java.time.LocalDateTime.plus(long,TemporalUnit)|Returns a copy of this date-ti
|java.time.LocalDateTime.plus(TemporalAmount)|Returns a copy of this date-time 
|java.time.LocalDateTime.plusDays(long)|Returns a copy of thisLocalDateTimewith
|java.time.LocalDateTime.plusHours(long)|Returns a copy of thisLocalDateTimewit
|java.time.LocalDateTime.plusMinutes(long)|Returns a copy of thisLocalDateTimew
|java.time.LocalDateTime.plusMonths(long)|Returns a copy of thisLocalDateTimewi
|java.time.LocalDateTime.plusNanos(long)|Returns a copy of thisLocalDateTimewit
|java.time.LocalDateTime.plusSeconds(long)|Returns a copy of thisLocalDateTimew
|java.time.LocalDateTime.plusWeeks(long)|Returns a copy of thisLocalDateTimewit
|java.time.LocalDateTime.plusYears(long)|Returns a copy of thisLocalDateTimewit
|java.time.LocalDateTime.query(TemporalQuery<R>)|Queries this date-time using t
|java.time.LocalDateTime.range(TemporalField)|Gets the range of valid values fo
|java.time.LocalDateTime.toLocalDate()|Gets theLocalDatepart of this date-time.
|java.time.LocalDateTime.toLocalTime()|Gets theLocalTimepart of this date-time.
|java.time.LocalDateTime.toString()|Outputs this date-time as aString, such as2
|java.time.LocalDateTime.truncatedTo(TemporalUnit)|Returns a copy of thisLocalD
|java.time.LocalDateTime.until(Temporal,TemporalUnit)|Calculates the amount of 
|java.time.LocalDateTime.with(TemporalAdjuster)|Returns an adjusted copy of thi
|java.time.LocalDateTime.with(TemporalField,long)|Returns a copy of this date-t
|java.time.LocalDateTime.withDayOfMonth(int)|Returns a copy of thisLocalDateTim
|java.time.LocalDateTime.withDayOfYear(int)|Returns a copy of thisLocalDateTime
|java.time.LocalDateTime.withHour(int)|Returns a copy of thisLocalDateTimewith 
|java.time.LocalDateTime.withMinute(int)|Returns a copy of thisLocalDateTimewit
|java.time.LocalDateTime.withMonth(int)|Returns a copy of thisLocalDateTimewith
|java.time.LocalDateTime.withNano(int)|Returns a copy of thisLocalDateTimewith 
|java.time.LocalDateTime.withSecond(int)|Returns a copy of thisLocalDateTimewit
|java.time.LocalDateTime.withYear(int)|Returns a copy of thisLocalDateTimewith 

*java.time.LocalDateTime_Description*

A date-time without a time-zone in the ISO-8601 calendar system, such 
as2007-12-03T10:15:30. LocalDateTimeis an immutable date-time object that 
represents a date-time, often viewed as year-month-day-hour-minute-second. 
Other date and time fields, such as day-of-year, day-of-week and week-of-year, 
can also be accessed. Time is represented to nanosecond precision. For example, 
the value "2nd October 2007 at 13:45.30.123456789" can be stored in 
aLocalDateTime. 

This class does not store or represent a time-zone. Instead, it is a 
description of the date, as used for birthdays, combined with the local time as 
seen on a wall clock. It cannot represent an instant on the time-line without 
additional information such as an offset or time-zone. 

The ISO-8601 calendar system is the modern civil calendar system used today in 
most of the world. It is equivalent to the proleptic Gregorian calendar system, 
in which today's rules for leap years are applied for all time. For most 
applications written today, the ISO-8601 rules are entirely suitable. However, 
any application that makes use of historical dates, and requires them to be 
accurate will find the ISO-8601 approach unsuitable. 

This is a <a href="/java/lang/doc-files/ValueBased.html">value-based class; use 
of identity-sensitive operations (including reference equality (==), identity 
hash code, or synchronization) on instances ofLocalDateTimemay have 
unpredictable results and should be avoided. Theequalsmethod should be used for 
comparisons. 



*java.time.LocalDateTime_java.time.LocalDateTime.MAX*

The maximum supportedLocalDateTime, '+999999999-12-31T23:59:59.999999999'. This 
is the local date-time just before midnight at the end of the maximum date. 
This combines (|java.time.LocalDate|) and (|java.time.LocalTime|) . This could 
be used by an application as a "far future" date-time. 


*java.time.LocalDateTime_java.time.LocalDateTime.MIN*

The minimum supportedLocalDateTime, '-999999999-01-01T00:00:00'. This is the 
local date-time of midnight at the start of the minimum date. This combines 
(|java.time.LocalDate|) and (|java.time.LocalTime|) . This could be used by an 
application as a "far past" date-time. 



*java.time.LocalDateTime.adjustInto(Temporal)*

public |java.time.temporal.Temporal| adjustInto(java.time.temporal.Temporal temporal)

Adjusts the specified temporal object to have the same date and time as this 
object. 

This returns a temporal object of the same observable type as the input with 
the date and time changed to be the same as this. 

The adjustment is equivalent to using (|java.time.temporal.Temporal|) twice, 
passing (|java.time.temporal.ChronoField|) and 
(|java.time.temporal.ChronoField|) as the fields. 

In most cases, it is clearer to reverse the calling pattern by using 
(|java.time.temporal.Temporal|) : 

// these two lines are equivalent, but the second approach is recommended 
temporal = thisLocalDateTime.adjustInto(temporal); temporal = 
temporal.with(thisLocalDateTime); 

This instance is immutable and unaffected by this method call. 


    temporal - the target object to be adjusted, not null 

    Returns: the adjusted object, not null 

*java.time.LocalDateTime.atOffset(ZoneOffset)*

public |java.time.OffsetDateTime| atOffset(java.time.ZoneOffset offset)

Combines this date-time with an offset to create anOffsetDateTime. 

This returns anOffsetDateTimeformed from this date-time at the specified 
offset. All possible combinations of date-time and offset are valid. 


    offset - the offset to combine with, not null 

    Returns: the offset date-time formed from this date-time and the specified offset, not 
             null 

*java.time.LocalDateTime.atZone(ZoneId)*

public |java.time.ZonedDateTime| atZone(java.time.ZoneId zone)

Combines this date-time with a time-zone to create aZonedDateTime. 

This returns aZonedDateTimeformed from this date-time at the specified 
time-zone. The result will match this date-time as closely as possible. 
Time-zone rules, such as daylight savings, mean that not every local date-time 
is valid for the specified zone, thus the local date-time may be adjusted. 

The local date-time is resolved to a single instant on the time-line. This is 
achieved by finding a valid offset from UTC/Greenwich for the local date-time 
as defined by the rules(|java.time.zone.ZoneRules|) of the zone ID. 

In most cases, there is only one valid offset for a local date-time. In the 
case of an overlap, where clocks are set back, there are two valid offsets. 
This method uses the earlier offset typically corresponding to "summer". 

In the case of a gap, where clocks jump forward, there is no valid offset. 
Instead, the local date-time is adjusted to be later by the length of the gap. 
For a typical one hour daylight savings change, the local date-time will be 
moved one hour later into the offset typically corresponding to "summer". 

To obtain the later offset during an overlap, call (|java.time.ZonedDateTime|) 
on the result of this method. To throw an exception when there is a gap or 
overlap, use (|java.time.ZonedDateTime|) . 


    zone - the time-zone to use, not null 

    Returns: the zoned date-time formed from this date-time, not null 

*java.time.LocalDateTime.compareTo(ChronoLocalDateTime<?>)*

public int compareTo(java.time.chrono.ChronoLocalDateTime<?> other)

Compares this date-time to another date-time. 

The comparison is primarily based on the date-time, from earliest to latest. It 
is "consistent with equals", as defined by (|java.lang.Comparable|) . 

If all the date-times being compared are instances ofLocalDateTime, then the 
comparison will be entirely based on the date-time. If some dates being 
compared are in different chronologies, then the chronology is also considered, 
see (|java.time.chrono.ChronoLocalDateTime|) . 


    other - the other date-time to compare to, not null 

    Returns: the comparator value, negative if less, positive if greater 

*java.time.LocalDateTime.equals(Object)*

public boolean equals(java.lang.Object obj)

Checks if this date-time is equal to another date-time. 

Compares thisLocalDateTimewith another ensuring that the date-time is the same. 
Only objects of typeLocalDateTimeare compared, other types return false. 


    obj - the object to check, null returns false 

    Returns: true if this is equal to the other date-time 

*java.time.LocalDateTime.format(DateTimeFormatter)*

public |java.lang.String| format(java.time.format.DateTimeFormatter formatter)

Formats this date-time using the specified formatter. 

This date-time will be passed to the formatter to produce a string. 


    formatter - the formatter to use, not null 

    Returns: the formatted date-time string, not null 

*java.time.LocalDateTime.from(TemporalAccessor)*

public static |java.time.LocalDateTime| from(java.time.temporal.TemporalAccessor temporal)

Obtains an instance ofLocalDateTimefrom a temporal object. 

This obtains an offset time based on the specified temporal. 
ATemporalAccessorrepresents an arbitrary set of date and time information, 
which this factory converts to an instance ofLocalDateTime. 

The conversion extracts and combines theLocalDateand theLocalTimefrom the 
temporal object. Implementations are permitted to perform optimizations such as 
accessing those fields that are equivalent to the relevant objects. 

This method matches the signature of the functional interface 
(|java.time.temporal.TemporalQuery|) allowing it to be used as a query via 
method reference,LocalDateTime::from. 


    temporal - the temporal object to convert, not null 

    Returns: the local date-time, not null 

*java.time.LocalDateTime.get(TemporalField)*

public int get(java.time.temporal.TemporalField field)

Gets the value of the specified field from this date-time as anint. 

This queries this date-time for the value for the specified field. The returned 
value will always be within the valid range of values for the field. If it is 
not possible to return the value, because the field is not supported or for 
some other reason, an exception is thrown. 

If the field is a (|java.time.temporal.ChronoField|) then the query is 
implemented here. The supported fields(|java.time.LocalDateTime|) will return 
valid values based on this date-time, 
exceptNANO_OF_DAY,MICRO_OF_DAY,EPOCH_DAYandPROLEPTIC_MONTHwhich are too large 
to fit in anintand throw aDateTimeException. All otherChronoFieldinstances will 
throw anUnsupportedTemporalTypeException. 

If the field is not aChronoField, then the result of this method is obtained by 
invokingTemporalField.getFrom(TemporalAccessor)passingthisas the argument. 
Whether the value can be obtained, and what the value represents, is determined 
by the field. 


    field - the field to get, not null 

    Returns: the value for the field 

*java.time.LocalDateTime.getDayOfMonth()*

public int getDayOfMonth()

Gets the day-of-month field. 

This method returns the primitiveintvalue for the day-of-month. 



    Returns: the day-of-month, from 1 to 31 

*java.time.LocalDateTime.getDayOfWeek()*

public |java.time.DayOfWeek| getDayOfWeek()

Gets the day-of-week field, which is an enumDayOfWeek. 

This method returns the enum (|java.time.DayOfWeek|) for the day-of-week. This 
avoids confusion as to whatintvalues mean. If you need access to the 
primitiveintvalue then the enum provides the int value(|java.time.DayOfWeek|) . 

Additional information can be obtained from theDayOfWeek. This includes textual 
names of the values. 



    Returns: the day-of-week, not null 

*java.time.LocalDateTime.getDayOfYear()*

public int getDayOfYear()

Gets the day-of-year field. 

This method returns the primitiveintvalue for the day-of-year. 



    Returns: the day-of-year, from 1 to 365, or 366 in a leap year 

*java.time.LocalDateTime.getHour()*

public int getHour()

Gets the hour-of-day field. 



    Returns: the hour-of-day, from 0 to 23 

*java.time.LocalDateTime.getLong(TemporalField)*

public long getLong(java.time.temporal.TemporalField field)

Gets the value of the specified field from this date-time as along. 

This queries this date-time for the value for the specified field. If it is not 
possible to return the value, because the field is not supported or for some 
other reason, an exception is thrown. 

If the field is a (|java.time.temporal.ChronoField|) then the query is 
implemented here. The supported fields(|java.time.LocalDateTime|) will return 
valid values based on this date-time. All otherChronoFieldinstances will throw 
anUnsupportedTemporalTypeException. 

If the field is not aChronoField, then the result of this method is obtained by 
invokingTemporalField.getFrom(TemporalAccessor)passingthisas the argument. 
Whether the value can be obtained, and what the value represents, is determined 
by the field. 


    field - the field to get, not null 

    Returns: the value for the field 

*java.time.LocalDateTime.getMinute()*

public int getMinute()

Gets the minute-of-hour field. 



    Returns: the minute-of-hour, from 0 to 59 

*java.time.LocalDateTime.getMonth()*

public |java.time.Month| getMonth()

Gets the month-of-year field using theMonthenum. 

This method returns the enum (|java.time.Month|) for the month. This avoids 
confusion as to whatintvalues mean. If you need access to the primitiveintvalue 
then the enum provides the int value(|java.time.Month|) . 



    Returns: the month-of-year, not null 

*java.time.LocalDateTime.getMonthValue()*

public int getMonthValue()

Gets the month-of-year field from 1 to 12. 

This method returns the month as anintfrom 1 to 12. Application code is 
frequently clearer if the enum (|java.time.Month|) is used by calling 
(|java.time.LocalDateTime|) . 



    Returns: the month-of-year, from 1 to 12 

*java.time.LocalDateTime.getNano()*

public int getNano()

Gets the nano-of-second field. 



    Returns: the nano-of-second, from 0 to 999,999,999 

*java.time.LocalDateTime.getSecond()*

public int getSecond()

Gets the second-of-minute field. 



    Returns: the second-of-minute, from 0 to 59 

*java.time.LocalDateTime.getYear()*

public int getYear()

Gets the year field. 

This method returns the primitiveintvalue for the year. 

The year returned by this method is proleptic as perget(YEAR). To obtain the 
year-of-era, useget(YEAR_OF_ERA). 



    Returns: the year, from MIN_YEAR to MAX_YEAR 

*java.time.LocalDateTime.hashCode()*

public int hashCode()

A hash code for this date-time. 



    Returns: a suitable hash code 

*java.time.LocalDateTime.isAfter(ChronoLocalDateTime<?>)*

public boolean isAfter(java.time.chrono.ChronoLocalDateTime<?> other)

Checks if this date-time is after the specified date-time. 

This checks to see if this date-time represents a point on the local time-line 
after the other date-time. 

LocalDate a = LocalDateTime.of(2012, 6, 30, 12, 00); LocalDate b = 
LocalDateTime.of(2012, 7, 1, 12, 00); a.isAfter(b) == false a.isAfter(a) == 
false b.isAfter(a) == true 

This method only considers the position of the two date-times on the local 
time-line. It does not take into account the chronology, or calendar system. 
This is different from the comparison in (|java.time.LocalDateTime|) , but is 
the same approach as (|java.time.chrono.ChronoLocalDateTime|) . 


    other - the other date-time to compare to, not null 

    Returns: true if this date-time is after the specified date-time 

*java.time.LocalDateTime.isBefore(ChronoLocalDateTime<?>)*

public boolean isBefore(java.time.chrono.ChronoLocalDateTime<?> other)

Checks if this date-time is before the specified date-time. 

This checks to see if this date-time represents a point on the local time-line 
before the other date-time. 

LocalDate a = LocalDateTime.of(2012, 6, 30, 12, 00); LocalDate b = 
LocalDateTime.of(2012, 7, 1, 12, 00); a.isBefore(b) == true a.isBefore(a) == 
false b.isBefore(a) == false 

This method only considers the position of the two date-times on the local 
time-line. It does not take into account the chronology, or calendar system. 
This is different from the comparison in (|java.time.LocalDateTime|) , but is 
the same approach as (|java.time.chrono.ChronoLocalDateTime|) . 


    other - the other date-time to compare to, not null 

    Returns: true if this date-time is before the specified date-time 

*java.time.LocalDateTime.isEqual(ChronoLocalDateTime<?>)*

public boolean isEqual(java.time.chrono.ChronoLocalDateTime<?> other)

Checks if this date-time is equal to the specified date-time. 

This checks to see if this date-time represents the same point on the local 
time-line as the other date-time. 

LocalDate a = LocalDateTime.of(2012, 6, 30, 12, 00); LocalDate b = 
LocalDateTime.of(2012, 7, 1, 12, 00); a.isEqual(b) == false a.isEqual(a) == 
true b.isEqual(a) == false 

This method only considers the position of the two date-times on the local 
time-line. It does not take into account the chronology, or calendar system. 
This is different from the comparison in (|java.time.LocalDateTime|) , but is 
the same approach as (|java.time.chrono.ChronoLocalDateTime|) . 


    other - the other date-time to compare to, not null 

    Returns: true if this date-time is equal to the specified date-time 

*java.time.LocalDateTime.isSupported(TemporalField)*

public boolean isSupported(java.time.temporal.TemporalField field)

Checks if the specified field is supported. 

This checks if this date-time can be queried for the specified field. If false, 
then calling the range(|java.time.LocalDateTime|) , 
get(|java.time.LocalDateTime|) and (|java.time.LocalDateTime|) methods will 
throw an exception. 

If the field is a (|java.time.temporal.ChronoField|) then the query is 
implemented here. The supported fields are: 

NANO_OF_SECONDNANO_OF_DAYMICRO_OF_SECONDMICRO_OF_DAYMILLI_OF_SECONDMILLI_OF_DAYSECOND_OF_MINUTESECOND_OF_DAYMINUTE_OF_HOURMINUTE_OF_DAYHOUR_OF_AMPMCLOCK_HOUR_OF_AMPMHOUR_OF_DAYCLOCK_HOUR_OF_DAYAMPM_OF_DAYDAY_OF_WEEKALIGNED_DAY_OF_WEEK_IN_MONTHALIGNED_DAY_OF_WEEK_IN_YEARDAY_OF_MONTHDAY_OF_YEAREPOCH_DAYALIGNED_WEEK_OF_MONTHALIGNED_WEEK_OF_YEARMONTH_OF_YEARPROLEPTIC_MONTHYEAR_OF_ERAYEARERA
All otherChronoFieldinstances will return false. 

If the field is not aChronoField, then the result of this method is obtained by 
invokingTemporalField.isSupportedBy(TemporalAccessor)passingthisas the 
argument. Whether the field is supported is determined by the field. 


    field - the field to check, null returns false 

    Returns: true if the field is supported on this date-time, false if not 

*java.time.LocalDateTime.isSupported(TemporalUnit)*

public boolean isSupported(java.time.temporal.TemporalUnit unit)

Checks if the specified unit is supported. 

This checks if the specified unit can be added to, or subtracted from, this 
date-time. If false, then calling the (|java.time.LocalDateTime|) and 
minus(|java.time.LocalDateTime|) methods will throw an exception. 

If the unit is a (|java.time.temporal.ChronoUnit|) then the query is 
implemented here. The supported units are: 

NANOSMICROSMILLISSECONDSMINUTESHOURSHALF_DAYSDAYSWEEKSMONTHSYEARSDECADESCENTURIESMILLENNIAERAS
All otherChronoUnitinstances will return false. 

If the unit is not aChronoUnit, then the result of this method is obtained by 
invokingTemporalUnit.isSupportedBy(Temporal)passingthisas the argument. Whether 
the unit is supported is determined by the unit. 


    unit - the unit to check, null returns false 

    Returns: true if the unit can be added/subtracted, false if not 

*java.time.LocalDateTime.minus(long,TemporalUnit)*

public |java.time.LocalDateTime| minus(
  long amountToSubtract,
  java.time.temporal.TemporalUnit unit)

Returns a copy of this date-time with the specified amount subtracted. 

This returns aLocalDateTime, based on this one, with the amount in terms of the 
unit subtracted. If it is not possible to subtract the amount, because the unit 
is not supported or for some other reason, an exception is thrown. 

This method is equivalent to (|java.time.LocalDateTime|) with the amount 
negated. See that method for a full description of how addition, and thus 
subtraction, works. 

This instance is immutable and unaffected by this method call. 


    amountToSubtract - the amount of the unit to subtract from the result, may be negative 
    unit - the unit of the amount to subtract, not null 

    Returns: a {@code LocalDateTime} based on this date-time with the specified amount 
             subtracted, not null 

*java.time.LocalDateTime.minus(TemporalAmount)*

public |java.time.LocalDateTime| minus(java.time.temporal.TemporalAmount amountToSubtract)

Returns a copy of this date-time with the specified amount subtracted. 

This returns aLocalDateTime, based on this one, with the specified amount 
subtracted. The amount is typically (|java.time.Period|) or 
(|java.time.Duration|) but may be any other type implementing the 
(|java.time.temporal.TemporalAmount|) interface. 

The calculation is delegated to the amount object by calling 
(|java.time.temporal.TemporalAmount|) . The amount implementation is free to 
implement the subtraction in any way it wishes, however it typically calls back 
to (|java.time.LocalDateTime|) . Consult the documentation of the amount 
implementation to determine if it can be successfully subtracted. 

This instance is immutable and unaffected by this method call. 


    amountToSubtract - the amount to subtract, not null 

    Returns: a {@code LocalDateTime} based on this date-time with the subtraction made, not 
             null 

*java.time.LocalDateTime.minusDays(long)*

public |java.time.LocalDateTime| minusDays(long days)

Returns a copy of thisLocalDateTimewith the specified period in days 
subtracted. 

This method subtracts the specified amount from the days field incrementing the 
month and year fields as necessary to ensure the result remains valid. The 
result is only invalid if the maximum/minimum year is exceeded. 

For example, 2009-01-01 minus one day would result in 2008-12-31. 

This instance is immutable and unaffected by this method call. 


    days - the days to subtract, may be negative 

    Returns: a {@code LocalDateTime} based on this date-time with the days subtracted, not 
             null 

*java.time.LocalDateTime.minusHours(long)*

public |java.time.LocalDateTime| minusHours(long hours)

Returns a copy of thisLocalDateTimewith the specified period in hours 
subtracted. 

This instance is immutable and unaffected by this method call. 


    hours - the hours to subtract, may be negative 

    Returns: a {@code LocalDateTime} based on this date-time with the hours subtracted, not 
             null 

*java.time.LocalDateTime.minusMinutes(long)*

public |java.time.LocalDateTime| minusMinutes(long minutes)

Returns a copy of thisLocalDateTimewith the specified period in minutes 
subtracted. 

This instance is immutable and unaffected by this method call. 


    minutes - the minutes to subtract, may be negative 

    Returns: a {@code LocalDateTime} based on this date-time with the minutes subtracted, 
             not null 

*java.time.LocalDateTime.minusMonths(long)*

public |java.time.LocalDateTime| minusMonths(long months)

Returns a copy of thisLocalDateTimewith the specified period in months 
subtracted. 

This method subtracts the specified amount from the months field in three 
steps: 

Subtract the input months from the month-of-year field Check if the resulting 
date would be invalid Adjust the day-of-month to the last valid day if 
necessary 

For example, 2007-03-31 minus one month would result in the invalid date 
2007-04-31. Instead of returning an invalid result, the last valid day of the 
month, 2007-04-30, is selected instead. 

This instance is immutable and unaffected by this method call. 


    months - the months to subtract, may be negative 

    Returns: a {@code LocalDateTime} based on this date-time with the months subtracted, not 
             null 

*java.time.LocalDateTime.minusNanos(long)*

public |java.time.LocalDateTime| minusNanos(long nanos)

Returns a copy of thisLocalDateTimewith the specified period in nanoseconds 
subtracted. 

This instance is immutable and unaffected by this method call. 


    nanos - the nanos to subtract, may be negative 

    Returns: a {@code LocalDateTime} based on this date-time with the nanoseconds 
             subtracted, not null 

*java.time.LocalDateTime.minusSeconds(long)*

public |java.time.LocalDateTime| minusSeconds(long seconds)

Returns a copy of thisLocalDateTimewith the specified period in seconds 
subtracted. 

This instance is immutable and unaffected by this method call. 


    seconds - the seconds to subtract, may be negative 

    Returns: a {@code LocalDateTime} based on this date-time with the seconds subtracted, 
             not null 

*java.time.LocalDateTime.minusWeeks(long)*

public |java.time.LocalDateTime| minusWeeks(long weeks)

Returns a copy of thisLocalDateTimewith the specified period in weeks 
subtracted. 

This method subtracts the specified amount in weeks from the days field 
decrementing the month and year fields as necessary to ensure the result 
remains valid. The result is only invalid if the maximum/minimum year is 
exceeded. 

For example, 2009-01-07 minus one week would result in 2008-12-31. 

This instance is immutable and unaffected by this method call. 


    weeks - the weeks to subtract, may be negative 

    Returns: a {@code LocalDateTime} based on this date-time with the weeks subtracted, not 
             null 

*java.time.LocalDateTime.minusYears(long)*

public |java.time.LocalDateTime| minusYears(long years)

Returns a copy of thisLocalDateTimewith the specified period in years 
subtracted. 

This method subtracts the specified amount from the years field in three steps: 

Subtract the input years from the year field Check if the resulting date would 
be invalid Adjust the day-of-month to the last valid day if necessary 

For example, 2008-02-29 (leap year) minus one year would result in the invalid 
date 2009-02-29 (standard year). Instead of returning an invalid result, the 
last valid day of the month, 2009-02-28, is selected instead. 

This instance is immutable and unaffected by this method call. 


    years - the years to subtract, may be negative 

    Returns: a {@code LocalDateTime} based on this date-time with the years subtracted, not 
             null 

*java.time.LocalDateTime.now()*

public static |java.time.LocalDateTime| now()

Obtains the current date-time from the system clock in the default time-zone. 

This will query the system clock(|java.time.Clock|) in the default time-zone to 
obtain the current date-time. 

Using this method will prevent the ability to use an alternate clock for 
testing because the clock is hard-coded. 



    Returns: the current date-time using the system clock and default time-zone, not null 

*java.time.LocalDateTime.now(Clock)*

public static |java.time.LocalDateTime| now(java.time.Clock clock)

Obtains the current date-time from the specified clock. 

This will query the specified clock to obtain the current date-time. Using this 
method allows the use of an alternate clock for testing. The alternate clock 
may be introduced using dependency injection(|java.time.Clock|) . 


    clock - the clock to use, not null 

    Returns: the current date-time, not null 

*java.time.LocalDateTime.now(ZoneId)*

public static |java.time.LocalDateTime| now(java.time.ZoneId zone)

Obtains the current date-time from the system clock in the specified time-zone. 

This will query the system clock(|java.time.Clock|) to obtain the current 
date-time. Specifying the time-zone avoids dependence on the default time-zone. 

Using this method will prevent the ability to use an alternate clock for 
testing because the clock is hard-coded. 


    zone - the zone ID to use, not null 

    Returns: the current date-time using the system clock, not null 

*java.time.LocalDateTime.of(int,int,int,int,int)*

public static |java.time.LocalDateTime| of(
  int year,
  int month,
  int dayOfMonth,
  int hour,
  int minute)

Obtains an instance ofLocalDateTimefrom year, month, day, hour and minute, 
setting the second and nanosecond to zero. 

This returns aLocalDateTimewith the specified year, month, day-of-month, hour 
and minute. The day must be valid for the year and month, otherwise an 
exception will be thrown. The second and nanosecond fields will be set to zero. 


    year - the year to represent, from MIN_YEAR to MAX_YEAR 
    month - the month-of-year to represent, from 1 (January) to 12 (December) 
    dayOfMonth - the day-of-month to represent, from 1 to 31 
    hour - the hour-of-day to represent, from 0 to 23 
    minute - the minute-of-hour to represent, from 0 to 59 

    Returns: the local date-time, not null 

*java.time.LocalDateTime.of(int,int,int,int,int,int)*

public static |java.time.LocalDateTime| of(
  int year,
  int month,
  int dayOfMonth,
  int hour,
  int minute,
  int second)

Obtains an instance ofLocalDateTimefrom year, month, day, hour, minute and 
second, setting the nanosecond to zero. 

This returns aLocalDateTimewith the specified year, month, day-of-month, hour, 
minute and second. The day must be valid for the year and month, otherwise an 
exception will be thrown. The nanosecond field will be set to zero. 


    year - the year to represent, from MIN_YEAR to MAX_YEAR 
    month - the month-of-year to represent, from 1 (January) to 12 (December) 
    dayOfMonth - the day-of-month to represent, from 1 to 31 
    hour - the hour-of-day to represent, from 0 to 23 
    minute - the minute-of-hour to represent, from 0 to 59 
    second - the second-of-minute to represent, from 0 to 59 

    Returns: the local date-time, not null 

*java.time.LocalDateTime.of(int,int,int,int,int,int,int)*

public static |java.time.LocalDateTime| of(
  int year,
  int month,
  int dayOfMonth,
  int hour,
  int minute,
  int second,
  int nanoOfSecond)

Obtains an instance ofLocalDateTimefrom year, month, day, hour, minute, second 
and nanosecond. 

This returns aLocalDateTimewith the specified year, month, day-of-month, hour, 
minute, second and nanosecond. The day must be valid for the year and month, 
otherwise an exception will be thrown. 


    year - the year to represent, from MIN_YEAR to MAX_YEAR 
    month - the month-of-year to represent, from 1 (January) to 12 (December) 
    dayOfMonth - the day-of-month to represent, from 1 to 31 
    hour - the hour-of-day to represent, from 0 to 23 
    minute - the minute-of-hour to represent, from 0 to 59 
    second - the second-of-minute to represent, from 0 to 59 
    nanoOfSecond - the nano-of-second to represent, from 0 to 999,999,999 

    Returns: the local date-time, not null 

*java.time.LocalDateTime.of(int,Month,int,int,int)*

public static |java.time.LocalDateTime| of(
  int year,
  java.time.Month month,
  int dayOfMonth,
  int hour,
  int minute)

Obtains an instance ofLocalDateTimefrom year, month, day, hour and minute, 
setting the second and nanosecond to zero. 

This returns aLocalDateTimewith the specified year, month, day-of-month, hour 
and minute. The day must be valid for the year and month, otherwise an 
exception will be thrown. The second and nanosecond fields will be set to zero. 


    year - the year to represent, from MIN_YEAR to MAX_YEAR 
    month - the month-of-year to represent, not null 
    dayOfMonth - the day-of-month to represent, from 1 to 31 
    hour - the hour-of-day to represent, from 0 to 23 
    minute - the minute-of-hour to represent, from 0 to 59 

    Returns: the local date-time, not null 

*java.time.LocalDateTime.of(int,Month,int,int,int,int)*

public static |java.time.LocalDateTime| of(
  int year,
  java.time.Month month,
  int dayOfMonth,
  int hour,
  int minute,
  int second)

Obtains an instance ofLocalDateTimefrom year, month, day, hour, minute and 
second, setting the nanosecond to zero. 

This returns aLocalDateTimewith the specified year, month, day-of-month, hour, 
minute and second. The day must be valid for the year and month, otherwise an 
exception will be thrown. The nanosecond field will be set to zero. 


    year - the year to represent, from MIN_YEAR to MAX_YEAR 
    month - the month-of-year to represent, not null 
    dayOfMonth - the day-of-month to represent, from 1 to 31 
    hour - the hour-of-day to represent, from 0 to 23 
    minute - the minute-of-hour to represent, from 0 to 59 
    second - the second-of-minute to represent, from 0 to 59 

    Returns: the local date-time, not null 

*java.time.LocalDateTime.of(int,Month,int,int,int,int,int)*

public static |java.time.LocalDateTime| of(
  int year,
  java.time.Month month,
  int dayOfMonth,
  int hour,
  int minute,
  int second,
  int nanoOfSecond)

Obtains an instance ofLocalDateTimefrom year, month, day, hour, minute, second 
and nanosecond. 

This returns aLocalDateTimewith the specified year, month, day-of-month, hour, 
minute, second and nanosecond. The day must be valid for the year and month, 
otherwise an exception will be thrown. 


    year - the year to represent, from MIN_YEAR to MAX_YEAR 
    month - the month-of-year to represent, not null 
    dayOfMonth - the day-of-month to represent, from 1 to 31 
    hour - the hour-of-day to represent, from 0 to 23 
    minute - the minute-of-hour to represent, from 0 to 59 
    second - the second-of-minute to represent, from 0 to 59 
    nanoOfSecond - the nano-of-second to represent, from 0 to 999,999,999 

    Returns: the local date-time, not null 

*java.time.LocalDateTime.of(LocalDate,LocalTime)*

public static |java.time.LocalDateTime| of(
  java.time.LocalDate date,
  java.time.LocalTime time)

Obtains an instance ofLocalDateTimefrom a date and time. 


    date - the local date, not null 
    time - the local time, not null 

    Returns: the local date-time, not null 

*java.time.LocalDateTime.ofEpochSecond(long,int,ZoneOffset)*

public static |java.time.LocalDateTime| ofEpochSecond(
  long epochSecond,
  int nanoOfSecond,
  java.time.ZoneOffset offset)

Obtains an instance ofLocalDateTimeusing seconds from the epoch of 
1970-01-01T00:00:00Z. 

This allows the epoch-second(|java.time.temporal.ChronoField|) field to be 
converted to a local date-time. This is primarily intended for low-level 
conversions rather than general application usage. 


    epochSecond - the number of seconds from the epoch of 1970-01-01T00:00:00Z 
    nanoOfSecond - the nanosecond within the second, from 0 to 999,999,999 
    offset - the zone offset, not null 

    Returns: the local date-time, not null 

*java.time.LocalDateTime.ofInstant(Instant,ZoneId)*

public static |java.time.LocalDateTime| ofInstant(
  java.time.Instant instant,
  java.time.ZoneId zone)

Obtains an instance ofLocalDateTimefrom anInstantand zone ID. 

This creates a local date-time based on the specified instant. First, the 
offset from UTC/Greenwich is obtained using the zone ID and instant, which is 
simple as there is only one valid offset for each instant. Then, the instant 
and offset are used to calculate the local date-time. 


    instant - the instant to create the date-time from, not null 
    zone - the time-zone, which may be an offset, not null 

    Returns: the local date-time, not null 

*java.time.LocalDateTime.parse(CharSequence)*

public static |java.time.LocalDateTime| parse(java.lang.CharSequence text)

Obtains an instance ofLocalDateTimefrom a text string such 
as2007-12-03T10:15:30. 

The string must represent a valid date-time and is parsed using 
(|java.time.format.DateTimeFormatter|) . 


    text - the text to parse such as "2007-12-03T10:15:30", not null 

    Returns: the parsed local date-time, not null 

*java.time.LocalDateTime.parse(CharSequence,DateTimeFormatter)*

public static |java.time.LocalDateTime| parse(
  java.lang.CharSequence text,
  java.time.format.DateTimeFormatter formatter)

Obtains an instance ofLocalDateTimefrom a text string using a specific 
formatter. 

The text is parsed using the formatter, returning a date-time. 


    text - the text to parse, not null 
    formatter - the formatter to use, not null 

    Returns: the parsed local date-time, not null 

*java.time.LocalDateTime.plus(long,TemporalUnit)*

public |java.time.LocalDateTime| plus(
  long amountToAdd,
  java.time.temporal.TemporalUnit unit)

Returns a copy of this date-time with the specified amount added. 

This returns aLocalDateTime, based on this one, with the amount in terms of the 
unit added. If it is not possible to add the amount, because the unit is not 
supported or for some other reason, an exception is thrown. 

If the field is a (|java.time.temporal.ChronoUnit|) then the addition is 
implemented here. Date units are added as per (|java.time.LocalDate|) . Time 
units are added as per (|java.time.LocalTime|) with any overflow in days added 
equivalent to using (|java.time.LocalDateTime|) . 

If the field is not aChronoUnit, then the result of this method is obtained by 
invokingTemporalUnit.addTo(Temporal, long)passingthisas the argument. In this 
case, the unit determines whether and how to perform the addition. 

This instance is immutable and unaffected by this method call. 


    amountToAdd - the amount of the unit to add to the result, may be negative 
    unit - the unit of the amount to add, not null 

    Returns: a {@code LocalDateTime} based on this date-time with the specified amount 
             added, not null 

*java.time.LocalDateTime.plus(TemporalAmount)*

public |java.time.LocalDateTime| plus(java.time.temporal.TemporalAmount amountToAdd)

Returns a copy of this date-time with the specified amount added. 

This returns aLocalDateTime, based on this one, with the specified amount 
added. The amount is typically (|java.time.Period|) or (|java.time.Duration|) 
but may be any other type implementing the 
(|java.time.temporal.TemporalAmount|) interface. 

The calculation is delegated to the amount object by calling 
(|java.time.temporal.TemporalAmount|) . The amount implementation is free to 
implement the addition in any way it wishes, however it typically calls back to 
(|java.time.LocalDateTime|) . Consult the documentation of the amount 
implementation to determine if it can be successfully added. 

This instance is immutable and unaffected by this method call. 


    amountToAdd - the amount to add, not null 

    Returns: a {@code LocalDateTime} based on this date-time with the addition made, not 
             null 

*java.time.LocalDateTime.plusDays(long)*

public |java.time.LocalDateTime| plusDays(long days)

Returns a copy of thisLocalDateTimewith the specified period in days added. 

This method adds the specified amount to the days field incrementing the month 
and year fields as necessary to ensure the result remains valid. The result is 
only invalid if the maximum/minimum year is exceeded. 

For example, 2008-12-31 plus one day would result in 2009-01-01. 

This instance is immutable and unaffected by this method call. 


    days - the days to add, may be negative 

    Returns: a {@code LocalDateTime} based on this date-time with the days added, not null 

*java.time.LocalDateTime.plusHours(long)*

public |java.time.LocalDateTime| plusHours(long hours)

Returns a copy of thisLocalDateTimewith the specified period in hours added. 

This instance is immutable and unaffected by this method call. 


    hours - the hours to add, may be negative 

    Returns: a {@code LocalDateTime} based on this date-time with the hours added, not null 

*java.time.LocalDateTime.plusMinutes(long)*

public |java.time.LocalDateTime| plusMinutes(long minutes)

Returns a copy of thisLocalDateTimewith the specified period in minutes added. 

This instance is immutable and unaffected by this method call. 


    minutes - the minutes to add, may be negative 

    Returns: a {@code LocalDateTime} based on this date-time with the minutes added, not 
             null 

*java.time.LocalDateTime.plusMonths(long)*

public |java.time.LocalDateTime| plusMonths(long months)

Returns a copy of thisLocalDateTimewith the specified period in months added. 

This method adds the specified amount to the months field in three steps: 

Add the input months to the month-of-year field Check if the resulting date 
would be invalid Adjust the day-of-month to the last valid day if necessary 

For example, 2007-03-31 plus one month would result in the invalid date 
2007-04-31. Instead of returning an invalid result, the last valid day of the 
month, 2007-04-30, is selected instead. 

This instance is immutable and unaffected by this method call. 


    months - the months to add, may be negative 

    Returns: a {@code LocalDateTime} based on this date-time with the months added, not null 

*java.time.LocalDateTime.plusNanos(long)*

public |java.time.LocalDateTime| plusNanos(long nanos)

Returns a copy of thisLocalDateTimewith the specified period in nanoseconds 
added. 

This instance is immutable and unaffected by this method call. 


    nanos - the nanos to add, may be negative 

    Returns: a {@code LocalDateTime} based on this date-time with the nanoseconds added, not 
             null 

*java.time.LocalDateTime.plusSeconds(long)*

public |java.time.LocalDateTime| plusSeconds(long seconds)

Returns a copy of thisLocalDateTimewith the specified period in seconds added. 

This instance is immutable and unaffected by this method call. 


    seconds - the seconds to add, may be negative 

    Returns: a {@code LocalDateTime} based on this date-time with the seconds added, not 
             null 

*java.time.LocalDateTime.plusWeeks(long)*

public |java.time.LocalDateTime| plusWeeks(long weeks)

Returns a copy of thisLocalDateTimewith the specified period in weeks added. 

This method adds the specified amount in weeks to the days field incrementing 
the month and year fields as necessary to ensure the result remains valid. The 
result is only invalid if the maximum/minimum year is exceeded. 

For example, 2008-12-31 plus one week would result in 2009-01-07. 

This instance is immutable and unaffected by this method call. 


    weeks - the weeks to add, may be negative 

    Returns: a {@code LocalDateTime} based on this date-time with the weeks added, not null 

*java.time.LocalDateTime.plusYears(long)*

public |java.time.LocalDateTime| plusYears(long years)

Returns a copy of thisLocalDateTimewith the specified period in years added. 

This method adds the specified amount to the years field in three steps: 

Add the input years to the year field Check if the resulting date would be 
invalid Adjust the day-of-month to the last valid day if necessary 

For example, 2008-02-29 (leap year) plus one year would result in the invalid 
date 2009-02-29 (standard year). Instead of returning an invalid result, the 
last valid day of the month, 2009-02-28, is selected instead. 

This instance is immutable and unaffected by this method call. 


    years - the years to add, may be negative 

    Returns: a {@code LocalDateTime} based on this date-time with the years added, not null 

*java.time.LocalDateTime.query(TemporalQuery<R>)*

public |R| query(java.time.temporal.TemporalQuery<R> query)

Queries this date-time using the specified query. 

This queries this date-time using the specified query strategy object. 
TheTemporalQueryobject defines the logic to be used to obtain the result. Read 
the documentation of the query to understand what the result of this method 
will be. 

The result of this method is obtained by invoking the 
(|java.time.temporal.TemporalQuery|) method on the specified query 
passingthisas the argument. 


    query - the query to invoke, not null 

    Returns: the query result, null may be returned (defined by the query) 

*java.time.LocalDateTime.range(TemporalField)*

public |java.time.temporal.ValueRange| range(java.time.temporal.TemporalField field)

Gets the range of valid values for the specified field. 

The range object expresses the minimum and maximum valid values for a field. 
This date-time is used to enhance the accuracy of the returned range. If it is 
not possible to return the range, because the field is not supported or for 
some other reason, an exception is thrown. 

If the field is a (|java.time.temporal.ChronoField|) then the query is 
implemented here. The supported fields(|java.time.LocalDateTime|) will return 
appropriate range instances. All otherChronoFieldinstances will throw 
anUnsupportedTemporalTypeException. 

If the field is not aChronoField, then the result of this method is obtained by 
invokingTemporalField.rangeRefinedBy(TemporalAccessor)passingthisas the 
argument. Whether the range can be obtained is determined by the field. 


    field - the field to query the range for, not null 

    Returns: the range of valid values for the field, not null 

*java.time.LocalDateTime.toLocalDate()*

public |java.time.LocalDate| toLocalDate()

Gets theLocalDatepart of this date-time. 

This returns aLocalDatewith the same year, month and day as this date-time. 



    Returns: the date part of this date-time, not null 

*java.time.LocalDateTime.toLocalTime()*

public |java.time.LocalTime| toLocalTime()

Gets theLocalTimepart of this date-time. 

This returns aLocalTimewith the same hour, minute, second and nanosecond as 
this date-time. 



    Returns: the time part of this date-time, not null 

*java.time.LocalDateTime.toString()*

public |java.lang.String| toString()

Outputs this date-time as aString, such as2007-12-03T10:15:30. 

The output will be one of the following ISO-8601 formats: 

uuuu-MM-dd'T'HH:mm uuuu-MM-dd'T'HH:mm:ss uuuu-MM-dd'T'HH:mm:ss.SSS 
uuuu-MM-dd'T'HH:mm:ss.SSSSSS uuuu-MM-dd'T'HH:mm:ss.SSSSSSSSS 

The format used will be the shortest that outputs the full value of the time 
where the omitted parts are implied to be zero. 



    Returns: a string representation of this date-time, not null 

*java.time.LocalDateTime.truncatedTo(TemporalUnit)*

public |java.time.LocalDateTime| truncatedTo(java.time.temporal.TemporalUnit unit)

Returns a copy of thisLocalDateTimewith the time truncated. 

Truncation returns a copy of the original date-time with fields smaller than 
the specified unit set to zero. For example, truncating with the 
minutes(|java.time.temporal.ChronoUnit|) unit will set the second-of-minute and 
nano-of-second field to zero. 

The unit must have a duration(|java.time.temporal.TemporalUnit|) that divides 
into the length of a standard day without remainder. This includes all supplied 
time units on (|java.time.temporal.ChronoUnit|) and 
DAYS(|java.time.temporal.ChronoUnit|) . Other units throw an exception. 

This instance is immutable and unaffected by this method call. 


    unit - the unit to truncate to, not null 

    Returns: a {@code LocalDateTime} based on this date-time with the time truncated, not 
             null 

*java.time.LocalDateTime.until(Temporal,TemporalUnit)*

public long until(
  java.time.temporal.Temporal endExclusive,
  java.time.temporal.TemporalUnit unit)

Calculates the amount of time until another date-time in terms of the specified 
unit. 

This calculates the amount of time between twoLocalDateTimeobjects in terms of 
a singleTemporalUnit. The start and end points arethisand the specified 
date-time. The result will be negative if the end is before the start. 
TheTemporalpassed to this method is converted to aLocalDateTimeusing 
(|java.time.LocalDateTime|) . For example, the amount in days between two 
date-times can be calculated usingstartDateTime.until(endDateTime, DAYS). 

The calculation returns a whole number, representing the number of complete 
units between the two date-times. For example, the amount in months between 
2012-06-15T00:00 and 2012-08-14T23:59 will only be one month as it is one 
minute short of two months. 

There are two equivalent ways of using this method. The first is to invoke this 
method. The second is to use (|java.time.temporal.TemporalUnit|) : 

// these two lines are equivalent amount = start.until(end, MONTHS); amount = 
MONTHS.between(start, end); 

The choice should be made based on which makes the code more readable. 

The calculation is implemented in this method for 
(|java.time.temporal.ChronoUnit|) . The 
unitsNANOS,MICROS,MILLIS,SECONDS,MINUTES,HOURSandHALF_DAYS,DAYS,WEEKS,MONTHS,YEARS,DECADES,CENTURIES,MILLENNIAandERASare
supported. OtherChronoUnitvalues will throw an exception. 

If the unit is not aChronoUnit, then the result of this method is obtained by 
invokingTemporalUnit.between(Temporal, Temporal)passingthisas the first 
argument and the converted input temporal as the second argument. 

This instance is immutable and unaffected by this method call. 


    endExclusive - the end date, exclusive, which is converted to a {@code LocalDateTime}, not 
       null 
    unit - the unit to measure the amount in, not null 

    Returns: the amount of time between this date-time and the end date-time 

*java.time.LocalDateTime.with(TemporalAdjuster)*

public |java.time.LocalDateTime| with(java.time.temporal.TemporalAdjuster adjuster)

Returns an adjusted copy of this date-time. 

This returns aLocalDateTime, based on this one, with the date-time adjusted. 
The adjustment takes place using the specified adjuster strategy object. Read 
the documentation of the adjuster to understand what adjustment will be made. 

A simple adjuster might simply set the one of the fields, such as the year 
field. A more complex adjuster might set the date to the last day of the month. 
A selection of common adjustments is provided in 
(|java.time.temporal.TemporalAdjuster|) . These include finding the "last day 
of the month" and "next Wednesday". Key date-time classes also implement 
theTemporalAdjusterinterface, such as (|java.time.Month|) and 
MonthDay(|java.time.MonthDay|) . The adjuster is responsible for handling 
special cases, such as the varying lengths of month and leap years. 

For example this code returns a date on the last day of July: 

import static java.time.Month.*; import static java.time.temporal.Adjusters.*; 

result = localDateTime.with(JULY).with(lastDayOfMonth()); 

The classes (|java.time.LocalDate|) and (|java.time.LocalTime|) 
implementTemporalAdjuster, thus this method can be used to change the date, 
time or offset: 

result = localDateTime.with(date); result = localDateTime.with(time); 

The result of this method is obtained by invoking the 
(|java.time.temporal.TemporalAdjuster|) method on the specified adjuster 
passingthisas the argument. 

This instance is immutable and unaffected by this method call. 


    adjuster - the adjuster to use, not null 

    Returns: a {@code LocalDateTime} based on {@code this} with the adjustment made, not 
             null 

*java.time.LocalDateTime.with(TemporalField,long)*

public |java.time.LocalDateTime| with(
  java.time.temporal.TemporalField field,
  long newValue)

Returns a copy of this date-time with the specified field set to a new value. 

This returns aLocalDateTime, based on this one, with the value for the 
specified field changed. This can be used to change any supported field, such 
as the year, month or day-of-month. If it is not possible to set the value, 
because the field is not supported or for some other reason, an exception is 
thrown. 

In some cases, changing the specified field can cause the resulting date-time 
to become invalid, such as changing the month from 31st January to February 
would make the day-of-month invalid. In cases like this, the field is 
responsible for resolving the date. Typically it will choose the previous valid 
date, which would be the last valid day of February in this example. 

If the field is a (|java.time.temporal.ChronoField|) then the adjustment is 
implemented here. The supported fields(|java.time.LocalDateTime|) will behave 
as per the matching method on LocalDate(|java.time.LocalDate|) or 
LocalTime(|java.time.LocalTime|) . All otherChronoFieldinstances will throw 
anUnsupportedTemporalTypeException. 

If the field is not aChronoField, then the result of this method is obtained by 
invokingTemporalField.adjustInto(Temporal, long)passingthisas the argument. In 
this case, the field determines whether and how to adjust the instant. 

This instance is immutable and unaffected by this method call. 


    field - the field to set in the result, not null 
    newValue - the new value of the field in the result 

    Returns: a {@code LocalDateTime} based on {@code this} with the specified field set, not 
             null 

*java.time.LocalDateTime.withDayOfMonth(int)*

public |java.time.LocalDateTime| withDayOfMonth(int dayOfMonth)

Returns a copy of thisLocalDateTimewith the day-of-month altered. If the 
resultingLocalDateTimeis invalid, an exception is thrown. The time does not 
affect the calculation and will be the same in the result. 

This instance is immutable and unaffected by this method call. 


    dayOfMonth - the day-of-month to set in the result, from 1 to 28-31 

    Returns: a {@code LocalDateTime} based on this date-time with the requested day, not 
             null 

*java.time.LocalDateTime.withDayOfYear(int)*

public |java.time.LocalDateTime| withDayOfYear(int dayOfYear)

Returns a copy of thisLocalDateTimewith the day-of-year altered. If the 
resultingLocalDateTimeis invalid, an exception is thrown. 

This instance is immutable and unaffected by this method call. 


    dayOfYear - the day-of-year to set in the result, from 1 to 365-366 

    Returns: a {@code LocalDateTime} based on this date with the requested day, not null 

*java.time.LocalDateTime.withHour(int)*

public |java.time.LocalDateTime| withHour(int hour)

Returns a copy of thisLocalDateTimewith the hour-of-day value altered. 

This instance is immutable and unaffected by this method call. 


    hour - the hour-of-day to set in the result, from 0 to 23 

    Returns: a {@code LocalDateTime} based on this date-time with the requested hour, not 
             null 

*java.time.LocalDateTime.withMinute(int)*

public |java.time.LocalDateTime| withMinute(int minute)

Returns a copy of thisLocalDateTimewith the minute-of-hour value altered. 

This instance is immutable and unaffected by this method call. 


    minute - the minute-of-hour to set in the result, from 0 to 59 

    Returns: a {@code LocalDateTime} based on this date-time with the requested minute, not 
             null 

*java.time.LocalDateTime.withMonth(int)*

public |java.time.LocalDateTime| withMonth(int month)

Returns a copy of thisLocalDateTimewith the month-of-year altered. The time 
does not affect the calculation and will be the same in the result. If the 
day-of-month is invalid for the year, it will be changed to the last valid day 
of the month. 

This instance is immutable and unaffected by this method call. 


    month - the month-of-year to set in the result, from 1 (January) to 12 (December) 

    Returns: a {@code LocalDateTime} based on this date-time with the requested month, not 
             null 

*java.time.LocalDateTime.withNano(int)*

public |java.time.LocalDateTime| withNano(int nanoOfSecond)

Returns a copy of thisLocalDateTimewith the nano-of-second value altered. 

This instance is immutable and unaffected by this method call. 


    nanoOfSecond - the nano-of-second to set in the result, from 0 to 999,999,999 

    Returns: a {@code LocalDateTime} based on this date-time with the requested nanosecond, 
             not null 

*java.time.LocalDateTime.withSecond(int)*

public |java.time.LocalDateTime| withSecond(int second)

Returns a copy of thisLocalDateTimewith the second-of-minute value altered. 

This instance is immutable and unaffected by this method call. 


    second - the second-of-minute to set in the result, from 0 to 59 

    Returns: a {@code LocalDateTime} based on this date-time with the requested second, not 
             null 

*java.time.LocalDateTime.withYear(int)*

public |java.time.LocalDateTime| withYear(int year)

Returns a copy of thisLocalDateTimewith the year altered. The time does not 
affect the calculation and will be the same in the result. If the day-of-month 
is invalid for the year, it will be changed to the last valid day of the month. 

This instance is immutable and unaffected by this method call. 


    year - the year to set in the result, from MIN_YEAR to MAX_YEAR 

    Returns: a {@code LocalDateTime} based on this date-time with the requested year, not 
             null 


