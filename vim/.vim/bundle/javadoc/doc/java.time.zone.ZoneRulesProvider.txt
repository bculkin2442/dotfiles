*java.time.zone.ZoneRulesProvider* *ZoneRulesProvider* Provider of time-zone rul

public abstract class ZoneRulesProvider
  extends    |java.lang.Object|

|java.time.zone.ZoneRulesProvider_Description|
|java.time.zone.ZoneRulesProvider_Fields|
|java.time.zone.ZoneRulesProvider_Constructors|
|java.time.zone.ZoneRulesProvider_Methods|

================================================================================

*java.time.zone.ZoneRulesProvider_Constructors*
|java.time.zone.ZoneRulesProvider()|Constructor.

*java.time.zone.ZoneRulesProvider_Methods*
|java.time.zone.ZoneRulesProvider.getAvailableZoneIds()|Gets the set of availab
|java.time.zone.ZoneRulesProvider.getRules(String,boolean)|Gets the rules for t
|java.time.zone.ZoneRulesProvider.getVersions(String)|Gets the history of rules
|java.time.zone.ZoneRulesProvider.provideRefresh()|SPI method to refresh the ru
|java.time.zone.ZoneRulesProvider.provideRules(String,boolean)|SPI method to ge
|java.time.zone.ZoneRulesProvider.provideVersions(String)|SPI method to get the
|java.time.zone.ZoneRulesProvider.provideZoneIds()|SPI method to get the availa
|java.time.zone.ZoneRulesProvider.refresh()|Refreshes the rules from the underl
|java.time.zone.ZoneRulesProvider.registerProvider(ZoneRulesProvider)|Registers

*java.time.zone.ZoneRulesProvider_Description*

Provider of time-zone rules to the system. 

This class manages the configuration of time-zone rules. The static methods 
provide the public API that can be used to manage the providers. The abstract 
methods provide the SPI that allows rules to be provided. 

ZoneRulesProvider may be installed in an instance of the Java Platform as 
extension classes, that is, jar files placed into any of the usual extension 
directories. Installed providers are loaded using the service-provider loading 
facility defined by the (|java.util.ServiceLoader|) class. A ZoneRulesProvider 
identifies itself with a provider configuration file 
namedjava.time.zone.ZoneRulesProviderin the resource 
directoryMETA-INF/services. The file should contain a line that specifies the 
fully qualified concrete zonerules-provider class name. Providers may also be 
made available by adding them to the class path or by registering themselves 
via (|java.time.zone.ZoneRulesProvider|) method. 

The Java virtual machine has a default provider that provides zone rules for 
the time-zones defined by IANA Time Zone Database (TZDB). If the system 
propertyjava.time.zone.DefaultZoneRulesProvideris defined then it is taken to 
be the fully-qualified name of a concrete ZoneRulesProvider class to be loaded 
as the default provider, using the system class loader. If this system property 
is not defined, a system-default provider will be loaded to serve as the 
default provider. 

Rules are looked up primarily by zone ID, as used by (|java.time.ZoneId|) . 
Only zone region IDs may be used, zone offset IDs are not used here. 

Time-zone rules are political, thus the data can change at any time. Each 
provider will provide the latest rules for each zone ID, but they may also 
provide the history of how the rules changed. 



*java.time.zone.ZoneRulesProvider()*

protected ZoneRulesProvider()

Constructor. 


*java.time.zone.ZoneRulesProvider.getAvailableZoneIds()*

public static |java.util.Set|<String> getAvailableZoneIds()

Gets the set of available zone IDs. 

These IDs are the string form of a (|java.time.ZoneId|) . 



    Returns: a modifiable copy of the set of zone IDs, not null 

*java.time.zone.ZoneRulesProvider.getRules(String,boolean)*

public static |java.time.zone.ZoneRules| getRules(
  java.lang.String zoneId,
  boolean forCaching)

Gets the rules for the zone ID. 

This returns the latest available rules for the zone ID. 

This method relies on time-zone data provider files that are configured. These 
are loaded using aServiceLoader. 

The caching flag is designed to allow provider implementations to prevent the 
rules being cached inZoneId. Under normal circumstances, the caching of zone 
rules is highly desirable as it will provide greater performance. However, 
there is a use case where the caching would not be desirable, see 
(|java.time.zone.ZoneRulesProvider|) . 


    zoneId - the zone ID as defined by {@code ZoneId}, not null 
    forCaching - whether the rules are being queried for caching, true if the returned rules 
       will be cached by {@code ZoneId}, false if they will be returned to the 
       user without being cached in {@code ZoneId} 

    Returns: the rules, null if {@code forCaching} is true and this is a dynamic provider 
             that wants to prevent caching in {@code ZoneId}, otherwise not 
             null 

*java.time.zone.ZoneRulesProvider.getVersions(String)*

public static |java.util.NavigableMap|<String,ZoneRules> getVersions(java.lang.String zoneId)

Gets the history of rules for the zone ID. 

Time-zones are defined by governments and change frequently. This method allows 
applications to find the history of changes to the rules for a single zone ID. 
The map is keyed by a string, which is the version string associated with the 
rules. 

The exact meaning and format of the version is provider specific. The version 
must follow lexicographical order, thus the returned map will be order from the 
oldest known rules to the newest available rules. The default 'TZDB' group uses 
version numbering consisting of the year followed by a letter, such as '2009e' 
or '2012f'. 

Implementations must provide a result for each valid zone ID, however they do 
not have to provide a history of rules. Thus the map will always contain one 
element, and will only contain more than one element if historical rule 
information is available. 


    zoneId - the zone ID as defined by {@code ZoneId}, not null 

    Returns: a modifiable copy of the history of the rules for the ID, sorted from oldest to 
             newest, not null 

*java.time.zone.ZoneRulesProvider.provideRefresh()*

protected boolean provideRefresh()

SPI method to refresh the rules from the underlying data provider. 

This method provides the opportunity for a provider to dynamically recheck the 
underlying data provider to find the latest rules. This could be used to load 
new rules without stopping the JVM. Dynamic behavior is entirely optional and 
most providers do not support it. 

This implementation returns false. 



    Returns: true if the rules were updated 

*java.time.zone.ZoneRulesProvider.provideRules(String,boolean)*

protected abstract |java.time.zone.ZoneRules| provideRules(
  java.lang.String zoneId,
  boolean forCaching)

SPI method to get the rules for the zone ID. 

This loads the rules for the specified zone ID. The provider implementation 
must validate that the zone ID is valid and available, throwing 
aZoneRulesExceptionif it is not. The result of the method in the valid case 
depends on the caching flag. 

If the provider implementation is not dynamic, then the result of the method 
must be the non-null set of rules selected by the ID. 

If the provider implementation is dynamic, then the flag gives the option of 
preventing the returned rules from being cached in (|java.time.ZoneId|) . When 
the flag is true, the provider is permitted to return null, where null will 
prevent the rules from being cached inZoneId. When the flag is false, the 
provider must return non-null rules. 


    zoneId - the zone ID as defined by {@code ZoneId}, not null 
    forCaching - whether the rules are being queried for caching, true if the returned rules 
       will be cached by {@code ZoneId}, false if they will be returned to the 
       user without being cached in {@code ZoneId} 

    Returns: the rules, null if {@code forCaching} is true and this is a dynamic provider 
             that wants to prevent caching in {@code ZoneId}, otherwise not 
             null 

*java.time.zone.ZoneRulesProvider.provideVersions(String)*

protected abstract |java.util.NavigableMap|<String,ZoneRules> provideVersions(java.lang.String zoneId)

SPI method to get the history of rules for the zone ID. 

This returns a map of historical rules keyed by a version string. The exact 
meaning and format of the version is provider specific. The version must follow 
lexicographical order, thus the returned map will be order from the oldest 
known rules to the newest available rules. The default 'TZDB' group uses 
version numbering consisting of the year followed by a letter, such as '2009e' 
or '2012f'. 

Implementations must provide a result for each valid zone ID, however they do 
not have to provide a history of rules. Thus the map will contain at least one 
element, and will only contain more than one element if historical rule 
information is available. 

The returned versions remain available and valid for the lifetime of the 
application. A dynamic provider may increase the set of versions as more data 
becomes available. 


    zoneId - the zone ID as defined by {@code ZoneId}, not null 

    Returns: a modifiable copy of the history of the rules for the ID, sorted from oldest to 
             newest, not null 

*java.time.zone.ZoneRulesProvider.provideZoneIds()*

protected abstract |java.util.Set|<String> provideZoneIds()

SPI method to get the available zone IDs. 

This obtains the IDs that thisZoneRulesProviderprovides. A provider should 
provide data for at least one zone ID. 

The returned zone IDs remain available and valid for the lifetime of the 
application. A dynamic provider may increase the set of IDs as more data 
becomes available. 



    Returns: the set of zone IDs being provided, not null 

*java.time.zone.ZoneRulesProvider.refresh()*

public static boolean refresh()

Refreshes the rules from the underlying data provider. 

This method allows an application to request that the providers check for any 
updates to the provided rules. After calling this method, the offset stored in 
any (|java.time.ZonedDateTime|) may be invalid for the zone ID. 

Dynamic update of rules is a complex problem and most applications should not 
use this method or dynamic rules. To achieve dynamic rules, a provider 
implementation will have to be written as per the specification of this class. 
In addition, instances ofZoneRulesmust not be cached in the application as they 
will become stale. However, the boolean flag on 
(|java.time.zone.ZoneRulesProvider|) allows provider implementations to control 
the caching ofZoneId, potentially ensuring that all objects in the system see 
the new rules. Note that there is likely to be a cost in performance of a 
dynamic rules provider. Note also that no dynamic rules provider is in this 
specification. 



    Returns: true if the rules were updated 

*java.time.zone.ZoneRulesProvider.registerProvider(ZoneRulesProvider)*

public static void registerProvider(java.time.zone.ZoneRulesProvider provider)

Registers a zone rules provider. 

This adds a new provider to those currently available. A provider supplies 
rules for one or more zone IDs. A provider cannot be registered if it supplies 
a zone ID that has already been registered. See the notes on time-zone IDs in 
(|java.time.ZoneId|) , especially the section on using the concept of a "group" 
to make IDs unique. 

To ensure the integrity of time-zones already created, there is no way to 
deregister providers. 


    provider - the provider to register, not null 


