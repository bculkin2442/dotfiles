*java.time.zone.ZoneOffsetTransition* *ZoneOffsetTransition* A transition betwee

public final class ZoneOffsetTransition
  extends    |java.lang.Object|
  implements |java.lang.Comparable|
             |java.io.Serializable|

|java.time.zone.ZoneOffsetTransition_Description|
|java.time.zone.ZoneOffsetTransition_Fields|
|java.time.zone.ZoneOffsetTransition_Constructors|
|java.time.zone.ZoneOffsetTransition_Methods|

================================================================================

*java.time.zone.ZoneOffsetTransition_Methods*
|java.time.zone.ZoneOffsetTransition.compareTo(ZoneOffsetTransition)|Compares t
|java.time.zone.ZoneOffsetTransition.equals(Object)|Checks if this object equal
|java.time.zone.ZoneOffsetTransition.getDateTimeAfter()|Gets the local transiti
|java.time.zone.ZoneOffsetTransition.getDateTimeBefore()|Gets the local transit
|java.time.zone.ZoneOffsetTransition.getDuration()|Gets the duration of the tra
|java.time.zone.ZoneOffsetTransition.getInstant()|Gets the transition instant.
|java.time.zone.ZoneOffsetTransition.getOffsetAfter()|Gets the offset after the
|java.time.zone.ZoneOffsetTransition.getOffsetBefore()|Gets the offset before t
|java.time.zone.ZoneOffsetTransition.hashCode()|Returns a suitable hash code.
|java.time.zone.ZoneOffsetTransition.isGap()|Does this transition represent a g
|java.time.zone.ZoneOffsetTransition.isOverlap()|Does this transition represent
|java.time.zone.ZoneOffsetTransition.isValidOffset(ZoneOffset)|Checks if the sp
|java.time.zone.ZoneOffsetTransition.of(LocalDateTime,ZoneOffset,ZoneOffset)|Ob
|java.time.zone.ZoneOffsetTransition.toEpochSecond()|Gets the transition instan
|java.time.zone.ZoneOffsetTransition.toString()|Returns a string describing thi

*java.time.zone.ZoneOffsetTransition_Description*

A transition between two offsets caused by a discontinuity in the local 
time-line. 

A transition between two offsets is normally the result of a daylight savings 
cutover. The discontinuity is normally a gap in spring and an overlap in 
autumn.ZoneOffsetTransitionmodels the transition between the two offsets. 

Gaps occur where there are local date-times that simply do not not exist. An 
example would be when the offset changes from+03:00to+04:00. This might be 
described as 'the clocks will move forward one hour tonight at 1am'. 

Overlaps occur where there are local date-times that exist twice. An example 
would be when the offset changes from+04:00to+03:00. This might be described as 
'the clocks will move back one hour tonight at 2am'. 



*java.time.zone.ZoneOffsetTransition.compareTo(ZoneOffsetTransition)*

public int compareTo(java.time.zone.ZoneOffsetTransition transition)

Compares this transition to another based on the transition instant. 

This compares the instants of each transition. The offsets are ignored, making 
this order inconsistent with equals. 


    transition - the transition to compare to, not null 

    Returns: the comparator value, negative if less, positive if greater 

*java.time.zone.ZoneOffsetTransition.equals(Object)*

public boolean equals(java.lang.Object other)

Checks if this object equals another. 

The entire state of the object is compared. 


    other - the other object to compare to, null returns false 

    Returns: true if equal 

*java.time.zone.ZoneOffsetTransition.getDateTimeAfter()*

public |java.time.LocalDateTime| getDateTimeAfter()

Gets the local transition date-time, as would be expressed with the 'after' 
offset. 

This is the first date-time after the discontinuity, when the new offset 
applies. 

The combination of the 'before' date-time and offset represents the same 
instant as the 'after' date-time and offset. 



    Returns: the transition date-time expressed with the after offset, not null 

*java.time.zone.ZoneOffsetTransition.getDateTimeBefore()*

public |java.time.LocalDateTime| getDateTimeBefore()

Gets the local transition date-time, as would be expressed with the 'before' 
offset. 

This is the date-time where the discontinuity begins expressed with the 
'before' offset. At this instant, the 'after' offset is actually used, 
therefore the combination of this date-time and the 'before' offset will never 
occur. 

The combination of the 'before' date-time and offset represents the same 
instant as the 'after' date-time and offset. 



    Returns: the transition date-time expressed with the before offset, not null 

*java.time.zone.ZoneOffsetTransition.getDuration()*

public |java.time.Duration| getDuration()

Gets the duration of the transition. 

In most cases, the transition duration is one hour, however this is not always 
the case. The duration will be positive for a gap and negative for an overlap. 
Time-zones are second-based, so the nanosecond part of the duration will be 
zero. 



    Returns: the duration of the transition, positive for gaps, negative for overlaps 

*java.time.zone.ZoneOffsetTransition.getInstant()*

public |java.time.Instant| getInstant()

Gets the transition instant. 

This is the instant of the discontinuity, which is defined as the first instant 
that the 'after' offset applies. 

The methods (|java.time.zone.ZoneOffsetTransition|) , 
(|java.time.zone.ZoneOffsetTransition|) and 
(|java.time.zone.ZoneOffsetTransition|) all represent the same instant. 



    Returns: the transition instant, not null 

*java.time.zone.ZoneOffsetTransition.getOffsetAfter()*

public |java.time.ZoneOffset| getOffsetAfter()

Gets the offset after the transition. 

This is the offset in use on and after the instant of the transition. 



    Returns: the offset after the transition, not null 

*java.time.zone.ZoneOffsetTransition.getOffsetBefore()*

public |java.time.ZoneOffset| getOffsetBefore()

Gets the offset before the transition. 

This is the offset in use before the instant of the transition. 



    Returns: the offset before the transition, not null 

*java.time.zone.ZoneOffsetTransition.hashCode()*

public int hashCode()

Returns a suitable hash code. 



    Returns: the hash code 

*java.time.zone.ZoneOffsetTransition.isGap()*

public boolean isGap()

Does this transition represent a gap in the local time-line. 

Gaps occur where there are local date-times that simply do not not exist. An 
example would be when the offset changes from+01:00to+02:00. This might be 
described as 'the clocks will move forward one hour tonight at 1am'. 



    Returns: true if this transition is a gap, false if it is an overlap 

*java.time.zone.ZoneOffsetTransition.isOverlap()*

public boolean isOverlap()

Does this transition represent an overlap in the local time-line. 

Overlaps occur where there are local date-times that exist twice. An example 
would be when the offset changes from+02:00to+01:00. This might be described as 
'the clocks will move back one hour tonight at 2am'. 



    Returns: true if this transition is an overlap, false if it is a gap 

*java.time.zone.ZoneOffsetTransition.isValidOffset(ZoneOffset)*

public boolean isValidOffset(java.time.ZoneOffset offset)

Checks if the specified offset is valid during this transition. 

This checks to see if the given offset will be valid at some point in the 
transition. A gap will always return false. An overlap will return true if the 
offset is either the before or after offset. 


    offset - the offset to check, null returns false 

    Returns: true if the offset is valid during the transition 

*java.time.zone.ZoneOffsetTransition.of(LocalDateTime,ZoneOffset,ZoneOffset)*

public static |java.time.zone.ZoneOffsetTransition| of(
  java.time.LocalDateTime transition,
  java.time.ZoneOffset offsetBefore,
  java.time.ZoneOffset offsetAfter)

Obtains an instance defining a transition between two offsets. 

Applications should normally obtain an instance from 
(|java.time.zone.ZoneRules|) . This factory is only intended for use when 
creating (|java.time.zone.ZoneRules|) . 


    transition - the transition date-time at the transition, which never actually occurs, 
       expressed local to the before offset, not null 
    offsetBefore - the offset before the transition, not null 
    offsetAfter - the offset at and after the transition, not null 

    Returns: the transition, not null 

*java.time.zone.ZoneOffsetTransition.toEpochSecond()*

public long toEpochSecond()

Gets the transition instant as an epoch second. 



    Returns: the transition epoch second 

*java.time.zone.ZoneOffsetTransition.toString()*

public |java.lang.String| toString()

Returns a string describing this object. 



    Returns: a string for debugging, not null 


