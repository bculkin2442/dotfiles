*java.time.chrono.Era* *Era* An era of the time-line.

public interface interface Era

  implements |java.time.temporal.TemporalAccessor|
             |java.time.temporal.TemporalAdjuster|

|java.time.chrono.Era_Description|
|java.time.chrono.Era_Fields|
|java.time.chrono.Era_Constructors|
|java.time.chrono.Era_Methods|

================================================================================

*java.time.chrono.Era_Methods*
|java.time.chrono.Era.adjustInto(Temporal)|Adjusts the specified temporal objec
|java.time.chrono.Era.get(TemporalField)|Gets the value of the specified field 
|java.time.chrono.Era.getDisplayName(TextStyle,Locale)|Gets the textual represe
|java.time.chrono.Era.getLong(TemporalField)|Gets the value of the specified fi
|java.time.chrono.Era.getValue()|Gets the numeric value associated with the era
|java.time.chrono.Era.isSupported(TemporalField)|Checks if the specified field 
|java.time.chrono.Era.query(TemporalQuery<R>)|Queries this era using the specif
|java.time.chrono.Era.range(TemporalField)|Gets the range of valid values for t

*java.time.chrono.Era_Description*

An era of the time-line. 

Most calendar systems have a single epoch dividing the time-line into two eras. 
However, some calendar systems, have multiple eras, such as one for the reign 
of each leader. In all cases, the era is conceptually the largest division of 
the time-line. Each chronology defines the Era's that are known Eras and a 
Chronology.eras(|java.time.chrono.Chronology|) to get the valid eras. 

For example, the Thai Buddhist calendar system divides time into two eras, 
before and after a single date. By contrast, the Japanese calendar system has 
one era for the reign of each Emperor. 

Instances ofEramay be compared using the==operator. 



*java.time.chrono.Era.adjustInto(Temporal)*

public |java.time.temporal.Temporal| adjustInto(java.time.temporal.Temporal temporal)

Adjusts the specified temporal object to have the same era as this object. 

This returns a temporal object of the same observable type as the input with 
the era changed to be the same as this. 

The adjustment is equivalent to using (|java.time.temporal.Temporal|) passing 
(|java.time.temporal.ChronoField|) as the field. 

In most cases, it is clearer to reverse the calling pattern by using 
(|java.time.temporal.Temporal|) : 

// these two lines are equivalent, but the second approach is recommended 
temporal = thisEra.adjustInto(temporal); temporal = temporal.with(thisEra); 

This instance is immutable and unaffected by this method call. 


    temporal - the target object to be adjusted, not null 

    Returns: the adjusted object, not null 

*java.time.chrono.Era.get(TemporalField)*

public int get(java.time.temporal.TemporalField field)

Gets the value of the specified field from this era as anint. 

This queries this era for the value for the specified field. The returned value 
will always be within the valid range of values for the field. If it is not 
possible to return the value, because the field is not supported or for some 
other reason, an exception is thrown. 

If the field is a (|java.time.temporal.ChronoField|) then the query is 
implemented here. TheERAfield returns the value of the era. All 
otherChronoFieldinstances will throw anUnsupportedTemporalTypeException. 

If the field is not aChronoField, then the result of this method is obtained by 
invokingTemporalField.getFrom(TemporalAccessor)passingthisas the argument. 
Whether the value can be obtained, and what the value represents, is determined 
by the field. 


    field - the field to get, not null 

    Returns: the value for the field 

*java.time.chrono.Era.getDisplayName(TextStyle,Locale)*

public |java.lang.String| getDisplayName(
  java.time.format.TextStyle style,
  java.util.Locale locale)

Gets the textual representation of this era. 

This returns the textual name used to identify the era, suitable for 
presentation to the user. The parameters control the style of the returned text 
and the locale. 

If no textual mapping is found then the numeric value(|java.time.chrono.Era|) 
is returned. 

This default implementation is suitable for all implementations. 


    style - the style of the text required, not null 
    locale - the locale to use, not null 

    Returns: the text value of the era, not null 

*java.time.chrono.Era.getLong(TemporalField)*

public long getLong(java.time.temporal.TemporalField field)

Gets the value of the specified field from this era as along. 

This queries this era for the value for the specified field. If it is not 
possible to return the value, because the field is not supported or for some 
other reason, an exception is thrown. 

If the field is a (|java.time.temporal.ChronoField|) then the query is 
implemented here. TheERAfield returns the value of the era. All 
otherChronoFieldinstances will throw anUnsupportedTemporalTypeException. 

If the field is not aChronoField, then the result of this method is obtained by 
invokingTemporalField.getFrom(TemporalAccessor)passingthisas the argument. 
Whether the value can be obtained, and what the value represents, is determined 
by the field. 


    field - the field to get, not null 

    Returns: the value for the field 

*java.time.chrono.Era.getValue()*

public int getValue()

Gets the numeric value associated with the era as defined by the chronology. 
Each chronology defines the predefined Eras and methods to list the Eras of the 
chronology. 

All fields, including eras, have an associated numeric value. The meaning of 
the numeric value for era is determined by the chronology according to these 
principles: 

The era in use at the epoch 1970-01-01 (ISO) has the value 1. Later eras have 
sequentially higher values. Earlier eras have sequentially lower values, which 
may be negative. 



    Returns: the numeric era value 

*java.time.chrono.Era.isSupported(TemporalField)*

public boolean isSupported(java.time.temporal.TemporalField field)

Checks if the specified field is supported. 

This checks if this era can be queried for the specified field. If false, then 
calling the range(|java.time.chrono.Era|) and get(|java.time.chrono.Era|) 
methods will throw an exception. 

If the field is a (|java.time.temporal.ChronoField|) then the query is 
implemented here. TheERAfield returns true. All otherChronoFieldinstances will 
return false. 

If the field is not aChronoField, then the result of this method is obtained by 
invokingTemporalField.isSupportedBy(TemporalAccessor)passingthisas the 
argument. Whether the field is supported is determined by the field. 


    field - the field to check, null returns false 

    Returns: true if the field is supported on this era, false if not 

*java.time.chrono.Era.query(TemporalQuery<R>)*

public |R| query(java.time.temporal.TemporalQuery<R> query)

Queries this era using the specified query. 

This queries this era using the specified query strategy object. 
TheTemporalQueryobject defines the logic to be used to obtain the result. Read 
the documentation of the query to understand what the result of this method 
will be. 

The result of this method is obtained by invoking the 
(|java.time.temporal.TemporalQuery|) method on the specified query 
passingthisas the argument. 


    query - the query to invoke, not null 

    Returns: the query result, null may be returned (defined by the query) 

*java.time.chrono.Era.range(TemporalField)*

public |java.time.temporal.ValueRange| range(java.time.temporal.TemporalField field)

Gets the range of valid values for the specified field. 

The range object expresses the minimum and maximum valid values for a field. 
This era is used to enhance the accuracy of the returned range. If it is not 
possible to return the range, because the field is not supported or for some 
other reason, an exception is thrown. 

If the field is a (|java.time.temporal.ChronoField|) then the query is 
implemented here. TheERAfield returns the range. All otherChronoFieldinstances 
will throw anUnsupportedTemporalTypeException. 

If the field is not aChronoField, then the result of this method is obtained by 
invokingTemporalField.rangeRefinedBy(TemporalAccessor)passingthisas the 
argument. Whether the range can be obtained is determined by the field. 

The default implementation must return a range forERAfrom zero to one, suitable 
for two era calendar systems such as ISO. 


    field - the field to query the range for, not null 

    Returns: the range of valid values for the field, not null 


