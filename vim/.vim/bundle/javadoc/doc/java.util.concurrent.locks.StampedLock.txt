*java.util.concurrent.locks.StampedLock* *StampedLock* A capability-based lock w

public class StampedLock
  extends    |java.lang.Object|
  implements |java.io.Serializable|

|java.util.concurrent.locks.StampedLock_Description|
|java.util.concurrent.locks.StampedLock_Fields|
|java.util.concurrent.locks.StampedLock_Constructors|
|java.util.concurrent.locks.StampedLock_Methods|

================================================================================

*java.util.concurrent.locks.StampedLock_Constructors*
|java.util.concurrent.locks.StampedLock()|Creates a new lock, initially in unlo

*java.util.concurrent.locks.StampedLock_Methods*
|java.util.concurrent.locks.StampedLock.asReadLock()|Returns a plainLockview of
|java.util.concurrent.locks.StampedLock.asReadWriteLock()|Returns aReadWriteLoc
|java.util.concurrent.locks.StampedLock.asWriteLock()|Returns a plainLockview o
|java.util.concurrent.locks.StampedLock.getReadLockCount()|Queries the number o
|java.util.concurrent.locks.StampedLock.isReadLocked()|Returnstrueif the lock i
|java.util.concurrent.locks.StampedLock.isWriteLocked()|Returnstrueif the lock 
|java.util.concurrent.locks.StampedLock.readLock()|Non-exclusively acquires the
|java.util.concurrent.locks.StampedLock.readLockInterruptibly()|Non-exclusively
|java.util.concurrent.locks.StampedLock.toString()|Returns a string identifying
|java.util.concurrent.locks.StampedLock.tryConvertToOptimisticRead(long)|If the
|java.util.concurrent.locks.StampedLock.tryConvertToReadLock(long)|If the lock 
|java.util.concurrent.locks.StampedLock.tryConvertToWriteLock(long)|If the lock
|java.util.concurrent.locks.StampedLock.tryOptimisticRead()|Returns a stamp tha
|java.util.concurrent.locks.StampedLock.tryReadLock()|Non-exclusively acquires 
|java.util.concurrent.locks.StampedLock.tryReadLock(long,TimeUnit)|Non-exclusiv
|java.util.concurrent.locks.StampedLock.tryUnlockRead()|Releases one hold of th
|java.util.concurrent.locks.StampedLock.tryUnlockWrite()|Releases the write loc
|java.util.concurrent.locks.StampedLock.tryWriteLock()|Exclusively acquires the
|java.util.concurrent.locks.StampedLock.tryWriteLock(long,TimeUnit)|Exclusively
|java.util.concurrent.locks.StampedLock.unlock(long)|If the lock state matches 
|java.util.concurrent.locks.StampedLock.unlockRead(long)|If the lock state matc
|java.util.concurrent.locks.StampedLock.unlockWrite(long)|If the lock state mat
|java.util.concurrent.locks.StampedLock.validate(long)|Returns true if the lock
|java.util.concurrent.locks.StampedLock.writeLock()|Exclusively acquires the lo
|java.util.concurrent.locks.StampedLock.writeLockInterruptibly()|Exclusively ac

*java.util.concurrent.locks.StampedLock_Description*

A capability-based lock with three modes for controlling read/write access. The 
state of a StampedLock consists of a version and mode. Lock acquisition methods 
return a stamp that represents and controls access with respect to a lock 
state; "try" versions of these methods may instead return the special value 
zero to represent failure to acquire access. Lock release and conversion 
methods require stamps as arguments, and fail if they do not match the state of 
the lock. The three modes are: 



Writing. Method (|java.util.concurrent.locks.StampedLock|) possibly blocks 
waiting for exclusive access, returning a stamp that can be used in method 
(|java.util.concurrent.locks.StampedLock|) to release the lock. Untimed and 
timed versions oftryWriteLockare also provided. When the lock is held in write 
mode, no read locks may be obtained, and all optimistic read validations will 
fail. 

Reading. Method (|java.util.concurrent.locks.StampedLock|) possibly blocks 
waiting for non-exclusive access, returning a stamp that can be used in method 
(|java.util.concurrent.locks.StampedLock|) to release the lock. Untimed and 
timed versions oftryReadLockare also provided. 

Optimistic Reading. Method (|java.util.concurrent.locks.StampedLock|) returns a 
non-zero stamp only if the lock is not currently held in write mode. Method 
(|java.util.concurrent.locks.StampedLock|) returns true if the lock has not 
been acquired in write mode since obtaining a given stamp. This mode can be 
thought of as an extremely weak version of a read-lock, that can be broken by a 
writer at any time. The use of optimistic mode for short read-only code 
segments often reduces contention and improves throughput. However, its use is 
inherently fragile. Optimistic read sections should only read fields and hold 
them in local variables for later use after validation. Fields read while in 
optimistic mode may be wildly inconsistent, so usage applies only when you are 
familiar enough with data representations to check consistency and/or 
repeatedly invoke methodvalidate(). For example, such steps are typically 
required when first reading an object or array reference, and then accessing 
one of its fields, elements or methods. 



This class also supports methods that conditionally provide conversions across 
the three modes. For example, method (|java.util.concurrent.locks.StampedLock|) 
attempts to "upgrade" a mode, returning a valid write stamp if (1) already in 
writing mode (2) in reading mode and there are no other readers or (3) in 
optimistic mode and the lock is available. The forms of these methods are 
designed to help reduce some of the code bloat that otherwise occurs in 
retry-based designs. 

StampedLocks are designed for use as internal utilities in the development of 
thread-safe components. Their use relies on knowledge of the internal 
properties of the data, objects, and methods they are protecting. They are not 
reentrant, so locked bodies should not call other unknown methods that may try 
to re-acquire locks (although you may pass a stamp to other methods that can 
use or convert it). The use of read lock modes relies on the associated code 
sections being side-effect-free. Unvalidated optimistic read sections cannot 
call methods that are not known to tolerate potential inconsistencies. Stamps 
use finite representations, and are not cryptographically secure (i.e., a valid 
stamp may be guessable). Stamp values may recycle after (no sooner than) one 
year of continuous operation. A stamp held without use or validation for longer 
than this period may fail to validate correctly. StampedLocks are serializable, 
but always deserialize into initial unlocked state, so they are not useful for 
remote locking. 

The scheduling policy of StampedLock does not consistently prefer readers over 
writers or vice versa. All "try" methods are best-effort and do not necessarily 
conform to any scheduling or fairness policy. A zero return from any "try" 
method for acquiring or converting locks does not carry any information about 
the state of the lock; a subsequent invocation may succeed. 

Because it supports coordinated usage across multiple lock modes, this class 
does not directly implement the (|java.util.concurrent.locks.Lock|) or 
(|java.util.concurrent.locks.ReadWriteLock|) interfaces. However, a StampedLock 
may be viewed (|java.util.concurrent.locks.StampedLock|) , 
(|java.util.concurrent.locks.StampedLock|) , or 
(|java.util.concurrent.locks.StampedLock|) in applications requiring only the 
associated set of functionality. 

Sample Usage. The following illustrates some usage idioms in a class that 
maintains simple two-dimensional points. The sample code illustrates some 
try/catch conventions even though they are not strictly needed here because no 
exceptions can occur in their bodies. 

class Point { private double x, y; private final StampedLock sl = new 
StampedLock(); 

void move(double deltaX, double deltaY) { // an exclusively locked method long 
stamp = sl.writeLock(); try { x += deltaX; y += deltaY; } finally { 
sl.unlockWrite(stamp); } } 

double distanceFromOrigin() { // A read-only method long stamp = 
sl.tryOptimisticRead(); double currentX = x, currentY = y; if 
(!sl.validate(stamp)) { stamp = sl.readLock(); try { currentX = x; currentY = 
y; } finally { sl.unlockRead(stamp); } } return Math.sqrt(currentX * currentX + 
currentY * currentY); } 

void moveIfAtOrigin(double newX, double newY) { // upgrade // Could instead 
start with optimistic, not read mode long stamp = sl.readLock(); try { while (x 
== 0.0 y == 0.0) { long ws = sl.tryConvertToWriteLock(stamp); if (ws != 0L) { 
stamp = ws; x = newX; y = newY; break; } else { sl.unlockRead(stamp); stamp = 
sl.writeLock(); } } } finally { sl.unlock(stamp); } } } 



*java.util.concurrent.locks.StampedLock()*

public StampedLock()

Creates a new lock, initially in unlocked state. 


*java.util.concurrent.locks.StampedLock.asReadLock()*

public |java.util.concurrent.locks.Lock| asReadLock()

Returns a plain (|java.util.concurrent.locks.Lock|) view of this StampedLock in 
which the (|java.util.concurrent.locks.Lock|) method is mapped to 
(|java.util.concurrent.locks.StampedLock|) , and similarly for other methods. 
The returned Lock does not support a (|java.util.concurrent.locks.Condition|) ; 
method (|java.util.concurrent.locks.Lock|) throwsUnsupportedOperationException. 



    Returns: 

*java.util.concurrent.locks.StampedLock.asReadWriteLock()*

public |java.util.concurrent.locks.ReadWriteLock| asReadWriteLock()

Returns a (|java.util.concurrent.locks.ReadWriteLock|) view of this StampedLock 
in which the (|java.util.concurrent.locks.ReadWriteLock|) method is mapped to 
(|java.util.concurrent.locks.StampedLock|) , and 
(|java.util.concurrent.locks.ReadWriteLock|) to 
(|java.util.concurrent.locks.StampedLock|) . 



    Returns: 

*java.util.concurrent.locks.StampedLock.asWriteLock()*

public |java.util.concurrent.locks.Lock| asWriteLock()

Returns a plain (|java.util.concurrent.locks.Lock|) view of this StampedLock in 
which the (|java.util.concurrent.locks.Lock|) method is mapped to 
(|java.util.concurrent.locks.StampedLock|) , and similarly for other methods. 
The returned Lock does not support a (|java.util.concurrent.locks.Condition|) ; 
method (|java.util.concurrent.locks.Lock|) throwsUnsupportedOperationException. 



    Returns: 

*java.util.concurrent.locks.StampedLock.getReadLockCount()*

public int getReadLockCount()

Queries the number of read locks held for this lock. This method is designed 
for use in monitoring system state, not for synchronization control. 



    Returns: the number of read locks held 

*java.util.concurrent.locks.StampedLock.isReadLocked()*

public boolean isReadLocked()

Returnstrueif the lock is currently held non-exclusively. 



    Returns: {@code true} if the lock is currently held non-exclusively 

*java.util.concurrent.locks.StampedLock.isWriteLocked()*

public boolean isWriteLocked()

Returnstrueif the lock is currently held exclusively. 



    Returns: {@code true} if the lock is currently held exclusively 

*java.util.concurrent.locks.StampedLock.readLock()*

public long readLock()

Non-exclusively acquires the lock, blocking if necessary until available. 



    Returns: a stamp that can be used to unlock or convert mode 

*java.util.concurrent.locks.StampedLock.readLockInterruptibly()*

public long readLockInterruptibly()
  throws |java.lang.InterruptedException|
         
Non-exclusively acquires the lock, blocking if necessary until available or the 
current thread is interrupted. Behavior under interruption matches that 
specified for method (|java.util.concurrent.locks.Lock|) . 



    Returns: a stamp that can be used to unlock or convert mode 

*java.util.concurrent.locks.StampedLock.toString()*

public |java.lang.String| toString()

Returns a string identifying this lock, as well as its lock state. The state, 
in brackets, includes the String"Unlocked"or the String"Write-locked"or the 
String"Read-locks:"followed by the current number of read-locks held. 



    Returns: a string identifying this lock, as well as its lock state 

*java.util.concurrent.locks.StampedLock.tryConvertToOptimisticRead(long)*

public long tryConvertToOptimisticRead(long stamp)

If the lock state matches the given stamp then, if the stamp represents holding 
a lock, releases it and returns an observation stamp. Or, if an optimistic 
read, returns it if validated. This method returns zero in all other cases, and 
so may be useful as a form of "tryUnlock". 


    stamp - a stamp 

    Returns: a valid optimistic read stamp, or zero on failure 

*java.util.concurrent.locks.StampedLock.tryConvertToReadLock(long)*

public long tryConvertToReadLock(long stamp)

If the lock state matches the given stamp, performs one of the following 
actions. If the stamp represents holding a write lock, releases it and obtains 
a read lock. Or, if a read lock, returns it. Or, if an optimistic read, 
acquires a read lock and returns a read stamp only if immediately available. 
This method returns zero in all other cases. 


    stamp - a stamp 

    Returns: a valid read stamp, or zero on failure 

*java.util.concurrent.locks.StampedLock.tryConvertToWriteLock(long)*

public long tryConvertToWriteLock(long stamp)

If the lock state matches the given stamp, performs one of the following 
actions. If the stamp represents holding a write lock, returns it. Or, if a 
read lock, if the write lock is available, releases the read lock and returns a 
write stamp. Or, if an optimistic read, returns a write stamp only if 
immediately available. This method returns zero in all other cases. 


    stamp - a stamp 

    Returns: a valid write stamp, or zero on failure 

*java.util.concurrent.locks.StampedLock.tryOptimisticRead()*

public long tryOptimisticRead()

Returns a stamp that can later be validated, or zero if exclusively locked. 



    Returns: a stamp, or zero if exclusively locked 

*java.util.concurrent.locks.StampedLock.tryReadLock()*

public long tryReadLock()

Non-exclusively acquires the lock if it is immediately available. 



    Returns: a stamp that can be used to unlock or convert mode, or zero if the lock is not 
             available 

*java.util.concurrent.locks.StampedLock.tryReadLock(long,TimeUnit)*

public long tryReadLock(
  long time,
  java.util.concurrent.TimeUnit unit)
  throws |java.lang.InterruptedException|
         
Non-exclusively acquires the lock if it is available within the given time and 
the current thread has not been interrupted. Behavior under timeout and 
interruption matches that specified for method 
(|java.util.concurrent.locks.Lock|) . 


    time - the maximum time to wait for the lock 
    unit - the time unit of the {@code time} argument 

    Returns: a stamp that can be used to unlock or convert mode, or zero if the lock is not 
             available 

*java.util.concurrent.locks.StampedLock.tryUnlockRead()*

public boolean tryUnlockRead()

Releases one hold of the read lock if it is held, without requiring a stamp 
value. This method may be useful for recovery after errors. 



    Returns: {@code true} if the read lock was held, else false 

*java.util.concurrent.locks.StampedLock.tryUnlockWrite()*

public boolean tryUnlockWrite()

Releases the write lock if it is held, without requiring a stamp value. This 
method may be useful for recovery after errors. 



    Returns: {@code true} if the lock was held, else false 

*java.util.concurrent.locks.StampedLock.tryWriteLock()*

public long tryWriteLock()

Exclusively acquires the lock if it is immediately available. 



    Returns: a stamp that can be used to unlock or convert mode, or zero if the lock is not 
             available 

*java.util.concurrent.locks.StampedLock.tryWriteLock(long,TimeUnit)*

public long tryWriteLock(
  long time,
  java.util.concurrent.TimeUnit unit)
  throws |java.lang.InterruptedException|
         
Exclusively acquires the lock if it is available within the given time and the 
current thread has not been interrupted. Behavior under timeout and 
interruption matches that specified for method 
(|java.util.concurrent.locks.Lock|) . 


    time - the maximum time to wait for the lock 
    unit - the time unit of the {@code time} argument 

    Returns: a stamp that can be used to unlock or convert mode, or zero if the lock is not 
             available 

*java.util.concurrent.locks.StampedLock.unlock(long)*

public void unlock(long stamp)

If the lock state matches the given stamp, releases the corresponding mode of 
the lock. 


    stamp - a stamp returned by a lock operation 

*java.util.concurrent.locks.StampedLock.unlockRead(long)*

public void unlockRead(long stamp)

If the lock state matches the given stamp, releases the non-exclusive lock. 


    stamp - a stamp returned by a read-lock operation 

*java.util.concurrent.locks.StampedLock.unlockWrite(long)*

public void unlockWrite(long stamp)

If the lock state matches the given stamp, releases the exclusive lock. 


    stamp - a stamp returned by a write-lock operation 

*java.util.concurrent.locks.StampedLock.validate(long)*

public boolean validate(long stamp)

Returns true if the lock has not been exclusively acquired since issuance of 
the given stamp. Always returns false if the stamp is zero. Always returns true 
if the stamp represents a currently held lock. Invoking this method with a 
value not obtained from (|java.util.concurrent.locks.StampedLock|) or a locking 
method for this lock has no defined effect or result. 


    stamp - a stamp 

    Returns: {@code true} if the lock has not been exclusively acquired since issuance of 
             the given stamp; else false 

*java.util.concurrent.locks.StampedLock.writeLock()*

public long writeLock()

Exclusively acquires the lock, blocking if necessary until available. 



    Returns: a stamp that can be used to unlock or convert mode 

*java.util.concurrent.locks.StampedLock.writeLockInterruptibly()*

public long writeLockInterruptibly()
  throws |java.lang.InterruptedException|
         
Exclusively acquires the lock, blocking if necessary until available or the 
current thread is interrupted. Behavior under interruption matches that 
specified for method (|java.util.concurrent.locks.Lock|) . 



    Returns: a stamp that can be used to unlock or convert mode 


