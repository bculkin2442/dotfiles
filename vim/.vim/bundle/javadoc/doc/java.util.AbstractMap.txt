*java.util.AbstractMap* *AbstractMap* This class provides a skeletal implementat

public abstract class AbstractMap<K,V>
  extends    |java.lang.Object|
  implements |java.util.Map|

|java.util.AbstractMap_Description|
|java.util.AbstractMap_Fields|
|java.util.AbstractMap_Constructors|
|java.util.AbstractMap_Methods|

================================================================================

*java.util.AbstractMap_Constructors*
|java.util.AbstractMap()|Sole constructor.

*java.util.AbstractMap_Methods*
|java.util.AbstractMap.clear()|
|java.util.AbstractMap.clone()|Returns a shallow copy of this AbstractMap insta
|java.util.AbstractMap.containsKey(Object)|
|java.util.AbstractMap.containsValue(Object)|
|java.util.AbstractMap.entrySet()|
|java.util.AbstractMap.equals(Object)|Compares the specified object with this m
|java.util.AbstractMap.get(Object)|
|java.util.AbstractMap.hashCode()|Returns the hash code value for this map.
|java.util.AbstractMap.isEmpty()|
|java.util.AbstractMap.keySet()|
|java.util.AbstractMap.put(K,V)|
|java.util.AbstractMap.putAll(Map<?extendsK,?extendsV>)|
|java.util.AbstractMap.remove(Object)|
|java.util.AbstractMap.size()|
|java.util.AbstractMap.toString()|Returns a string representation of this map.
|java.util.AbstractMap.values()|

*java.util.AbstractMap_Description*

This class provides a skeletal implementation of the Map interface, to minimize 
the effort required to implement this interface. 

To implement an unmodifiable map, the programmer needs only to extend this 
class and provide an implementation for the entrySet method, which returns a 
set-view of the map's mappings. Typically, the returned set will, in turn, be 
implemented atop AbstractSet. This set should not support the add or remove 
methods, and its iterator should not support the remove method. 

To implement a modifiable map, the programmer must additionally override this 
class's put method (which otherwise throws an UnsupportedOperationException), 
and the iterator returned by entrySet().iterator() must additionally implement 
its remove method. 

The programmer should generally provide a void (no argument) and map 
constructor, as per the recommendation in the Map interface specification. 

The documentation for each non-abstract method in this class describes its 
implementation in detail. Each of these methods may be overridden if the map 
being implemented admits a more efficient implementation. 

This class is a member of the <a 
href="/../technotes/guides/collections/index.html"> Java Collections Framework. 



*java.util.AbstractMap()*

protected AbstractMap()

Sole constructor. (For invocation by subclass constructors, typically 
implicit.) 


*java.util.AbstractMap.clear()*

public void clear()





*java.util.AbstractMap.clone()*

protected |java.lang.Object| clone()
  throws |java.lang.CloneNotSupportedException|
         
Returns a shallow copy of this AbstractMap instance: the keys and values 
themselves are not cloned. 



    Returns: a shallow copy of this map 

*java.util.AbstractMap.containsKey(Object)*

public boolean containsKey(java.lang.Object key)





*java.util.AbstractMap.containsValue(Object)*

public boolean containsValue(java.lang.Object value)





*java.util.AbstractMap.entrySet()*

public abstract |java.util.Set|<Entry<K,V>> entrySet()





*java.util.AbstractMap.equals(Object)*

public boolean equals(java.lang.Object o)

Compares the specified object with this map for equality. Returns true if the 
given object is also a map and the two maps represent the same mappings. More 
formally, two maps m1 and m2 represent the same mappings if 
m1.entrySet().equals(m2.entrySet()). This ensures that the equals method works 
properly across different implementations of the Map interface. 


    o - object to be compared for equality with this map 

    Returns: true if the specified object is equal to this map 

*java.util.AbstractMap.get(Object)*

public |V| get(java.lang.Object key)





*java.util.AbstractMap.hashCode()*

public int hashCode()

Returns the hash code value for this map. The hash code of a map is defined to 
be the sum of the hash codes of each entry in the map's entrySet() view. This 
ensures that m1.equals(m2) implies that m1.hashCode()==m2.hashCode() for any 
two maps m1 and m2, as required by the general contract of (|java.lang.Object|) 
. 



    Returns: the hash code value for this map 

*java.util.AbstractMap.isEmpty()*

public boolean isEmpty()





*java.util.AbstractMap.keySet()*

public |java.util.Set|<K> keySet()





*java.util.AbstractMap.put(K,V)*

public |V| put(
  K key,
  V value)





*java.util.AbstractMap.putAll(Map<?extendsK,?extendsV>)*

public void putAll(java.util.Map<? extends K, ? extends V> m)





*java.util.AbstractMap.remove(Object)*

public |V| remove(java.lang.Object key)





*java.util.AbstractMap.size()*

public int size()





*java.util.AbstractMap.toString()*

public |java.lang.String| toString()

Returns a string representation of this map. The string representation consists 
of a list of key-value mappings in the order returned by the map's entrySet 
view's iterator, enclosed in braces ("{}"). Adjacent mappings are separated by 
the characters ", " (comma and space). Each key-value mapping is rendered as 
the key followed by an equals sign ("=") followed by the associated value. Keys 
and values are converted to strings as by (|java.lang.String|) . 



    Returns: a string representation of this map 

*java.util.AbstractMap.values()*

public |java.util.Collection|<V> values()






