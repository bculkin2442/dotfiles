*java.lang.String* *String* TheStringclass represents character strings.

public final class String
  extends    |java.lang.Object|
  implements |java.io.Serializable|
             |java.lang.Comparable|
             |java.lang.CharSequence|

|java.lang.String_Description|
|java.lang.String_Fields|
|java.lang.String_Constructors|
|java.lang.String_Methods|

================================================================================

*java.lang.String_Fields*
|java.util.Comparator<java.lang.String>_java.lang.String.CASE_INSENSITIVE_ORDER|

*java.lang.String_Constructors*
|java.lang.String()|Initializes a newly createdStringobject so that it represen
|java.lang.String(byte[])|Constructs a newStringby decoding the specified array
|java.lang.String(byte[],Charset)|Constructs a newStringby decoding the specifi
|java.lang.String(byte[],int)|Allocates a newStringcontaining characters constr
|java.lang.String(byte[],int,int)|Constructs a newStringby decoding the specifi
|java.lang.String(byte[],int,int,Charset)|Constructs a newStringby decoding the
|java.lang.String(byte[],int,int,int)|Allocates a newStringconstructed from a s
|java.lang.String(byte[],int,int,String)|Constructs a newStringby decoding the 
|java.lang.String(byte[],String)|Constructs a newStringby decoding the specifie
|java.lang.String(char[])|Allocates a newStringso that it represents the sequen
|java.lang.String(char[],int,int)|Allocates a newStringthat contains characters
|java.lang.String(int[],int,int)|Allocates a newStringthat contains characters 
|java.lang.String(String)|Initializes a newly createdStringobject so that it re
|java.lang.String(StringBuffer)|Allocates a new string that contains the sequen
|java.lang.String(StringBuilder)|Allocates a new string that contains the seque

*java.lang.String_Methods*
|java.lang.String.charAt(int)|Returns thecharvalue at the  specified index.
|java.lang.String.codePointAt(int)|Returns the character (Unicode code point) a
|java.lang.String.codePointBefore(int)|Returns the character (Unicode code poin
|java.lang.String.codePointCount(int,int)|Returns the number of Unicode code po
|java.lang.String.compareTo(String)|Compares two strings lexicographically.
|java.lang.String.compareToIgnoreCase(String)|Compares two strings lexicographi
|java.lang.String.concat(String)|Concatenates the specified string to the end o
|java.lang.String.contains(CharSequence)|Returns true if and only if this strin
|java.lang.String.contentEquals(CharSequence)|Compares this string to the speci
|java.lang.String.contentEquals(StringBuffer)|Compares this string to the speci
|java.lang.String.copyValueOf(char[])|Equivalent to#valueOf(char[]).
|java.lang.String.copyValueOf(char[],int,int)|Equivalent to#valueOf(char[], int
|java.lang.String.endsWith(String)|Tests if this string ends with the specified
|java.lang.String.equals(Object)|Compares this string to the specified object.
|java.lang.String.equalsIgnoreCase(String)|Compares thisStringto anotherString,
|java.lang.String.format(Locale,String,Object...)|Returns a formatted string us
|java.lang.String.format(String,Object...)|Returns a formatted string using the
|java.lang.String.getBytes()|Encodes thisStringinto a sequence of bytes using t
|java.lang.String.getBytes(Charset)|Encodes thisStringinto a sequence of bytes 
|java.lang.String.getBytes(int,int,byte[],int)|Copies characters from this stri
|java.lang.String.getBytes(String)|Encodes thisStringinto a sequence of bytes u
|java.lang.String.getChars(int,int,char[],int)|Copies characters from this stri
|java.lang.String.hashCode()|Returns a hash code for this string.
|java.lang.String.indexOf(int)|Returns the index within this string of the firs
|java.lang.String.indexOf(int,int)|Returns the index within this string of the 
|java.lang.String.indexOf(String)|Returns the index within this string of the f
|java.lang.String.indexOf(String,int)|Returns the index within this string of t
|java.lang.String.intern()|Returns a canonical representation for the string ob
|java.lang.String.isEmpty()|Returnstrueif, and only if,#length()is0.
|java.lang.String.join(CharSequence,CharSequence...)|Returns a new String compo
|java.lang.String.join(CharSequence,Iterable<?extendsCharSequence>)|Returns a n
|java.lang.String.lastIndexOf(int)|Returns the index within this string of the 
|java.lang.String.lastIndexOf(int,int)|Returns the index within this string of 
|java.lang.String.lastIndexOf(String)|Returns the index within this string of t
|java.lang.String.lastIndexOf(String,int)|Returns the index within this string 
|java.lang.String.length()|Returns the length of this string.
|java.lang.String.matches(String)|Tells whether or not this string matches the 
|java.lang.String.offsetByCodePoints(int,int)|Returns the index within thisStri
|java.lang.String.regionMatches(boolean,int,String,int,int)|Tests if two string
|java.lang.String.regionMatches(int,String,int,int)|Tests if two string regions
|java.lang.String.replace(char,char)|Returns a string resulting from replacing 
|java.lang.String.replace(CharSequence,CharSequence)|Replaces each substring of
|java.lang.String.replaceAll(String,String)|Replaces each substring of this str
|java.lang.String.replaceFirst(String,String)|Replaces the first substring of t
|java.lang.String.split(String)|Splits this string around matches of the given 
|java.lang.String.split(String,int)|Splits this string around matches of the gi
|java.lang.String.startsWith(String)|Tests if this string starts with the speci
|java.lang.String.startsWith(String,int)|Tests if the substring of this string 
|java.lang.String.subSequence(int,int)|Returns a character sequence that is a s
|java.lang.String.substring(int)|Returns a string that is a substring of this s
|java.lang.String.substring(int,int)|Returns a string that is a substring of th
|java.lang.String.toCharArray()|Converts this string to a new character array.
|java.lang.String.toLowerCase()|Converts all of the characters in thisStringto 
|java.lang.String.toLowerCase(Locale)|Converts all of the characters in thisStr
|java.lang.String.toString()|This object (which is already a string!) is itself
|java.lang.String.toUpperCase()|Converts all of the characters in thisStringto 
|java.lang.String.toUpperCase(Locale)|Converts all of the characters in thisStr
|java.lang.String.trim()|Returns a string whose value is this string, with any 
|java.lang.String.valueOf(boolean)|Returns the string representation of thebool
|java.lang.String.valueOf(char)|Returns the string representation of thechararg
|java.lang.String.valueOf(char[])|Returns the string representation of thechara
|java.lang.String.valueOf(char[],int,int)|Returns the string representation of 
|java.lang.String.valueOf(double)|Returns the string representation of thedoubl
|java.lang.String.valueOf(float)|Returns the string representation of thefloata
|java.lang.String.valueOf(int)|Returns the string representation of theintargum
|java.lang.String.valueOf(long)|Returns the string representation of thelongarg
|java.lang.String.valueOf(Object)|Returns the string representation of theObjec

*java.lang.String_Description*

TheStringclass represents character strings. All string literals in Java 
programs, such as"abc", are implemented as instances of this class. 

Strings are constant; their values cannot be changed after they are created. 
String buffers support mutable strings. Because String objects are immutable 
they can be shared. For example: 

String str = "abc"; 

is equivalent to: 

char data[] = {'a', 'b', 'c'}; String str = new String(data); 

Here are some more examples of how strings can be used: 

System.out.println("abc"); String cde = "cde"; System.out.println("abc" + cde); 
String c = "abc".substring(2,3); String d = cde.substring(1, 2); 

The classStringincludes methods for examining individual characters of the 
sequence, for comparing strings, for searching strings, for extracting 
substrings, and for creating a copy of a string with all characters translated 
to uppercase or to lowercase. Case mapping is based on the Unicode Standard 
version specified by the Character(|java.lang.Character|) class. 

The Java language provides special support for the string concatenation 
operator (+), and for conversion of other objects to strings. String 
concatenation is implemented through theStringBuilder(orStringBuffer) class and 
itsappendmethod. String conversions are implemented through the methodtoString, 
defined byObjectand inherited by all classes in Java. For additional 
information on string concatenation and conversion, see Gosling, Joy, and 
Steele, The Java Language Specification. 

Unless otherwise noted, passing a null argument to a constructor or method in 
this class will cause a (|java.lang.NullPointerException|) to be thrown. 

AStringrepresents a string in the UTF-16 format in which supplementary 
characters are represented by surrogate pairs (see the section Unicode 
Character Representations in theCharacterclass for more information). Index 
values refer tocharcode units, so a supplementary character uses two positions 
in aString. TheStringclass provides methods for dealing with Unicode code 
points (i.e., characters), in addition to those for dealing with Unicode code 
units (i.e.,charvalues). 



*java.util.Comparator<java.lang.String>_java.lang.String.CASE_INSENSITIVE_ORDER*

A Comparator that ordersStringobjects as bycompareToIgnoreCase. This comparator 
is serializable. 

Note that this Comparator does not take locale into account, and will result in 
an unsatisfactory ordering for certain locales. The java.text package provides 
Collators to allow locale-sensitive ordering. 



*java.lang.String()*

public String()

Initializes a newly createdStringobject so that it represents an empty 
character sequence. Note that use of this constructor is unnecessary since 
Strings are immutable. 


*java.lang.String(byte[])*

public String(byte[] bytes)

Constructs a newStringby decoding the specified array of bytes using the 
platform's default charset. The length of the newStringis a function of the 
charset, and hence may not be equal to the length of the byte array. 

The behavior of this constructor when the given bytes are not valid in the 
default charset is unspecified. The (|java.nio.charset.CharsetDecoder|) class 
should be used when more control over the decoding process is required. 

    bytes - The bytes to be decoded into characters 

*java.lang.String(byte[],Charset)*

public String(
  byte[] bytes,
  java.nio.charset.Charset charset)

Constructs a newStringby decoding the specified array of bytes using the 
specified charset(|java.nio.charset.Charset|) . The length of the newStringis a 
function of the charset, and hence may not be equal to the length of the byte 
array. 

This method always replaces malformed-input and unmappable-character sequences 
with this charset's default replacement string. The 
(|java.nio.charset.CharsetDecoder|) class should be used when more control over 
the decoding process is required. 

    bytes - The bytes to be decoded into characters 
    charset - The {@linkplain java.nio.charset.Charset charset} to be used to decode the 
       {@code bytes} 

*java.lang.String(byte[],int)*

public String(
  byte[] ascii,
  int hibyte)

Allocates a newStringcontaining characters constructed from an array of 8-bit 
integer values. Each character cin the resulting string is constructed from the 
corresponding component b in the byte array such that: 



c == (char)(((hibyte and 0xff) << 8) | (b and 0xff)) 

    ascii - The bytes to be converted to characters 
    hibyte - The top 8 bits of each 16-bit Unicode code unit 

*java.lang.String(byte[],int,int)*

public String(
  byte[] bytes,
  int offset,
  int length)

Constructs a newStringby decoding the specified subarray of bytes using the 
platform's default charset. The length of the newStringis a function of the 
charset, and hence may not be equal to the length of the subarray. 

The behavior of this constructor when the given bytes are not valid in the 
default charset is unspecified. The (|java.nio.charset.CharsetDecoder|) class 
should be used when more control over the decoding process is required. 

    bytes - The bytes to be decoded into characters 
    offset - The index of the first byte to decode 
    length - The number of bytes to decode 

*java.lang.String(byte[],int,int,Charset)*

public String(
  byte[] bytes,
  int offset,
  int length,
  java.nio.charset.Charset charset)

Constructs a newStringby decoding the specified subarray of bytes using the 
specified charset(|java.nio.charset.Charset|) . The length of the newStringis a 
function of the charset, and hence may not be equal to the length of the 
subarray. 

This method always replaces malformed-input and unmappable-character sequences 
with this charset's default replacement string. The 
(|java.nio.charset.CharsetDecoder|) class should be used when more control over 
the decoding process is required. 

    bytes - The bytes to be decoded into characters 
    offset - The index of the first byte to decode 
    length - The number of bytes to decode 
    charset - The {@linkplain java.nio.charset.Charset charset} to be used to decode the 
       {@code bytes} 

*java.lang.String(byte[],int,int,int)*

public String(
  byte[] ascii,
  int hibyte,
  int offset,
  int count)

Allocates a newStringconstructed from a subarray of an array of 8-bit integer 
values. 

Theoffsetargument is the index of the first byte of the subarray, and 
thecountargument specifies the length of the subarray. 

Eachbytein the subarray is converted to acharas specified in the method above. 

    ascii - The bytes to be converted to characters 
    hibyte - The top 8 bits of each 16-bit Unicode code unit 
    offset - The initial offset 
    count - The length 

*java.lang.String(byte[],int,int,String)*

public String(
  byte[] bytes,
  int offset,
  int length,
  java.lang.String charsetName)
  throws |java.io.UnsupportedEncodingException|
         
Constructs a newStringby decoding the specified subarray of bytes using the 
specified charset. The length of the newStringis a function of the charset, and 
hence may not be equal to the length of the subarray. 

The behavior of this constructor when the given bytes are not valid in the 
given charset is unspecified. The (|java.nio.charset.CharsetDecoder|) class 
should be used when more control over the decoding process is required. 

    bytes - The bytes to be decoded into characters 
    offset - The index of the first byte to decode 
    length - The number of bytes to decode 
    charsetName - The name of a supported {@linkplain java.nio.charset.Charset charset} 

*java.lang.String(byte[],String)*

public String(
  byte[] bytes,
  java.lang.String charsetName)
  throws |java.io.UnsupportedEncodingException|
         
Constructs a newStringby decoding the specified array of bytes using the 
specified charset(|java.nio.charset.Charset|) . The length of the newStringis a 
function of the charset, and hence may not be equal to the length of the byte 
array. 

The behavior of this constructor when the given bytes are not valid in the 
given charset is unspecified. The (|java.nio.charset.CharsetDecoder|) class 
should be used when more control over the decoding process is required. 

    bytes - The bytes to be decoded into characters 
    charsetName - The name of a supported {@linkplain java.nio.charset.Charset charset} 

*java.lang.String(char[])*

public String(char[] value)

Allocates a newStringso that it represents the sequence of characters currently 
contained in the character array argument. The contents of the character array 
are copied; subsequent modification of the character array does not affect the 
newly created string. 

    value - The initial value of the string 

*java.lang.String(char[],int,int)*

public String(
  char[] value,
  int offset,
  int count)

Allocates a newStringthat contains characters from a subarray of the character 
array argument. Theoffsetargument is the index of the first character of the 
subarray and thecountargument specifies the length of the subarray. The 
contents of the subarray are copied; subsequent modification of the character 
array does not affect the newly created string. 

    value - Array that is the source of characters 
    offset - The initial offset 
    count - The length 

*java.lang.String(int[],int,int)*

public String(
  int[] codePoints,
  int offset,
  int count)

Allocates a newStringthat contains characters from a subarray of the Unicode 
code point array argument. Theoffsetargument is the index of the first code 
point of the subarray and thecountargument specifies the length of the 
subarray. The contents of the subarray are converted tochars; subsequent 
modification of theintarray does not affect the newly created string. 

    codePoints - Array that is the source of Unicode code points 
    offset - The initial offset 
    count - The length 

*java.lang.String(String)*

public String(java.lang.String original)

Initializes a newly createdStringobject so that it represents the same sequence 
of characters as the argument; in other words, the newly created string is a 
copy of the argument string. Unless an explicit copy oforiginalis needed, use 
of this constructor is unnecessary since Strings are immutable. 

    original - A {@code String} 

*java.lang.String(StringBuffer)*

public String(java.lang.StringBuffer buffer)

Allocates a new string that contains the sequence of characters currently 
contained in the string buffer argument. The contents of the string buffer are 
copied; subsequent modification of the string buffer does not affect the newly 
created string. 

    buffer - A {@code StringBuffer} 

*java.lang.String(StringBuilder)*

public String(java.lang.StringBuilder builder)

Allocates a new string that contains the sequence of characters currently 
contained in the string builder argument. The contents of the string builder 
are copied; subsequent modification of the string builder does not affect the 
newly created string. 

This constructor is provided to ease migration toStringBuilder. Obtaining a 
string from a string builder via thetoStringmethod is likely to run faster and 
is generally preferred. 

    builder - A {@code StringBuilder} 

*java.lang.String.charAt(int)*

public char charAt(int index)

Returns thecharvalue at the specified index. An index ranges from0tolength() - 
1. The firstcharvalue of the sequence is at index0, the next at index1, and so 
on, as for array indexing. 

If thecharvalue specified by the index is a surrogate, the surrogate value is 
returned. 


    index - the index of the {@code char} value. 

    Returns: the {@code char} value at the specified index of this string. The first {@code 
             char} value is at index {@code 0}. 

*java.lang.String.codePointAt(int)*

public int codePointAt(int index)

Returns the character (Unicode code point) at the specified index. The index 
refers tocharvalues (Unicode code units) and ranges from0to 
(|java.lang.String|) - 1. 

If thecharvalue specified at the given index is in the high-surrogate range, 
the following index is less than the length of thisString, and thecharvalue at 
the following index is in the low-surrogate range, then the supplementary code 
point corresponding to this surrogate pair is returned. Otherwise, thecharvalue 
at the given index is returned. 


    index - the index to the {@code char} values 

    Returns: the code point value of the character at the {@code index} 

*java.lang.String.codePointBefore(int)*

public int codePointBefore(int index)

Returns the character (Unicode code point) before the specified index. The 
index refers tocharvalues (Unicode code units) and ranges from1to 
length(|java.lang.CharSequence|) . 

If thecharvalue at(index - 1)is in the low-surrogate range,(index - 2)is not 
negative, and thecharvalue at(index - 2)is in the high-surrogate range, then 
the supplementary code point value of the surrogate pair is returned. If 
thecharvalue atindex - 1is an unpaired low-surrogate or a high-surrogate, the 
surrogate value is returned. 


    index - the index following the code point that should be returned 

    Returns: the Unicode code point value before the given index. 

*java.lang.String.codePointCount(int,int)*

public int codePointCount(
  int beginIndex,
  int endIndex)

Returns the number of Unicode code points in the specified text range of 
thisString. The text range begins at the specifiedbeginIndexand extends to 
thecharat indexendIndex - 1. Thus the length (inchars) of the text range 
isendIndex-beginIndex. Unpaired surrogates within the text range count as one 
code point each. 


    beginIndex - the index to the first {@code char} of the text range. 
    endIndex - the index after the last {@code char} of the text range. 

    Returns: the number of Unicode code points in the specified text range 

*java.lang.String.compareTo(String)*

public int compareTo(java.lang.String anotherString)

Compares two strings lexicographically. The comparison is based on the Unicode 
value of each character in the strings. The character sequence represented by 
thisStringobject is compared lexicographically to the character sequence 
represented by the argument string. The result is a negative integer if 
thisStringobject lexicographically precedes the argument string. The result is 
a positive integer if thisStringobject lexicographically follows the argument 
string. The result is zero if the strings are equal;compareToreturns0exactly 
when the (|java.lang.String|) method would returntrue. 

This is the definition of lexicographic ordering. If two strings are different, 
then either they have different characters at some index that is a valid index 
for both strings, or their lengths are different, or both. If they have 
different characters at one or more index positions, let k be the smallest such 
index; then the string whose character at position k has the smaller value, as 
determined by using the < operator, lexicographically precedes the other 
string. In this case,compareToreturns the difference of the two character 
values at positionkin the two string -- that is, the value: 

this.charAt(k)-anotherString.charAt(k) 

If there is no index position at which they differ, then the shorter string 
lexicographically precedes the longer string. In this case,compareToreturns the 
difference of the lengths of the strings -- that is, the value: 

this.length()-anotherString.length() 


    anotherString - the {@code String} to be compared. 

    Returns: the value {@code 0} if the argument string is equal to this string; a value 
             less than {@code 0} if this string is lexicographically less than 
             the string argument; and a value greater than {@code 0} if this 
             string is lexicographically greater than the string argument. 

*java.lang.String.compareToIgnoreCase(String)*

public int compareToIgnoreCase(java.lang.String str)

Compares two strings lexicographically, ignoring case differences. This method 
returns an integer whose sign is that of callingcompareTowith normalized 
versions of the strings where case differences have been eliminated by 
callingCharacter.toLowerCase(Character.toUpperCase(character))on each 
character. 

Note that this method does not take locale into account, and will result in an 
unsatisfactory ordering for certain locales. The java.text package provides 
collators to allow locale-sensitive ordering. 


    str - the {@code String} to be compared. 

    Returns: a negative integer, zero, or a positive integer as the specified String is 
             greater than, equal to, or less than this String, ignoring case 
             considerations. 

*java.lang.String.concat(String)*

public |java.lang.String| concat(java.lang.String str)

Concatenates the specified string to the end of this string. 

If the length of the argument string is0, then thisStringobject is returned. 
Otherwise, aStringobject is returned that represents a character sequence that 
is the concatenation of the character sequence represented by thisStringobject 
and the character sequence represented by the argument string. Examples: 

"cares".concat("s") returns "caress" "to".concat("get").concat("her") returns 
"together" 


    str - the {@code String} that is concatenated to the end of this {@code String}. 

    Returns: a string that represents the concatenation of this object's characters followed 
             by the string argument's characters. 

*java.lang.String.contains(CharSequence)*

public boolean contains(java.lang.CharSequence s)

Returns true if and only if this string contains the specified sequence of char 
values. 


    s - the sequence to search for 

    Returns: true if this string contains {@code s}, false otherwise 

*java.lang.String.contentEquals(CharSequence)*

public boolean contentEquals(java.lang.CharSequence cs)

Compares this string to the specifiedCharSequence. The result istrueif and only 
if thisStringrepresents the same sequence of char values as the specified 
sequence. Note that if theCharSequenceis aStringBufferthen the method 
synchronizes on it. 


    cs - The sequence to compare this {@code String} against 

    Returns: {@code true} if this {@code String} represents the same sequence of char values 
             as the specified sequence, {@code false} otherwise 

*java.lang.String.contentEquals(StringBuffer)*

public boolean contentEquals(java.lang.StringBuffer sb)

Compares this string to the specifiedStringBuffer. The result istrueif and only 
if thisStringrepresents the same sequence of characters as the 
specifiedStringBuffer. This method synchronizes on theStringBuffer. 


    sb - The {@code StringBuffer} to compare this {@code String} against 

    Returns: {@code true} if this {@code String} represents the same sequence of characters 
             as the specified {@code StringBuffer}, {@code false} otherwise 

*java.lang.String.copyValueOf(char[])*

public static |java.lang.String| copyValueOf(char[] data)

Equivalent to (|java.lang.String|) . 


    data - the character array. 

    Returns: a {@code String} that contains the characters of the character array. 

*java.lang.String.copyValueOf(char[],int,int)*

public static |java.lang.String| copyValueOf(
  char[] data,
  int offset,
  int count)

Equivalent to (|java.lang.String|) . 


    data - the character array. 
    offset - initial offset of the subarray. 
    count - length of the subarray. 

    Returns: a {@code String} that contains the characters of the specified subarray of the 
             character array. 

*java.lang.String.endsWith(String)*

public boolean endsWith(java.lang.String suffix)

Tests if this string ends with the specified suffix. 


    suffix - the suffix. 

    Returns: {@code true} if the character sequence represented by the argument is a suffix 
             of the character sequence represented by this object; {@code 
             false} otherwise. Note that the result will be {@code true} if the 
             argument is the empty string or is equal to this {@code String} 
             object as determined by the {@link #equals(Object)} method. 

*java.lang.String.equals(Object)*

public boolean equals(java.lang.Object anObject)

Compares this string to the specified object. The result istrueif and only if 
the argument is notnulland is aStringobject that represents the same sequence 
of characters as this object. 


    anObject - The object to compare this {@code String} against 

    Returns: {@code true} if the given object represents a {@code String} equivalent to this 
             string, {@code false} otherwise 

*java.lang.String.equalsIgnoreCase(String)*

public boolean equalsIgnoreCase(java.lang.String anotherString)

Compares thisStringto anotherString, ignoring case considerations. Two strings 
are considered equal ignoring case if they are of the same length and 
corresponding characters in the two strings are equal ignoring case. 

Two charactersc1andc2are considered the same ignoring case if at least one of 
the following is true: 

The two characters are the same (as compared by the==operator) Applying the 
method (|java.lang.Character|) to each character produces the same result 
Applying the method (|java.lang.Character|) to each character produces the same 
result 


    anotherString - The {@code String} to compare this {@code String} against 

    Returns: {@code true} if the argument is not {@code null} and it represents an 
             equivalent {@code String} ignoring case; {@code false} otherwise 

*java.lang.String.format(Locale,String,Object...)*

public static |java.lang.String| format(
  java.util.Locale l,
  java.lang.String format,
  java.lang.Object[] args)

Returns a formatted string using the specified locale, format string, and 
arguments. 


    l - The {@linkplain java.util.Locale locale} to apply during formatting. If {@code 
       l} is {@code null} then no localization is applied. 
    format - A format string 
    args - Arguments referenced by the format specifiers in the format string. If there 
       are more arguments than format specifiers, the extra arguments are 
       ignored. The number of arguments is variable and may be zero. The 
       maximum number of arguments is limited by the maximum dimension of a 
       Java array as defined by The Java Virtual Machine Specification. The 
       behaviour on a {@code null} argument depends on the conversion. 

    Returns: A formatted string 

*java.lang.String.format(String,Object...)*

public static |java.lang.String| format(
  java.lang.String format,
  java.lang.Object[] args)

Returns a formatted string using the specified format string and arguments. 

The locale always used is the one returned by 
Locale.getDefault()(|java.util.Locale|) . 


    format - A format string 
    args - Arguments referenced by the format specifiers in the format string. If there 
       are more arguments than format specifiers, the extra arguments are 
       ignored. The number of arguments is variable and may be zero. The 
       maximum number of arguments is limited by the maximum dimension of a 
       Java array as defined by The Java Virtual Machine Specification. The 
       behaviour on a {@code null} argument depends on the conversion. 

    Returns: A formatted string 

*java.lang.String.getBytes()*

public byte[] getBytes()

Encodes thisStringinto a sequence of bytes using the platform's default 
charset, storing the result into a new byte array. 

The behavior of this method when this string cannot be encoded in the default 
charset is unspecified. The (|java.nio.charset.CharsetEncoder|) class should be 
used when more control over the encoding process is required. 



    Returns: The resultant byte array 

*java.lang.String.getBytes(Charset)*

public byte[] getBytes(java.nio.charset.Charset charset)

Encodes thisStringinto a sequence of bytes using the given 
charset(|java.nio.charset.Charset|) , storing the result into a new byte array. 

This method always replaces malformed-input and unmappable-character sequences 
with this charset's default replacement byte array. The 
(|java.nio.charset.CharsetEncoder|) class should be used when more control over 
the encoding process is required. 


    charset - The {@linkplain java.nio.charset.Charset} to be used to encode the {@code 
       String} 

    Returns: The resultant byte array 

*java.lang.String.getBytes(int,int,byte[],int)*

public void getBytes(
  int srcBegin,
  int srcEnd,
  byte[] dst,
  int dstBegin)

Copies characters from this string into the destination byte array. Each byte 
receives the 8 low-order bits of the corresponding character. The eight 
high-order bits of each character are not copied and do not participate in the 
transfer in any way. 

The first character to be copied is at indexsrcBegin; the last character to be 
copied is at indexsrcEnd-1. The total number of characters to be copied 
issrcEnd-srcBegin. The characters, converted to bytes, are copied into the 
subarray ofdststarting at indexdstBeginand ending at index: 



dstbegin + (srcEnd-srcBegin) - 1 

    Deprecated: This method does not properly convert characters into
 bytes.  As of JDK&nbsp;1.1, the preferred way to do this is via the
 {@link #getBytes()} method, which uses the platform's default charset.

    srcBegin - Index of the first character in the string to copy 
    srcEnd - Index after the last character in the string to copy 
    dst - The destination array 
    dstBegin - The start offset in the destination array 

*java.lang.String.getBytes(String)*

public byte[] getBytes(java.lang.String charsetName)
  throws |java.io.UnsupportedEncodingException|
         
Encodes thisStringinto a sequence of bytes using the named charset, storing the 
result into a new byte array. 

The behavior of this method when this string cannot be encoded in the given 
charset is unspecified. The (|java.nio.charset.CharsetEncoder|) class should be 
used when more control over the encoding process is required. 


    charsetName - The name of a supported {@linkplain java.nio.charset.Charset charset} 

    Returns: The resultant byte array 

*java.lang.String.getChars(int,int,char[],int)*

public void getChars(
  int srcBegin,
  int srcEnd,
  char[] dst,
  int dstBegin)

Copies characters from this string into the destination character array. 

The first character to be copied is at indexsrcBegin; the last character to be 
copied is at indexsrcEnd-1(thus the total number of characters to be copied 
issrcEnd-srcBegin). The characters are copied into the subarray ofdststarting 
at indexdstBeginand ending at index: 

dstbegin + (srcEnd-srcBegin) - 1 


    srcBegin - index of the first character in the string to copy. 
    srcEnd - index after the last character in the string to copy. 
    dst - the destination array. 
    dstBegin - the start offset in the destination array. 

*java.lang.String.hashCode()*

public int hashCode()

Returns a hash code for this string. The hash code for aStringobject is 
computed as 

s[0]*31^(n-1) + s[1]*31^(n-2) + ... + s[n-1] 

usingintarithmetic, wheres[i]is the ith character of the string,nis the length 
of the string, and^indicates exponentiation. (The hash value of the empty 
string is zero.) 



    Returns: a hash code value for this object. 

*java.lang.String.indexOf(int)*

public int indexOf(int ch)

Returns the index within this string of the first occurrence of the specified 
character. If a character with valuechoccurs in the character sequence 
represented by thisStringobject, then the index (in Unicode code units) of the 
first such occurrence is returned. For values ofchin the range from 0 to 0xFFFF 
(inclusive), this is the smallest value k such that: 

this.charAt(k) == ch 

is true. For other values ofch, it is the smallest value k such that: 

this.codePointAt(k) == ch 

is true. In either case, if no such character occurs in this string, then-1is 
returned. 


    ch - a character (Unicode code point). 

    Returns: the index of the first occurrence of the character in the character sequence 
             represented by this object, or {@code -1} if the character does 
             not occur. 

*java.lang.String.indexOf(int,int)*

public int indexOf(
  int ch,
  int fromIndex)

Returns the index within this string of the first occurrence of the specified 
character, starting the search at the specified index. 

If a character with valuechoccurs in the character sequence represented by 
thisStringobject at an index no smaller thanfromIndex, then the index of the 
first such occurrence is returned. For values ofchin the range from 0 to 0xFFFF 
(inclusive), this is the smallest value k such that: 

(this.charAt(k) == ch)&&(k >= fromIndex) 

is true. For other values ofch, it is the smallest value k such that: 

(this.codePointAt(k) == ch)&&(k >= fromIndex) 

is true. In either case, if no such character occurs in this string at or after 
positionfromIndex, then-1is returned. 

There is no restriction on the value offromIndex. If it is negative, it has the 
same effect as if it were zero: this entire string may be searched. If it is 
greater than the length of this string, it has the same effect as if it were 
equal to the length of this string:-1is returned. 

All indices are specified incharvalues (Unicode code units). 


    ch - a character (Unicode code point). 
    fromIndex - the index to start the search from. 

    Returns: the index of the first occurrence of the character in the character sequence 
             represented by this object that is greater than or equal to {@code 
             fromIndex}, or {@code -1} if the character does not occur. 

*java.lang.String.indexOf(String)*

public int indexOf(java.lang.String str)

Returns the index within this string of the first occurrence of the specified 
substring. 

The returned index is the smallest value k for which: 

this.startsWith(str, k) 

If no such value of k exists, then-1is returned. 


    str - the substring to search for. 

    Returns: the index of the first occurrence of the specified substring, or {@code -1} if 
             there is no such occurrence. 

*java.lang.String.indexOf(String,int)*

public int indexOf(
  java.lang.String str,
  int fromIndex)

Returns the index within this string of the first occurrence of the specified 
substring, starting at the specified index. 

The returned index is the smallest value k for which: 

k >= fromIndex&&this.startsWith(str, k) 

If no such value of k exists, then-1is returned. 


    str - the substring to search for. 
    fromIndex - the index from which to start the search. 

    Returns: the index of the first occurrence of the specified substring, starting at the 
             specified index, or {@code -1} if there is no such occurrence. 

*java.lang.String.intern()*

public native |java.lang.String| intern()

Returns a canonical representation for the string object. 

A pool of strings, initially empty, is maintained privately by the classString. 

When the intern method is invoked, if the pool already contains a string equal 
to thisStringobject as determined by the (|java.lang.String|) method, then the 
string from the pool is returned. Otherwise, thisStringobject is added to the 
pool and a reference to thisStringobject is returned. 

It follows that for any two stringssandt,s.intern() == t.intern()istrueif and 
only ifs.equals(t)istrue. 

All literal strings and string-valued constant expressions are interned. String 
literals are defined in section 3.10.5 of the The Java Language Specification. 



    Returns: a string that has the same contents as this string, but is guaranteed to be 
             from a pool of unique strings. 

*java.lang.String.isEmpty()*

public boolean isEmpty()

Returnstrueif, and only if, (|java.lang.String|) is0. 



    Returns: {@code true} if {@link #length()} is {@code 0}, otherwise {@code false} 

*java.lang.String.join(CharSequence,CharSequence...)*

public static |java.lang.String| join(
  java.lang.CharSequence delimiter,
  java.lang.CharSequence[] elements)

Returns a new String composed of copies of theCharSequence elementsjoined 
together with a copy of the specifieddelimiter. 

For example, 

String message = String.join("-", "Java", "is", "cool"); // message returned 
is: "Java-is-cool" 

Note that if an element is null, then"null"is added. 


    delimiter - the delimiter that separates each element 
    elements - the elements to join together. 

    Returns: a new {@code String} that is composed of the {@code elements} separated by the 
             {@code delimiter} 

*java.lang.String.join(CharSequence,Iterable<?extendsCharSequence>)*

public static |java.lang.String| join(
  java.lang.CharSequence delimiter,
  java.lang.Iterable<? extends java.lang.CharSequence> elements)

Returns a newStringcomposed of copies of theCharSequence elementsjoined 
together with a copy of the specifieddelimiter. 

For example, 

List strings = new LinkedList<>(); strings.add("Java");strings.add("is"); 
strings.add("cool"); String message = String.join(" ", strings); //message 
returned is: "Java is cool" 

Set strings = new LinkedHashSet<>(); strings.add("Java"); strings.add("is"); 
strings.add("very"); strings.add("cool"); String message = String.join("-", 
strings); //message returned is: "Java-is-very-cool" 

Note that if an individual element isnull, then"null"is added. 


    delimiter - a sequence of characters that is used to separate each of the {@code elements} 
       in the resulting {@code String} 
    elements - an {@code Iterable} that will have its {@code elements} joined together. 

    Returns: a new {@code String} that is composed from the {@code elements} argument 

*java.lang.String.lastIndexOf(int)*

public int lastIndexOf(int ch)

Returns the index within this string of the last occurrence of the specified 
character. For values ofchin the range from 0 to 0xFFFF (inclusive), the index 
(in Unicode code units) returned is the largest value k such that: 

this.charAt(k) == ch 

is true. For other values ofch, it is the largest value k such that: 

this.codePointAt(k) == ch 

is true. In either case, if no such character occurs in this string, then-1is 
returned. TheStringis searched backwards starting at the last character. 


    ch - a character (Unicode code point). 

    Returns: the index of the last occurrence of the character in the character sequence 
             represented by this object, or {@code -1} if the character does 
             not occur. 

*java.lang.String.lastIndexOf(int,int)*

public int lastIndexOf(
  int ch,
  int fromIndex)

Returns the index within this string of the last occurrence of the specified 
character, searching backward starting at the specified index. For values 
ofchin the range from 0 to 0xFFFF (inclusive), the index returned is the 
largest value k such that: 

(this.charAt(k) == ch)&&(k <= fromIndex) 

is true. For other values ofch, it is the largest value k such that: 

(this.codePointAt(k) == ch)&&(k <= fromIndex) 

is true. In either case, if no such character occurs in this string at or 
before positionfromIndex, then-1is returned. 

All indices are specified incharvalues (Unicode code units). 


    ch - a character (Unicode code point). 
    fromIndex - the index to start the search from. There is no restriction on the value of 
       {@code fromIndex}. If it is greater than or equal to the length of this 
       string, it has the same effect as if it were equal to one less than the 
       length of this string: this entire string may be searched. If it is 
       negative, it has the same effect as if it were -1: -1 is returned. 

    Returns: the index of the last occurrence of the character in the character sequence 
             represented by this object that is less than or equal to {@code 
             fromIndex}, or {@code -1} if the character does not occur before 
             that point. 

*java.lang.String.lastIndexOf(String)*

public int lastIndexOf(java.lang.String str)

Returns the index within this string of the last occurrence of the specified 
substring. The last occurrence of the empty string "" is considered to occur at 
the index valuethis.length(). 

The returned index is the largest value k for which: 

this.startsWith(str, k) 

If no such value of k exists, then-1is returned. 


    str - the substring to search for. 

    Returns: the index of the last occurrence of the specified substring, or {@code -1} if 
             there is no such occurrence. 

*java.lang.String.lastIndexOf(String,int)*

public int lastIndexOf(
  java.lang.String str,
  int fromIndex)

Returns the index within this string of the last occurrence of the specified 
substring, searching backward starting at the specified index. 

The returned index is the largest value k for which: 

k<=fromIndex&&this.startsWith(str, k) 

If no such value of k exists, then-1is returned. 


    str - the substring to search for. 
    fromIndex - the index to start the search from. 

    Returns: the index of the last occurrence of the specified substring, searching backward 
             from the specified index, or {@code -1} if there is no such 
             occurrence. 

*java.lang.String.length()*

public int length()

Returns the length of this string. The length is equal to the number of Unicode 
code units in the string. 



    Returns: the length of the sequence of characters represented by this object. 

*java.lang.String.matches(String)*

public boolean matches(java.lang.String regex)

Tells whether or not this string matches the given regular expression. 

An invocation of this method of the form str.matches(regex)yields exactly the 
same result as the expression 

(|java.util.regex.Pattern|) . matches(<i>regex</i>, 
<i>str</i>)(|java.util.regex.Pattern|) 


    regex - the regular expression to which this string is to be matched 

    Returns: {@code true} if, and only if, this string matches the given regular expression 

*java.lang.String.offsetByCodePoints(int,int)*

public int offsetByCodePoints(
  int index,
  int codePointOffset)

Returns the index within thisStringthat is offset from the 
givenindexbycodePointOffsetcode points. Unpaired surrogates within the text 
range given byindexandcodePointOffsetcount as one code point each. 


    index - the index to be offset 
    codePointOffset - the offset in code points 

    Returns: the index within this {@code String} 

*java.lang.String.regionMatches(boolean,int,String,int,int)*

public boolean regionMatches(
  boolean ignoreCase,
  int toffset,
  java.lang.String other,
  int ooffset,
  int len)

Tests if two string regions are equal. 

A substring of thisStringobject is compared to a substring of the 
argumentother. The result istrueif these substrings represent character 
sequences that are the same, ignoring case if and only ifignoreCaseis true. The 
substring of thisStringobject to be compared begins at indextoffsetand has 
lengthlen. The substring ofotherto be compared begins at indexooffsetand has 
lengthlen. The result isfalseif and only if at least one of the following is 
true: toffsetis negative. ooffsetis negative. toffset+lenis greater than the 
length of thisStringobject. ooffset+lenis greater than the length of the other 
argument. ignoreCaseisfalseand there is some nonnegative integer k less 
thanlensuch that: 

this.charAt(toffset+k) != other.charAt(ooffset+k) 

ignoreCaseistrueand there is some nonnegative integer k less thanlensuch that: 

Character.toLowerCase(this.charAt(toffset+k)) != 
Character.toLowerCase(other.charAt(ooffset+k)) 

and: 

Character.toUpperCase(this.charAt(toffset+k)) != 
Character.toUpperCase(other.charAt(ooffset+k)) 




    ignoreCase - if {@code true}, ignore case when comparing characters. 
    toffset - the starting offset of the subregion in this string. 
    other - the string argument. 
    ooffset - the starting offset of the subregion in the string argument. 
    len - the number of characters to compare. 

    Returns: {@code true} if the specified subregion of this string matches the specified 
             subregion of the string argument; {@code false} otherwise. Whether 
             the matching is exact or case insensitive depends on the {@code 
             ignoreCase} argument. 

*java.lang.String.regionMatches(int,String,int,int)*

public boolean regionMatches(
  int toffset,
  java.lang.String other,
  int ooffset,
  int len)

Tests if two string regions are equal. 

A substring of thisStringobject is compared to a substring of the argument 
other. The result is true if these substrings represent identical character 
sequences. The substring of thisStringobject to be compared begins at 
indextoffsetand has lengthlen. The substring of other to be compared begins at 
indexooffsetand has lengthlen. The result isfalseif and only if at least one of 
the following is true: toffsetis negative. ooffsetis negative. toffset+lenis 
greater than the length of thisStringobject. ooffset+lenis greater than the 
length of the other argument. There is some nonnegative integer k less 
thanlensuch that:this.charAt(toffset +k) != other.charAt(ooffset +k) 


    toffset - the starting offset of the subregion in this string. 
    other - the string argument. 
    ooffset - the starting offset of the subregion in the string argument. 
    len - the number of characters to compare. 

    Returns: {@code true} if the specified subregion of this string exactly matches the 
             specified subregion of the string argument; {@code false} 
             otherwise. 

*java.lang.String.replace(char,char)*

public |java.lang.String| replace(
  char oldChar,
  char newChar)

Returns a string resulting from replacing all occurrences ofoldCharin this 
string withnewChar. 

If the characteroldChardoes not occur in the character sequence represented by 
thisStringobject, then a reference to thisStringobject is returned. Otherwise, 
aStringobject is returned that represents a character sequence identical to the 
character sequence represented by thisStringobject, except that every 
occurrence ofoldCharis replaced by an occurrence ofnewChar. 

Examples: 

"mesquite in your cellar".replace('e', 'o') returns "mosquito in your collar" 
"the war of baronets".replace('r', 'y') returns "the way of bayonets" "sparring 
with a purple porpoise".replace('p', 't') returns "starring with a turtle 
tortoise" "JonL".replace('q', 'x') returns "JonL" (no change) 


    oldChar - the old character. 
    newChar - the new character. 

    Returns: a string derived from this string by replacing every occurrence of {@code 
             oldChar} with {@code newChar}. 

*java.lang.String.replace(CharSequence,CharSequence)*

public |java.lang.String| replace(
  java.lang.CharSequence target,
  java.lang.CharSequence replacement)

Replaces each substring of this string that matches the literal target sequence 
with the specified literal replacement sequence. The replacement proceeds from 
the beginning of the string to the end, for example, replacing "aa" with "b" in 
the string "aaa" will result in "ba" rather than "ab". 


    target - The sequence of char values to be replaced 
    replacement - The replacement sequence of char values 

    Returns: The resulting string 

*java.lang.String.replaceAll(String,String)*

public |java.lang.String| replaceAll(
  java.lang.String regex,
  java.lang.String replacement)

Replaces each substring of this string that matches the given regular 
expression with the given replacement. 

An invocation of this method of the form str.replaceAll(regex,repl)yields 
exactly the same result as the expression 

(|java.util.regex.Pattern|) . compile(|java.util.regex.Pattern|) (regex). 
matcher(|java.util.regex.Pattern|) (str). replaceAll(|java.util.regex.Matcher|) 
(repl) 



Note that backslashes (\) and dollar signs ($) in the replacement string may 
cause the results to be different than if it were being treated as a literal 
replacement string; see Matcher.replaceAll(|java.util.regex.Matcher|) . Use 
(|java.util.regex.Matcher|) to suppress the special meaning of these 
characters, if desired. 


    regex - the regular expression to which this string is to be matched 
    replacement - the string to be substituted for each match 

    Returns: The resulting {@code String} 

*java.lang.String.replaceFirst(String,String)*

public |java.lang.String| replaceFirst(
  java.lang.String regex,
  java.lang.String replacement)

Replaces the first substring of this string that matches the given regular 
expression with the given replacement. 

An invocation of this method of the form str.replaceFirst(regex,repl)yields 
exactly the same result as the expression 

(|java.util.regex.Pattern|) . compile(|java.util.regex.Pattern|) (regex). 
matcher(|java.util.regex.Pattern|) (str). 
replaceFirst(|java.util.regex.Matcher|) (repl) 



Note that backslashes (\) and dollar signs ($) in the replacement string may 
cause the results to be different than if it were being treated as a literal 
replacement string; see (|java.util.regex.Matcher|) . Use 
(|java.util.regex.Matcher|) to suppress the special meaning of these 
characters, if desired. 


    regex - the regular expression to which this string is to be matched 
    replacement - the string to be substituted for the first match 

    Returns: The resulting {@code String} 

*java.lang.String.split(String)*

public |java.lang.String|[] split(java.lang.String regex)

Splits this string around matches of the given regular expression. 

This method works as if by invoking the two-argument split(|java.lang.String|) 
method with the given expression and a limit argument of zero. Trailing empty 
strings are therefore not included in the resulting array. 

The string"boo:and:foo", for example, yields the following results with these 
expressions: 



Regex Result 

: { "boo", "and", "foo" } o { "b", "", ":and:f" } 


    regex - the delimiting regular expression 

    Returns: the array of strings computed by splitting this string around matches of the 
             given regular expression 

*java.lang.String.split(String,int)*

public |java.lang.String|[] split(
  java.lang.String regex,
  int limit)

Splits this string around matches of the given regular expression. 

The array returned by this method contains each substring of this string that 
is terminated by another substring that matches the given expression or is 
terminated by the end of the string. The substrings in the array are in the 
order in which they occur in this string. If the expression does not match any 
part of the input then the resulting array has just one element, namely this 
string. 

When there is a positive-width match at the beginning of this string then an 
empty leading substring is included at the beginning of the resulting array. A 
zero-width match at the beginning however never produces such empty leading 
substring. 

Thelimitparameter controls the number of times the pattern is applied and 
therefore affects the length of the resulting array. If the limit n is greater 
than zero then the pattern will be applied at most n-1 times, the array's 
length will be no greater than n, and the array's last entry will contain all 
input beyond the last matched delimiter. If n is non-positive then the pattern 
will be applied as many times as possible and the array can have any length. If 
n is zero then the pattern will be applied as many times as possible, the array 
can have any length, and trailing empty strings will be discarded. 

The string"boo:and:foo", for example, yields the following results with these 
parameters: 



Regex Limit Result 

: 2 { "boo", "and:foo" } : 5 { "boo", "and", "foo" } : -2 { "boo", "and", "foo" 
} o 5 { "b", "", ":and:f", "", "" } o -2 { "b", "", ":and:f", "", "" } o 0 { 
"b", "", ":and:f" } 

An invocation of this method of the form str.split(regex,n)yields the same 
result as the expression 

(|java.util.regex.Pattern|) . compile(|java.util.regex.Pattern|) (regex). 
split(|java.util.regex.Pattern|) (str,n) 




    regex - the delimiting regular expression 
    limit - the result threshold, as described above 

    Returns: the array of strings computed by splitting this string around matches of the 
             given regular expression 

*java.lang.String.startsWith(String)*

public boolean startsWith(java.lang.String prefix)

Tests if this string starts with the specified prefix. 


    prefix - the prefix. 

    Returns: {@code true} if the character sequence represented by the argument is a prefix 
             of the character sequence represented by this string; {@code 
             false} otherwise. Note also that {@code true} will be returned if 
             the argument is an empty string or is equal to this {@code String} 
             object as determined by the {@link #equals(Object)} method. 

*java.lang.String.startsWith(String,int)*

public boolean startsWith(
  java.lang.String prefix,
  int toffset)

Tests if the substring of this string beginning at the specified index starts 
with the specified prefix. 


    prefix - the prefix. 
    toffset - where to begin looking in this string. 

    Returns: {@code true} if the character sequence represented by the argument is a prefix 
             of the substring of this object starting at index {@code toffset}; 
             {@code false} otherwise. The result is {@code false} if {@code 
             toffset} is negative or greater than the length of this {@code 
             String} object; otherwise the result is the same as the result of 
             the expression 

this.substring(toffset).startsWith(prefix) 

*java.lang.String.subSequence(int,int)*

public |java.lang.CharSequence| subSequence(
  int beginIndex,
  int endIndex)

Returns a character sequence that is a subsequence of this sequence. 

An invocation of this method of the form 



str.subSequence(begin,end) 

behaves in exactly the same way as the invocation 



str.substring(begin,end) 


    beginIndex - the begin index, inclusive. 
    endIndex - the end index, exclusive. 

    Returns: the specified subsequence. 

*java.lang.String.substring(int)*

public |java.lang.String| substring(int beginIndex)

Returns a string that is a substring of this string. The substring begins with 
the character at the specified index and extends to the end of this string. 
Examples: 

"unhappy".substring(2) returns "happy" "Harbison".substring(3) returns "bison" 
"emptiness".substring(9) returns "" (an empty string) 


    beginIndex - the beginning index, inclusive. 

    Returns: the specified substring. 

*java.lang.String.substring(int,int)*

public |java.lang.String| substring(
  int beginIndex,
  int endIndex)

Returns a string that is a substring of this string. The substring begins at 
the specifiedbeginIndexand extends to the character at indexendIndex - 1. Thus 
the length of the substring isendIndex-beginIndex. 

Examples: 

"hamburger".substring(4, 8) returns "urge" "smiles".substring(1, 5) returns 
"mile" 


    beginIndex - the beginning index, inclusive. 
    endIndex - the ending index, exclusive. 

    Returns: the specified substring. 

*java.lang.String.toCharArray()*

public char[] toCharArray()

Converts this string to a new character array. 



    Returns: a newly allocated character array whose length is the length of this string and 
             whose contents are initialized to contain the character sequence 
             represented by this string. 

*java.lang.String.toLowerCase()*

public |java.lang.String| toLowerCase()

Converts all of the characters in thisStringto lower case using the rules of 
the default locale. This is equivalent to 
callingtoLowerCase(Locale.getDefault()). 

Note: This method is locale sensitive, and may produce unexpected results if 
used for strings that are intended to be interpreted locale independently. 
Examples are programming language identifiers, protocol keys, and HTML tags. 
For instance,"TITLE".toLowerCase()in a Turkish locale returns"t\u0131tle", 
where '\u0131' is the LATIN SMALL LETTER DOTLESS I character. To obtain correct 
results for locale insensitive strings, usetoLowerCase(Locale.ROOT). 



    Returns: the {@code String}, converted to lowercase. 

*java.lang.String.toLowerCase(Locale)*

public |java.lang.String| toLowerCase(java.util.Locale locale)

Converts all of the characters in thisStringto lower case using the rules of 
the givenLocale. Case mapping is based on the Unicode Standard version 
specified by the Character(|java.lang.Character|) class. Since case mappings 
are not always 1:1 char mappings, the resultingStringmay be a different length 
than the originalString. 

Examples of lowercase mappings are in the following table: 

Language Code of Locale Upper Case Lower Case Description 

tr (Turkish) u0130 u0069 capital letter I with dot above -> small letter i 

tr (Turkish) u0049 u0131 capital letter I -> small letter dotless i 

(all) French Fries french fries lowercased all chars in String 

(all) 





lowercased all chars in String 




    locale - use the case transformation rules for this locale 

    Returns: the {@code String}, converted to lowercase. 

*java.lang.String.toString()*

public |java.lang.String| toString()

This object (which is already a string!) is itself returned. 



    Returns: the string itself. 

*java.lang.String.toUpperCase()*

public |java.lang.String| toUpperCase()

Converts all of the characters in thisStringto upper case using the rules of 
the default locale. This method is equivalent 
totoUpperCase(Locale.getDefault()). 

Note: This method is locale sensitive, and may produce unexpected results if 
used for strings that are intended to be interpreted locale independently. 
Examples are programming language identifiers, protocol keys, and HTML tags. 
For instance,"title".toUpperCase()in a Turkish locale returns"T\u0130TLE", 
where '\u0130' is the LATIN CAPITAL LETTER I WITH DOT ABOVE character. To 
obtain correct results for locale insensitive strings, 
usetoUpperCase(Locale.ROOT). 



    Returns: the {@code String}, converted to uppercase. 

*java.lang.String.toUpperCase(Locale)*

public |java.lang.String| toUpperCase(java.util.Locale locale)

Converts all of the characters in thisStringto upper case using the rules of 
the givenLocale. Case mapping is based on the Unicode Standard version 
specified by the Character(|java.lang.Character|) class. Since case mappings 
are not always 1:1 char mappings, the resultingStringmay be a different length 
than the originalString. 

Examples of locale-sensitive and 1:M case mappings are in the following table. 



Language Code of Locale Lower Case Upper Case Description 

tr (Turkish) u0069 u0130 small letter i -> capital letter I with dot above 

tr (Turkish) u0131 u0049 small letter dotless i -> capital letter I 

(all) u00df u0053 u0053 small letter sharp s -> two letters: SS 

(all) Fahrvergngen FAHRVERGNGEN 




    locale - use the case transformation rules for this locale 

    Returns: the {@code String}, converted to uppercase. 

*java.lang.String.trim()*

public |java.lang.String| trim()

Returns a string whose value is this string, with any leading and trailing 
whitespace removed. 

If thisStringobject represents an empty character sequence, or the first and 
last characters of character sequence represented by thisStringobject both have 
codes greater than'\u0020'(the space character), then a reference to 
thisStringobject is returned. 

Otherwise, if there is no character with a code greater than'\u0020'in the 
string, then aStringobject representing an empty string is returned. 

Otherwise, let k be the index of the first character in the string whose code 
is greater than'\u0020', and let m be the index of the last character in the 
string whose code is greater than'\u0020'. AStringobject is returned, 
representing the substring of this string that begins with the character at 
index k and ends with the character at index m-that is, the result 
ofthis.substring(k, m + 1). 

This method may be used to trim whitespace (as defined above) from the 
beginning and end of a string. 



    Returns: A string whose value is this string, with any leading and trailing white space 
             removed, or this string if it has no leading or trailing white 
             space. 

*java.lang.String.valueOf(boolean)*

public static |java.lang.String| valueOf(boolean b)

Returns the string representation of thebooleanargument. 


    b - a {@code boolean}. 

    Returns: if the argument is {@code true}, a string equal to {@code "true"} is returned; 
             otherwise, a string equal to {@code "false"} is returned. 

*java.lang.String.valueOf(char)*

public static |java.lang.String| valueOf(char c)

Returns the string representation of thecharargument. 


    c - a {@code char}. 

    Returns: a string of length {@code 1} containing as its single character the argument 
             {@code c}. 

*java.lang.String.valueOf(char[])*

public static |java.lang.String| valueOf(char[] data)

Returns the string representation of thechararray argument. The contents of the 
character array are copied; subsequent modification of the character array does 
not affect the returned string. 


    data - the character array. 

    Returns: a {@code String} that contains the characters of the character array. 

*java.lang.String.valueOf(char[],int,int)*

public static |java.lang.String| valueOf(
  char[] data,
  int offset,
  int count)

Returns the string representation of a specific subarray of thechararray 
argument. 

Theoffsetargument is the index of the first character of the subarray. 
Thecountargument specifies the length of the subarray. The contents of the 
subarray are copied; subsequent modification of the character array does not 
affect the returned string. 


    data - the character array. 
    offset - initial offset of the subarray. 
    count - length of the subarray. 

    Returns: a {@code String} that contains the characters of the specified subarray of the 
             character array. 

*java.lang.String.valueOf(double)*

public static |java.lang.String| valueOf(double d)

Returns the string representation of thedoubleargument. 

The representation is exactly the one returned by theDouble.toStringmethod of 
one argument. 


    d - a {@code double}. 

    Returns: a string representation of the {@code double} argument. 

*java.lang.String.valueOf(float)*

public static |java.lang.String| valueOf(float f)

Returns the string representation of thefloatargument. 

The representation is exactly the one returned by theFloat.toStringmethod of 
one argument. 


    f - a {@code float}. 

    Returns: a string representation of the {@code float} argument. 

*java.lang.String.valueOf(int)*

public static |java.lang.String| valueOf(int i)

Returns the string representation of theintargument. 

The representation is exactly the one returned by theInteger.toStringmethod of 
one argument. 


    i - an {@code int}. 

    Returns: a string representation of the {@code int} argument. 

*java.lang.String.valueOf(long)*

public static |java.lang.String| valueOf(long l)

Returns the string representation of thelongargument. 

The representation is exactly the one returned by theLong.toStringmethod of one 
argument. 


    l - a {@code long}. 

    Returns: a string representation of the {@code long} argument. 

*java.lang.String.valueOf(Object)*

public static |java.lang.String| valueOf(java.lang.Object obj)

Returns the string representation of theObjectargument. 


    obj - an {@code Object}. 

    Returns: if the argument is {@code null}, then a string equal to {@code "null"}; 
             otherwise, the value of {@code obj.toString()} is returned. 


