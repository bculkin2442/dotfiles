*java.time.temporal.TemporalAmount* *TemporalAmount* Framework-level interface d

public interface interface TemporalAmount


|java.time.temporal.TemporalAmount_Description|
|java.time.temporal.TemporalAmount_Fields|
|java.time.temporal.TemporalAmount_Constructors|
|java.time.temporal.TemporalAmount_Methods|

================================================================================

*java.time.temporal.TemporalAmount_Methods*
|java.time.temporal.TemporalAmount.addTo(Temporal)|Adds to the specified tempor
|java.time.temporal.TemporalAmount.get(TemporalUnit)|Returns the value of the r
|java.time.temporal.TemporalAmount.getUnits()|Returns the list of units uniquel
|java.time.temporal.TemporalAmount.subtractFrom(Temporal)|Subtracts this object

*java.time.temporal.TemporalAmount_Description*

Framework-level interface defining an amount of time, such as "6 hours", "8 
days" or "2 years and 3 months". 

This is the base interface type for amounts of time. An amount is distinct from 
a date or time-of-day in that it is not tied to any specific point on the 
time-line. 

The amount can be thought of as aMapof (|java.time.temporal.TemporalUnit|) 
tolong, exposed via (|java.time.temporal.TemporalAmount|) and 
(|java.time.temporal.TemporalAmount|) . A simple case might have a single 
unit-value pair, such as "6 hours". A more complex case may have multiple 
unit-value pairs, such as "7 years, 3 months and 5 days". 

There are two common implementations. (|java.time.Period|) is a date-based 
implementation, storing years, months and days. (|java.time.Duration|) is a 
time-based implementation, storing seconds and nanoseconds, but providing some 
access using other duration based units such as minutes, hours and fixed 
24-hour days. 

This interface is a framework-level interface that should not be widely used in 
application code. Instead, applications should create and pass around instances 
of concrete types, such asPeriodandDuration. 



*java.time.temporal.TemporalAmount.addTo(Temporal)*

public |java.time.temporal.Temporal| addTo(java.time.temporal.Temporal temporal)

Adds to the specified temporal object. 

Adds the amount to the specified temporal object using the logic encapsulated 
in the implementing class. 

There are two equivalent ways of using this method. The first is to invoke this 
method directly. The second is to use (|java.time.temporal.Temporal|) : 

// These two lines are equivalent, but the second approach is recommended 
dateTime = amount.addTo(dateTime); dateTime = dateTime.plus(adder); 

It is recommended to use the second approach,plus(TemporalAmount), as it is a 
lot clearer to read in code. 


    temporal - the temporal object to add the amount to, not null 

    Returns: an object of the same observable type with the addition made, not null 

*java.time.temporal.TemporalAmount.get(TemporalUnit)*

public long get(java.time.temporal.TemporalUnit unit)

Returns the value of the requested unit. The units returned from 
(|java.time.temporal.TemporalAmount|) uniquely define the value of 
theTemporalAmount. A value must be returned for each unit listed ingetUnits. 


    unit - the {@code TemporalUnit} for which to return the value 

    Returns: the long value of the unit 

*java.time.temporal.TemporalAmount.getUnits()*

public |java.util.List|<TemporalUnit> getUnits()

Returns the list of units uniquely defining the value of this TemporalAmount. 
The list ofTemporalUnitsis defined by the implementation class. The list is a 
snapshot of the units at the timegetUnitsis called and is not mutable. The 
units are ordered from longest duration to the shortest duration of the unit. 



    Returns: the List of {@code TemporalUnits}; not null 

*java.time.temporal.TemporalAmount.subtractFrom(Temporal)*

public |java.time.temporal.Temporal| subtractFrom(java.time.temporal.Temporal temporal)

Subtracts this object from the specified temporal object. 

Subtracts the amount from the specified temporal object using the logic 
encapsulated in the implementing class. 

There are two equivalent ways of using this method. The first is to invoke this 
method directly. The second is to use (|java.time.temporal.Temporal|) : 

// these two lines are equivalent, but the second approach is recommended 
dateTime = amount.subtractFrom(dateTime); dateTime = dateTime.minus(amount); 

It is recommended to use the second approach,minus(TemporalAmount), as it is a 
lot clearer to read in code. 


    temporal - the temporal object to subtract the amount from, not null 

    Returns: an object of the same observable type with the subtraction made, not null 


